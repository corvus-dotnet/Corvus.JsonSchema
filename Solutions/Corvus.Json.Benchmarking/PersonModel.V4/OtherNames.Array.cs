//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

#if NET8_0_OR_GREATER
using System.Buffers;
#endif
using System.Collections;
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.Benchmarking.Models.V4;

/// <summary>
/// Generated from JSON Schema.
/// </summary>
#if NET8_0_OR_GREATER
[CollectionBuilder(typeof(OtherNames), "Create")]
#endif
public readonly partial struct OtherNames
    : IJsonArray<Corvus.Json.Benchmarking.Models.V4.OtherNames>,
      IReadOnlyCollection<Corvus.Json.JsonAny>
{
    /// <summary>
    /// Gets an empty array.
    /// </summary>
    public static OtherNames EmptyArray { get; } = From(ImmutableList<JsonAny>.Empty);

    /// <inheritdoc/>
    public Corvus.Json.JsonAny this[int index]
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (index < 0)
                {
                    throw new IndexOutOfRangeException();
                }

                JsonElement.ArrayEnumerator enumerator = this.jsonElementBacking.EnumerateArray();
                while (index >= 0)
                {
                    index--;
                    if (!enumerator.MoveNext())
                    {
                        throw new IndexOutOfRangeException();
                    }
                }

                return new(enumerator.Current);
            }

            if ((this.backing & Backing.Array) != 0)
            {
                try
                {
                    return this.arrayBacking[index];
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    throw new IndexOutOfRangeException(ex.Message, ex);
                }
            }

            throw new InvalidOperationException();
        }
    }

    /// <summary>
    /// Conversion from <see cref="ImmutableList{JsonAny}"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator OtherNames(ImmutableList<JsonAny> value)
    {
        return new(value);
    }

    /// <summary>
    /// Conversion to <see cref="ImmutableList{JsonAny}"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator ImmutableList<JsonAny>(OtherNames value)
    {
        return
            __CorvusArrayHelpers.GetImmutableList(value);
    }

    /// <summary>
    /// Conversion from JsonArray.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator OtherNames(JsonArray value)
    {
        if (value.HasDotnetBacking && value.ValueKind == JsonValueKind.Array)
        {
            return new(
                value.AsImmutableList());
        }

        return new(value.AsJsonElement);
    }

    /// <summary>
    /// Conversion to JsonArray.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator JsonArray(OtherNames value)
    {
        return
            value.AsArray;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="OtherNames"/> struct.
    /// </summary>
    /// <param name="items">The list of items from which to construct the array.</param>
    /// <returns>An instance of the array constructed from the list.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static OtherNames From(ImmutableList<JsonAny> items)
    {
        return new(items);
    }

    /// <summary>
    /// Create an new instance of the <see cref="OtherNames"/>" struct from a span of items.
    /// </summary>
    /// <param name="items">The span of items from which to construct the array.</param>
    /// <returns>An instance of the array constructed from the span.</returns>
    public static OtherNames Create(ReadOnlySpan<Corvus.Json.JsonAny> items)
    {
        return new([..items]);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="OtherNames"/> struct.
    /// </summary>
    /// <param name="items">The value from which to construct the instance.</param>
    /// <returns>An instance of the array constructed from the value.</returns>
    public static OtherNames FromItems(params Corvus.Json.JsonAny[] items)
    {
        return new([..items]);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="OtherNames"/> struct.
    /// </summary>
    /// <typeparam name="TItem">The type of the items in the list.</typeparam>
    /// <param name="items">The value from which to construct the instance.</param>
    /// <returns>An instance of the array constructed from the value.</returns>
    public static OtherNames FromItems<TItem>(params TItem[] items)
        where TItem : struct, IJsonValue<TItem>
    {
        return new([..items.Select(item => item.AsAny)]);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="OtherNames"/> struct.
    /// </summary>
    /// <typeparam name="TItem1">The type of the 1st item in the array.</typeparam>
    /// <param name="item1">The 1st item in the array.</param>
    /// <returns>An instance of the array constructed from the values.</returns>
    public static OtherNames FromItems<TItem1>(in TItem1 item1)
        where TItem1 : struct, IJsonValue<TItem1>
    {
        return new([item1.AsAny]);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="OtherNames"/> struct.
    /// </summary>
    /// <typeparam name="TItem1">The type of the 1st item in the array.</typeparam>
    /// <typeparam name="TItem2">The type of the 2nd item in the array.</typeparam>
    /// <param name="item1">The 1st item in the array.</param>
    /// <param name="item2">The 2nd item in the array.</param>
    /// <returns>An instance of the array constructed from the values.</returns>
    public static OtherNames FromItems<TItem1, TItem2>(in TItem1 item1, in TItem2 item2)
        where TItem1 : struct, IJsonValue<TItem1>
        where TItem2 : struct, IJsonValue<TItem2>
    {
        return new([item1.AsAny, item2.AsAny]);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="OtherNames"/> struct.
    /// </summary>
    /// <typeparam name="TItem1">The type of the 1st item in the array.</typeparam>
    /// <typeparam name="TItem2">The type of the 2nd item in the array.</typeparam>
    /// <typeparam name="TItem3">The type of the 3rd item in the array.</typeparam>
    /// <param name="item1">The 1st item in the array.</param>
    /// <param name="item2">The 2nd item in the array.</param>
    /// <param name="item3">The 3rd item in the array.</param>
    /// <returns>An instance of the array constructed from the values.</returns>
    public static OtherNames FromItems<TItem1, TItem2, TItem3>(in TItem1 item1, in TItem2 item2, in TItem3 item3)
        where TItem1 : struct, IJsonValue<TItem1>
        where TItem2 : struct, IJsonValue<TItem2>
        where TItem3 : struct, IJsonValue<TItem3>
    {
        return new([item1.AsAny, item2.AsAny, item3.AsAny]);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="OtherNames"/> struct.
    /// </summary>
    /// <typeparam name="TItem1">The type of the 1st item in the array.</typeparam>
    /// <typeparam name="TItem2">The type of the 2nd item in the array.</typeparam>
    /// <typeparam name="TItem3">The type of the 3rd item in the array.</typeparam>
    /// <typeparam name="TItem4">The type of the 4th item in the array.</typeparam>
    /// <param name="item1">The 1st item in the array.</param>
    /// <param name="item2">The 2nd item in the array.</param>
    /// <param name="item3">The 3rd item in the array.</param>
    /// <param name="item4">The 4th item in the array.</param>
    /// <returns>An instance of the array constructed from the values.</returns>
    public static OtherNames FromItems<TItem1, TItem2, TItem3, TItem4>(in TItem1 item1, in TItem2 item2, in TItem3 item3, in TItem4 item4)
        where TItem1 : struct, IJsonValue<TItem1>
        where TItem2 : struct, IJsonValue<TItem2>
        where TItem3 : struct, IJsonValue<TItem3>
        where TItem4 : struct, IJsonValue<TItem4>
    {
        return new([item1.AsAny, item2.AsAny, item3.AsAny, item4.AsAny]);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="OtherNames"/> struct.
    /// </summary>
    /// <typeparam name="TItem1">The type of the 1st item in the array.</typeparam>
    /// <typeparam name="TItem2">The type of the 2nd item in the array.</typeparam>
    /// <typeparam name="TItem3">The type of the 3rd item in the array.</typeparam>
    /// <typeparam name="TItem4">The type of the 4th item in the array.</typeparam>
    /// <typeparam name="TItem5">The type of the 5th item in the array.</typeparam>
    /// <param name="item1">The 1st item in the array.</param>
    /// <param name="item2">The 2nd item in the array.</param>
    /// <param name="item3">The 3rd item in the array.</param>
    /// <param name="item4">The 4th item in the array.</param>
    /// <param name="item5">The 5th item in the array.</param>
    /// <returns>An instance of the array constructed from the values.</returns>
    public static OtherNames FromItems<TItem1, TItem2, TItem3, TItem4, TItem5>(in TItem1 item1, in TItem2 item2, in TItem3 item3, in TItem4 item4, in TItem5 item5)
        where TItem1 : struct, IJsonValue<TItem1>
        where TItem2 : struct, IJsonValue<TItem2>
        where TItem3 : struct, IJsonValue<TItem3>
        where TItem4 : struct, IJsonValue<TItem4>
        where TItem5 : struct, IJsonValue<TItem5>
    {
        return new([item1.AsAny, item2.AsAny, item3.AsAny, item4.AsAny, item5.AsAny]);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="OtherNames"/> struct.
    /// </summary>
    /// <typeparam name="TItem1">The type of the 1st item in the array.</typeparam>
    /// <typeparam name="TItem2">The type of the 2nd item in the array.</typeparam>
    /// <typeparam name="TItem3">The type of the 3rd item in the array.</typeparam>
    /// <typeparam name="TItem4">The type of the 4th item in the array.</typeparam>
    /// <typeparam name="TItem5">The type of the 5th item in the array.</typeparam>
    /// <typeparam name="TItem6">The type of the 6th item in the array.</typeparam>
    /// <param name="item1">The 1st item in the array.</param>
    /// <param name="item2">The 2nd item in the array.</param>
    /// <param name="item3">The 3rd item in the array.</param>
    /// <param name="item4">The 4th item in the array.</param>
    /// <param name="item5">The 5th item in the array.</param>
    /// <param name="item6">The 6th item in the array.</param>
    /// <returns>An instance of the array constructed from the values.</returns>
    public static OtherNames FromItems<TItem1, TItem2, TItem3, TItem4, TItem5, TItem6>(in TItem1 item1, in TItem2 item2, in TItem3 item3, in TItem4 item4, in TItem5 item5, in TItem6 item6)
        where TItem1 : struct, IJsonValue<TItem1>
        where TItem2 : struct, IJsonValue<TItem2>
        where TItem3 : struct, IJsonValue<TItem3>
        where TItem4 : struct, IJsonValue<TItem4>
        where TItem5 : struct, IJsonValue<TItem5>
        where TItem6 : struct, IJsonValue<TItem6>
    {
        return new([item1.AsAny, item2.AsAny, item3.AsAny, item4.AsAny, item5.AsAny, item6.AsAny]);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="OtherNames"/> struct.
    /// </summary>
    /// <typeparam name="TItem1">The type of the 1st item in the array.</typeparam>
    /// <typeparam name="TItem2">The type of the 2nd item in the array.</typeparam>
    /// <typeparam name="TItem3">The type of the 3rd item in the array.</typeparam>
    /// <typeparam name="TItem4">The type of the 4th item in the array.</typeparam>
    /// <typeparam name="TItem5">The type of the 5th item in the array.</typeparam>
    /// <typeparam name="TItem6">The type of the 6th item in the array.</typeparam>
    /// <typeparam name="TItem7">The type of the 7th item in the array.</typeparam>
    /// <param name="item1">The 1st item in the array.</param>
    /// <param name="item2">The 2nd item in the array.</param>
    /// <param name="item3">The 3rd item in the array.</param>
    /// <param name="item4">The 4th item in the array.</param>
    /// <param name="item5">The 5th item in the array.</param>
    /// <param name="item6">The 6th item in the array.</param>
    /// <param name="item7">The 7th item in the array.</param>
    /// <returns>An instance of the array constructed from the values.</returns>
    public static OtherNames FromItems<TItem1, TItem2, TItem3, TItem4, TItem5, TItem6, TItem7>(in TItem1 item1, in TItem2 item2, in TItem3 item3, in TItem4 item4, in TItem5 item5, in TItem6 item6, in TItem7 item7)
        where TItem1 : struct, IJsonValue<TItem1>
        where TItem2 : struct, IJsonValue<TItem2>
        where TItem3 : struct, IJsonValue<TItem3>
        where TItem4 : struct, IJsonValue<TItem4>
        where TItem5 : struct, IJsonValue<TItem5>
        where TItem6 : struct, IJsonValue<TItem6>
        where TItem7 : struct, IJsonValue<TItem7>
    {
        return new([item1.AsAny, item2.AsAny, item3.AsAny, item4.AsAny, item5.AsAny, item6.AsAny, item7.AsAny]);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="OtherNames"/> struct.
    /// </summary>
    /// <param name="items">The items from which to construct the instance.</param>
    /// <returns>An instance of the array constructed from the items.</returns>
    public static OtherNames FromRange(IEnumerable<Corvus.Json.JsonAny> items)
    {
        return new([..items]);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="OtherNames"/> struct.
    /// </summary>
    /// <typeparam name="TItem">The type of the items to add.</typeparam>
    /// <param name="items">The items from which to construct the instance.</param>
    /// <returns>An instance of the array constructed from the items.</returns>
    public static OtherNames FromRange<TItem>(IEnumerable<TItem> items)
        where TItem : struct, IJsonValue<TItem>
    {
        return new([..items.Select(item => item.AsAny)]);
    }

    /// <summary>
    /// Create an array from the given items.
    /// </summary>
    /// <param name="items">The items from which to create the array.</param>
    /// <returns>The new array created from the items.</returns>
    public static OtherNames FromRange(IEnumerable<string> items)
    {
        return new([..items]);
    }

    /// <summary>
    /// Create an array from the given items.
    /// </summary>
    /// <param name="items">The items from which to create the array.</param>
    /// <returns>The new array created from the items.</returns>
    public static OtherNames FromRange(IEnumerable<double> items)
    {
        return new([..items]);
    }

    /// <summary>
    /// Create an array from the given items.
    /// </summary>
    /// <param name="items">The items from which to create the array.</param>
    /// <returns>The new array created from the items.</returns>
    public static OtherNames FromRange(IEnumerable<float> items)
    {
        return new([..items]);
    }

    /// <summary>
    /// Create an array from the given items.
    /// </summary>
    /// <param name="items">The items from which to create the array.</param>
    /// <returns>The new array created from the items.</returns>
    public static OtherNames FromRange(IEnumerable<int> items)
    {
        return new([..items]);
    }

    /// <summary>
    /// Create an array from the given items.
    /// </summary>
    /// <param name="items">The items from which to create the array.</param>
    /// <returns>The new array created from the items.</returns>
    public static OtherNames FromRange(IEnumerable<long> items)
    {
        return new([..items]);
    }

    /// <summary>
    /// Create an array from the given items.
    /// </summary>
    /// <param name="items">The items from which to create the array.</param>
    /// <returns>The new array created from the items.</returns>
    public static OtherNames FromRange(IEnumerable<bool> items)
    {
        return new([..items]);
    }

    /// <summary>
    /// Create an array from the given items.
    /// </summary>
    /// <typeparam name="T">The type of the <paramref name = "items"/> from which to create the array.</typeparam>
    /// <param name="items">The items from which to create the array.</param>
    /// <returns>The new array created from the items.</returns>
    /// <remarks>
    /// This will serialize the items to create the underlying array. Note the
    /// other overloads which avoid this serialization step.
    /// </remarks>
    public static OtherNames From<T>(IEnumerable<T> items)
    {
        ImmutableList<JsonAny>.Builder builder = ImmutableList.CreateBuilder<JsonAny>();
        var abw = new ArrayBufferWriter<byte>();
        using var writer = new Utf8JsonWriter(abw);

        foreach (T item in items)
        {
            writer.Reset();
            JsonSerializer.Serialize(writer, item);
            writer.Flush();
            builder.Add(JsonAny.Parse(abw.WrittenMemory));
        }

        return new(builder.ToImmutable());
    }

    /// <inheritdoc/>
    IEnumerator<Corvus.Json.JsonAny> IEnumerable<Corvus.Json.JsonAny>.GetEnumerator() => this.EnumerateArray();

    /// <inheritdoc/>
    IEnumerator IEnumerable.GetEnumerator() => this.EnumerateArray();

    /// <inheritdoc/>
    int IReadOnlyCollection<Corvus.Json.JsonAny>.Count => this.GetArrayLength();

    /// <inheritdoc/>
    public ImmutableList<JsonAny> AsImmutableList()
    {
        return __CorvusArrayHelpers.GetImmutableList(this);
    }

    /// <inheritdoc/>
    public ImmutableList<JsonAny>.Builder AsImmutableListBuilder()
    {
        return __CorvusArrayHelpers.GetImmutableListBuilder(this);
    }

    /// <inheritdoc/>
    public int GetArrayLength()
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            return this.jsonElementBacking.GetArrayLength();
        }

        if ((this.backing & Backing.Array) != 0)
        {
            return this.arrayBacking.Count;
        }

        return 0;
    }

    /// <inheritdoc/>
    public JsonArrayEnumerator EnumerateArray()
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            return new(this.jsonElementBacking);
        }

        if ((this.backing & Backing.Array) != 0)
        {
            return new(this.arrayBacking);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc/>
    public JsonArrayEnumerator<TItem> EnumerateArray<TItem>()
        where TItem : struct, IJsonValue<TItem>
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            return new(this.jsonElementBacking);
        }

        if ((this.backing & Backing.Array) != 0)
        {
            return new(this.arrayBacking);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc/>
    public OtherNames Add(in JsonAny item1)
    {
        ImmutableList<JsonAny>.Builder builder = __CorvusArrayHelpers.GetImmutableListBuilder(this);
        builder.Add(item1);
        return new(builder.ToImmutable());
    }

    /// <inheritdoc/>
    public OtherNames Add(params JsonAny[] items)
    {
        ImmutableList<JsonAny>.Builder builder = __CorvusArrayHelpers.GetImmutableListBuilder(this);
        foreach (JsonAny item in items)
        {
            builder.Add(item.AsAny);
        }

        return new(builder.ToImmutable());
    }

    /// <inheritdoc/>
    public OtherNames AddRange<TArray>(in TArray items)
        where TArray : struct, IJsonArray<TArray>
    {
        ImmutableList<JsonAny>.Builder builder = __CorvusArrayHelpers.GetImmutableListBuilder(this);
        foreach (JsonAny item in items.EnumerateArray())
        {
            builder.Add(item.AsAny);
        }

        return new(builder.ToImmutable());
    }

    /// <inheritdoc/>
    public OtherNames AddRange<TItem>(IEnumerable<TItem> items)
        where TItem : struct, IJsonValue<TItem>
    {
        ImmutableList<JsonAny>.Builder builder = __CorvusArrayHelpers.GetImmutableListBuilder(this);
        foreach (TItem item in items)
        {
            builder.Add(item.AsAny);
        }

        return new(builder.ToImmutable());
    }

    /// <inheritdoc/>
    public OtherNames AddRange(IEnumerable<JsonAny> items)
    {
        ImmutableList<JsonAny>.Builder builder = __CorvusArrayHelpers.GetImmutableListBuilder(this);
        builder.AddRange(items);
        return new(builder.ToImmutable());
    }

    /// <inheritdoc/>
    public OtherNames Insert(int index, in JsonAny item1)
    {
        return new(__CorvusArrayHelpers.GetImmutableListWith(this, index, item1));
    }

    /// <inheritdoc/>
    public OtherNames InsertRange<TArray>(int index, in TArray items)
        where TArray : struct, IJsonArray<TArray>
    {
        return new(__CorvusArrayHelpers.GetImmutableListWith(this, index, items.EnumerateArray()));
    }

    /// <inheritdoc/>
    public OtherNames InsertRange<TItem>(int index, IEnumerable<TItem> items)
        where TItem : struct, IJsonValue<TItem>
    {
        return new(__CorvusArrayHelpers.GetImmutableListWith(this, index, items.Select(item => item.AsAny)));
    }

    /// <inheritdoc/>
    public OtherNames InsertRange(int index, IEnumerable<JsonAny> items)
    {
        return new(__CorvusArrayHelpers.GetImmutableListWith(this, index, items));
    }

    /// <inheritdoc/>
    public OtherNames Replace(in JsonAny oldValue, in JsonAny newValue)
    {
        return new(__CorvusArrayHelpers.GetImmutableListReplacing(this, oldValue, newValue));
    }

    /// <inheritdoc/>
    public OtherNames SetItem(int index, in JsonAny value)
    {
        return new(__CorvusArrayHelpers.GetImmutableListSetting(this, index, value));
    }

    /// <inheritdoc/>
    public OtherNames Remove(in JsonAny oldValue)
    {
        return new(__CorvusArrayHelpers.GetImmutableListWithout(this, oldValue));
    }

    /// <inheritdoc/>
    public OtherNames RemoveAt(int index)
    {
        return new(__CorvusArrayHelpers.GetImmutableListWithoutRange(this, index, 1));
    }

    /// <inheritdoc/>
    public OtherNames RemoveRange(int index, int count)
    {
        return new(__CorvusArrayHelpers.GetImmutableListWithoutRange(this, index, count));
    }

    private static class __CorvusArrayHelpers
    {
        /// <summary>
        /// Builds an <see cref = "ImmutableList{JsonAny}"/> from the array.
        /// </summary>
        /// <param name="arrayInstance">The array instance.</param>
        /// <returns>An immutable list of <see cref = "JsonAny"/> built from the array.</returns>
        /// <exception cref = "InvalidOperationException">The value is not an array.</exception>
        public static ImmutableList<JsonAny> GetImmutableList(in OtherNames arrayInstance)
        {
            if ((arrayInstance.backing & Backing.Array) != 0)
            {
                return arrayInstance.arrayBacking;
            }

            return GetImmutableListBuilder(arrayInstance).ToImmutable();
        }

        /// <summary>
        /// Builds an <see cref = "ImmutableList{JsonAny}.Builder"/> from the array.
        /// </summary>
        /// <param name="arrayInstance">The array instance.</param>
        /// <returns>An immutable list builder of <see cref = "JsonAny"/>, built from the existing array.</returns>
        /// <exception cref = "InvalidOperationException">The value is not an array.</exception>
        public static ImmutableList<JsonAny>.Builder GetImmutableListBuilder(in OtherNames arrayInstance)
        {
            if ((arrayInstance.backing & Backing.JsonElement) != 0)
            {
                if (arrayInstance.jsonElementBacking.ValueKind == JsonValueKind.Array)
                {
                    ImmutableList<JsonAny>.Builder builder = ImmutableList.CreateBuilder<JsonAny>();
                    foreach (JsonElement item in arrayInstance.jsonElementBacking.EnumerateArray())
                    {
                        builder.Add(new(item));
                    }

                    return builder;
                }
            }

            if ((arrayInstance.backing & Backing.Array) != 0)
            {
                return arrayInstance.arrayBacking.ToBuilder();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref = "ImmutableList{JsonAny}"/> from the array, replacing the item at the specified index with the given item.
        /// </summary>
        /// <param name="arrayInstance">The array instance.</param>
        /// <param name="index">The index at which to add the element.</param>
        /// <param name="value">The value to add.</param>
        /// <returns>An immutable list containing the contents of the list, with the specified item at the index.</returns>
        /// <exception cref = "InvalidOperationException">The value is not an array.</exception>
        /// <exception cref = "IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        public static ImmutableList<JsonAny> GetImmutableListSetting(in OtherNames arrayInstance, int index, in JsonAny value)
        {
            if ((arrayInstance.backing & Backing.JsonElement) != 0)
            {
                if (arrayInstance.jsonElementBacking.ValueKind == JsonValueKind.Array)
                {
                    return JsonValueHelpers.GetImmutableListFromJsonElementSetting(arrayInstance.jsonElementBacking, index, value);
                }
            }

            if ((arrayInstance.backing & Backing.Array) != 0)
            {
                try
                {
                    return arrayInstance.arrayBacking.SetItem(index, value);
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    throw new IndexOutOfRangeException(ex.Message, ex);
                }
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref = "ImmutableList{JsonAny}"/> from the array, removing the first item that equals the given value, and replacing it with the specified item.
        /// </summary>
        /// <param name="arrayInstance">The array instance.</param>
        /// <param name="oldItem">The item to remove.</param>
        /// <param name="newItem">The item to insert.</param>
        /// <returns>An immutable list containing the contents of the list, without the first instance that matches the old item, replacing it with the new item.</returns>
        /// <exception cref = "InvalidOperationException">The value is not an array.</exception>
        public static ImmutableList<JsonAny> GetImmutableListReplacing(in OtherNames arrayInstance, in JsonAny oldItem, in JsonAny newItem)
        {
            if ((arrayInstance.backing & Backing.JsonElement) != 0)
            {
                if (arrayInstance.jsonElementBacking.ValueKind == JsonValueKind.Array)
                {
                    return JsonValueHelpers.GetImmutableListFromJsonElementReplacing(arrayInstance.jsonElementBacking, oldItem, newItem);
                }
            }

            if ((arrayInstance.backing & Backing.Array) != 0)
            {
                return  arrayInstance.arrayBacking.Replace(oldItem, newItem);
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref = "ImmutableList{JsonAny}"/> from the array, removing the first item arrayInstance equals the given value.
        /// </summary>
        /// <param name="arrayInstance">The array instance.</param>
        /// <param name="item">The item to remove.</param>
        /// <returns>An immutable list containing the contents of the list, without the first instance arrayInstance matches the given item.</returns>
        /// <exception cref = "InvalidOperationException">The value is not an array.</exception>
        public static ImmutableList<JsonAny> GetImmutableListWithout(in OtherNames arrayInstance, in JsonAny item)
        {
            if ((arrayInstance.backing & Backing.JsonElement) != 0)
            {
                if (arrayInstance.jsonElementBacking.ValueKind == JsonValueKind.Array)
                {
                    return JsonValueHelpers.GetImmutableListFromJsonElementWithout(arrayInstance.jsonElementBacking, item);
                }
            }

            if ((arrayInstance.backing & Backing.Array) != 0)
            {
                return  arrayInstance.arrayBacking.Remove(item);
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref = "ImmutableList{JsonAny}"/> from the array, removing the given range.
        /// </summary>
        /// <param name="arrayInstance">The array instance.</param>
        /// <param name="index">The start index of the range to remove.</param>
        /// <param name="count">The length of the range to remove.</param>
        /// <returns>An immutable list containing the contents of the list, without the given range of items.</returns>
        /// <exception cref = "InvalidOperationException">The value is not an array.</exception>
        /// <exception cref = "IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        public static ImmutableList<JsonAny> GetImmutableListWithoutRange(in OtherNames arrayInstance, int index, int count)
        {
            if ((arrayInstance.backing & Backing.JsonElement) != 0)
            {
                if (arrayInstance.jsonElementBacking.ValueKind == JsonValueKind.Array)
                {
                    return JsonValueHelpers.GetImmutableListFromJsonElementWithoutRange(arrayInstance.jsonElementBacking, index, count);
                }
            }

            if ((arrayInstance.backing & Backing.Array) != 0)
            {
                try
                {
                    return arrayInstance.arrayBacking.RemoveRange(index, count);
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    throw new IndexOutOfRangeException(ex.Message, ex);
                }
            }

            throw new InvalidOperationException();
        }

        // <summary>
        // Builds an <see cref = "ImmutableList{JsonAny}"/> from the array, inserting the given item at the index.
        // </summary>
        // <param name="arrayInstance">The array instance.</param>
        // <param name="index">The index at which to add the element.</param>
        // <param name="value">The value to add.</param>
        // <returns>An immutable list containing the contents of the list, without the array.</returns>
        // <exception cref = "InvalidOperationException">The value is not an array.</exception>
        // <exception cref = "IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        public static ImmutableList<JsonAny> GetImmutableListWith(in OtherNames arrayInstance, int index, in JsonAny value)
        {
            if ((arrayInstance.backing & Backing.JsonElement) != 0)
            {
                if (arrayInstance.jsonElementBacking.ValueKind == JsonValueKind.Array)
                {
                    return JsonValueHelpers.GetImmutableListFromJsonElementWith(arrayInstance.jsonElementBacking, index, value);
                }
            }

            if ((arrayInstance.backing & Backing.Array) != 0)
            {
                try
                {
                    return arrayInstance.arrayBacking.Insert(index, value);
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    throw new IndexOutOfRangeException(ex.Message, ex);
                }
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref = "ImmutableList{JsonAny}"/> from the array, inserting the items at the
        /// given index.
        /// </summary>
        /// <param name="arrayInstance">The array instance.</param>
        /// <param name="index">The index at which to add the element.</param>
        /// <param name="values">The values to add.</param>
        /// <returns>An immutable list containing the contents of the list, without the array.</returns>
        /// <exception cref = "InvalidOperationException">The value is not an array.</exception>
        /// <exception cref = "IndexOutOfRangeException">Thrown if the range is beyond the bounds of the array.</exception>
        public static ImmutableList<JsonAny> GetImmutableListWith<TEnumerable>(in OtherNames arrayInstance, int index, TEnumerable values)
            where TEnumerable : IEnumerable<JsonAny>
        {
            if ((arrayInstance.backing & Backing.JsonElement) != 0)
            {
                if (arrayInstance.jsonElementBacking.ValueKind == JsonValueKind.Array)
                {
                    return JsonValueHelpers.GetImmutableListFromJsonElementWith(arrayInstance.jsonElementBacking, index, values);
                }
            }

            if ((arrayInstance.backing & Backing.Array) != 0)
            {
                try
                {
                    return arrayInstance.arrayBacking.InsertRange(index, values);
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    throw new IndexOutOfRangeException(ex.Message, ex);
                }
            }

            throw new InvalidOperationException();
        }
    }
}
