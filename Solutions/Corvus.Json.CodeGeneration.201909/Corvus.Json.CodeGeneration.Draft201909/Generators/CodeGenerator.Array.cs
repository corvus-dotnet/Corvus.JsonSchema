//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Corvus.Json.CodeGeneration.Generators.Draft201909 {
    using System.Collections.Generic;
    using Corvus.Json;
    using System;
    
    
    public partial class CodeGeneratorArray : CodeGeneratorArrayBase {
        
        
        #line 1426 "CodeGenerator.Array.tt"

    public bool ShouldGenerate
    {
        get
        {
            return IsImplicitArray || IsNotImplicitType;
        }
    }

        #line default
        #line hidden
        
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 4 "CodeGenerator.Array.tt"

    // This is only emitted if IsImplicitArray is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.Array should not be emitted if IsImplicitArray is false.");
    } 
            
            #line default
            #line hidden
            
            #line 10 "CodeGenerator.Array.tt"
            this.Write(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Buffers;
using System.Collections;
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace ");
            
            #line default
            #line hidden
            
            #line 29 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Namespace ));
            
            #line default
            #line hidden
            
            #line 29 "CodeGenerator.Array.tt"
            this.Write(";\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 31 "CodeGenerator.Array.tt"
 BeginNesting(); 
            
            #line default
            #line hidden
            
            #line 32 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( FormattedTypeDocumentation ));
            
            #line default
            #line hidden
            
            #line 32 "CodeGenerator.Array.tt"
            this.Write("\r\n");
            
            #line default
            #line hidden
            
            #line 33 "CodeGenerator.Array.tt"
  if(CanEnumerateAsSpecificType && !IsTuple)
    { 
            
            #line default
            #line hidden
            
            #line 35 "CodeGenerator.Array.tt"
            this.Write("#if NET8_0_OR_GREATER\r\n[CollectionBuilder(typeof(");
            
            #line default
            #line hidden
            
            #line 36 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 36 "CodeGenerator.Array.tt"
            this.Write("), \"Create\")]\r\npublic readonly partial struct ");
            
            #line default
            #line hidden
            
            #line 37 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 37 "CodeGenerator.Array.tt"
            this.Write(" : IJsonArray<");
            
            #line default
            #line hidden
            
            #line 37 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 37 "CodeGenerator.Array.tt"
            this.Write(">, IEnumerable<");
            
            #line default
            #line hidden
            
            #line 37 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 37 "CodeGenerator.Array.tt"
            this.Write(">\r\n#else\r\npublic readonly partial struct ");
            
            #line default
            #line hidden
            
            #line 39 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 39 "CodeGenerator.Array.tt"
            this.Write(" : IJsonArray<");
            
            #line default
            #line hidden
            
            #line 39 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 39 "CodeGenerator.Array.tt"
            this.Write(">\r\n#endif\r\n");
            
            #line default
            #line hidden
            
            #line 41 "CodeGenerator.Array.tt"
  }
    else if (!IsTuple)
    { 
            
            #line default
            #line hidden
            
            #line 44 "CodeGenerator.Array.tt"
            this.Write("#if NET8_0_OR_GREATER\r\n[CollectionBuilder(typeof(");
            
            #line default
            #line hidden
            
            #line 45 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 45 "CodeGenerator.Array.tt"
            this.Write("), \"Create\")]\r\npublic readonly partial struct ");
            
            #line default
            #line hidden
            
            #line 46 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 46 "CodeGenerator.Array.tt"
            this.Write(" : IJsonArray<");
            
            #line default
            #line hidden
            
            #line 46 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 46 "CodeGenerator.Array.tt"
            this.Write(">, IEnumerable<JsonAny>\r\n#else\r\npublic readonly partial struct ");
            
            #line default
            #line hidden
            
            #line 48 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 48 "CodeGenerator.Array.tt"
            this.Write(" : IJsonArray<");
            
            #line default
            #line hidden
            
            #line 48 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 48 "CodeGenerator.Array.tt"
            this.Write(">\r\n#endif\r\n");
            
            #line default
            #line hidden
            
            #line 50 "CodeGenerator.Array.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 53 "CodeGenerator.Array.tt"
            this.Write("public readonly partial struct ");
            
            #line default
            #line hidden
            
            #line 53 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 53 "CodeGenerator.Array.tt"
            this.Write(" : IJsonArray<");
            
            #line default
            #line hidden
            
            #line 53 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 53 "CodeGenerator.Array.tt"
            this.Write(">\r\n");
            
            #line default
            #line hidden
            
            #line 54 "CodeGenerator.Array.tt"
  } 
            
            #line default
            #line hidden
            
            #line 55 "CodeGenerator.Array.tt"
            this.Write("{\r\n    /// <summary>\r\n    /// Gets an empty array.\r\n    /// </summary>\r\n    publi" +
                    "c static readonly ");
            
            #line default
            #line hidden
            
            #line 59 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 59 "CodeGenerator.Array.tt"
            this.Write(" EmptyArray = From(ImmutableList<JsonAny>.Empty);\r\n\r\n    /// <summary>\r\n    /// I" +
                    "nitializes a new instance of the <see cref=\"");
            
            #line default
            #line hidden
            
            #line 62 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 62 "CodeGenerator.Array.tt"
            this.Write("\"/> struct.\r\n    /// </summary>\r\n    /// <param name=\"value\">The value from which" +
                    " to construct the instance.</param>\r\n    public ");
            
            #line default
            #line hidden
            
            #line 65 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 65 "CodeGenerator.Array.tt"
            this.Write("(ImmutableList<JsonAny> value)\r\n    {\r\n        this.jsonElementBacking = default;" +
                    "\r\n        this.backing = Backing.Array;\r\n");
            
            #line default
            #line hidden
            
            #line 69 "CodeGenerator.Array.tt"
  if(IsImplicitString || IsNotImplicitType)
    { 
            
            #line default
            #line hidden
            
            #line 71 "CodeGenerator.Array.tt"
            this.Write("        this.stringBacking = string.Empty;\r\n");
            
            #line default
            #line hidden
            
            #line 72 "CodeGenerator.Array.tt"
  }
    if (IsImplicitBoolean && !(IsImplicitNumber || IsNotImplicitType))
    { 
            
            #line default
            #line hidden
            
            #line 75 "CodeGenerator.Array.tt"
            this.Write("        this.boolBacking = default;\r\n");
            
            #line default
            #line hidden
            
            #line 76 "CodeGenerator.Array.tt"
  }
    if(IsImplicitNumber || IsNotImplicitType)
    { 
            
            #line default
            #line hidden
            
            #line 79 "CodeGenerator.Array.tt"
            this.Write("        this.numberBacking = default;\r\n");
            
            #line default
            #line hidden
            
            #line 80 "CodeGenerator.Array.tt"
  } 
            
            #line default
            #line hidden
            
            #line 81 "CodeGenerator.Array.tt"
            this.Write("        this.arrayBacking = value;\r\n");
            
            #line default
            #line hidden
            
            #line 82 "CodeGenerator.Array.tt"
  if(IsImplicitObject || IsNotImplicitType)
    { 
            
            #line default
            #line hidden
            
            #line 84 "CodeGenerator.Array.tt"
            this.Write("        this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;\r\n");
            
            #line default
            #line hidden
            
            #line 85 "CodeGenerator.Array.tt"
  } 
            
            #line default
            #line hidden
            
            #line 86 "CodeGenerator.Array.tt"
            this.Write("    }\r\n\r\n    /// <summary>\r\n    /// Initializes a new instance of the <see cref=\"" +
                    "");
            
            #line default
            #line hidden
            
            #line 89 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 89 "CodeGenerator.Array.tt"
            this.Write("\"/> struct.\r\n    /// </summary>\r\n    /// <param name=\"value\">The value from which" +
                    " to construct the instance.</param>\r\n    public ");
            
            #line default
            #line hidden
            
            #line 92 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 92 "CodeGenerator.Array.tt"
            this.Write("(IEnumerable<JsonAny> value)\r\n    {\r\n        this.jsonElementBacking = default;\r\n" +
                    "        this.backing = Backing.Array;\r\n");
            
            #line default
            #line hidden
            
            #line 96 "CodeGenerator.Array.tt"
  if(IsImplicitString || IsNotImplicitType)
    { 
            
            #line default
            #line hidden
            
            #line 98 "CodeGenerator.Array.tt"
            this.Write("        this.stringBacking = string.Empty;\r\n");
            
            #line default
            #line hidden
            
            #line 99 "CodeGenerator.Array.tt"
  }
    if(IsImplicitBoolean && !(IsImplicitNumber || IsNotImplicitType))
    { 
            
            #line default
            #line hidden
            
            #line 102 "CodeGenerator.Array.tt"
            this.Write("        this.boolBacking = default;\r\n");
            
            #line default
            #line hidden
            
            #line 103 "CodeGenerator.Array.tt"
  }
    if(IsImplicitNumber || IsNotImplicitType)
    { 
            
            #line default
            #line hidden
            
            #line 106 "CodeGenerator.Array.tt"
            this.Write("        this.numberBacking = default;\r\n");
            
            #line default
            #line hidden
            
            #line 107 "CodeGenerator.Array.tt"
  } 
            
            #line default
            #line hidden
            
            #line 108 "CodeGenerator.Array.tt"
            this.Write("        this.arrayBacking = value.ToImmutableList();\r\n");
            
            #line default
            #line hidden
            
            #line 109 "CodeGenerator.Array.tt"
  if(IsImplicitObject || IsNotImplicitType)
    { 
            
            #line default
            #line hidden
            
            #line 111 "CodeGenerator.Array.tt"
            this.Write("        this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;\r\n");
            
            #line default
            #line hidden
            
            #line 112 "CodeGenerator.Array.tt"
  } 
            
            #line default
            #line hidden
            
            #line 113 "CodeGenerator.Array.tt"
            this.Write("    }\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 115 "CodeGenerator.Array.tt"
  if (CanEnumerateAsSpecificType && IsFixedSizeArray && IsNumericArray)
    { 
            
            #line default
            #line hidden
            
            #line 117 "CodeGenerator.Array.tt"
            this.Write("    /// <summary>\r\n    /// Gets the rank of the array.\r\n    /// </summary>\r\n    p" +
                    "ublic static int Rank => ");
            
            #line default
            #line hidden
            
            #line 120 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ArrayRank ));
            
            #line default
            #line hidden
            
            #line 120 "CodeGenerator.Array.tt"
            this.Write(";\r\n\r\n    /// <summary>\r\n    /// Gets the dimension of the array in this rank.\r\n  " +
                    "  /// </summary>\r\n    public static int Dimension => ");
            
            #line default
            #line hidden
            
            #line 125 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ArrayDimension ));
            
            #line default
            #line hidden
            
            #line 125 "CodeGenerator.Array.tt"
            this.Write(@";

    /// <summary>
    /// Gets the total size of a buffer required to represent the array.
    /// </summary>
    /// <remarks>
    /// This calculates the array based on the dimension of each rank. It is generally
    /// used to determine the size of the buffer required by
    /// <see cref=""TryGetNumericValues(Span{double}, out int)""/>.
    /// </remarks>
    public static int ValueBufferSize => ");
            
            #line default
            #line hidden
            
            #line 135 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ArrayValueBufferSize ));
            
            #line default
            #line hidden
            
            #line 135 "CodeGenerator.Array.tt"
            this.Write(";\r\n");
            
            #line default
            #line hidden
            
            #line 136 "CodeGenerator.Array.tt"
  } 
            
            #line default
            #line hidden
            
            #line 137 "CodeGenerator.Array.tt"
            this.Write("\r\n");
            
            #line default
            #line hidden
            
            #line 138 "CodeGenerator.Array.tt"
  if (!CanEnumerateAsSpecificType && !IsTuple)
    { 
            
            #line default
            #line hidden
            
            #line 140 "CodeGenerator.Array.tt"
            this.Write(@"    /// <inheritdoc/>
    public JsonAny this[int index]
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new JsonAny(this.jsonElementBacking[index]);
            }

            if ((this.backing & Backing.Array) != 0)
            {
                try
                {
                    return this.arrayBacking[index];
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    throw new IndexOutOfRangeException(ex.Message, ex);
                }
            }

            throw new InvalidOperationException();
        }
    }
");
            
            #line default
            #line hidden
            
            #line 165 "CodeGenerator.Array.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 168 "CodeGenerator.Array.tt"
            this.Write("    /// <inheritdoc/>\r\n    JsonAny IJsonArray<");
            
            #line default
            #line hidden
            
            #line 169 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 169 "CodeGenerator.Array.tt"
            this.Write(@">.this[int index]
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new JsonAny(this.jsonElementBacking[index]);
            }

            if ((this.backing & Backing.Array) != 0)
            {
                try
                {
                    return this.arrayBacking[index];
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    throw new IndexOutOfRangeException(ex.Message, ex);
                }
            }

            throw new InvalidOperationException();
        }
    }

");
            
            #line default
            #line hidden
            
            #line 194 "CodeGenerator.Array.tt"
      if(CanEnumerateAsSpecificType)
        {
            
            #line default
            #line hidden
            
            #line 196 "CodeGenerator.Array.tt"
            this.Write(@"    /// <summary>
    /// Gets the item at the given index.
    /// </summary>
    /// <param name=""index"">The index at which to retrieve the item.</param>
    /// <returns>The item at the given index.</returns>
    /// <exception cref=""IndexOutOfRangeException"">The index was outside the bounds of the array.</exception>
    /// <exception cref=""InvalidOperationException"">The value is not an array.</exception>
    public ");
            
            #line default
            #line hidden
            
            #line 203 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 203 "CodeGenerator.Array.tt"
            this.Write(" this[int index]\r\n    {\r\n        get\r\n        {\r\n            if ((this.backing & " +
                    "Backing.JsonElement) != 0)\r\n            {\r\n                return new ");
            
            #line default
            #line hidden
            
            #line 209 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 209 "CodeGenerator.Array.tt"
            this.Write("(this.jsonElementBacking[index]);\r\n            }\r\n\r\n            if ((this.backing" +
                    " & Backing.Array) != 0)\r\n            {\r\n                try\r\n                {\r\n" +
                    "                    return this.arrayBacking[index].As<");
            
            #line default
            #line hidden
            
            #line 216 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 216 "CodeGenerator.Array.tt"
            this.Write(@">();
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    throw new IndexOutOfRangeException(ex.Message, ex);
                }
            }

            throw new InvalidOperationException();
        }
    }
");
            
            #line default
            #line hidden
            
            #line 227 "CodeGenerator.Array.tt"
      }
    }

    if (IsTuple)
    { 
            
            #line default
            #line hidden
            
            #line 232 "CodeGenerator.Array.tt"
            this.Write("\r\n");
            
            #line default
            #line hidden
            
            #line 233 "CodeGenerator.Array.tt"
      int prefixItemAccessorIndex = 1;

        foreach(var prefixItem in PrefixItems)
        { 
            
            #line default
            #line hidden
            
            #line 237 "CodeGenerator.Array.tt"
            this.Write("\r\n    /// <summary>\r\n    /// Gets the tuple item as a <see cref=\"");
            
            #line default
            #line hidden
            
            #line 239 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( prefixItem ));
            
            #line default
            #line hidden
            
            #line 239 "CodeGenerator.Array.tt"
            this.Write("\"/>.\r\n    /// </summary>\r\n    public ");
            
            #line default
            #line hidden
            
            #line 241 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( prefixItem ));
            
            #line default
            #line hidden
            
            #line 241 "CodeGenerator.Array.tt"
            this.Write(" Item");
            
            #line default
            #line hidden
            
            #line 241 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( prefixItemAccessorIndex ));
            
            #line default
            #line hidden
            
            #line 241 "CodeGenerator.Array.tt"
            this.Write("\r\n    {\r\n        get\r\n        {\r\n            if ((this.backing & Backing.JsonElem" +
                    "ent) != 0)\r\n            {\r\n                return new ");
            
            #line default
            #line hidden
            
            #line 247 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( prefixItem ));
            
            #line default
            #line hidden
            
            #line 247 "CodeGenerator.Array.tt"
            this.Write("(this.jsonElementBacking[");
            
            #line default
            #line hidden
            
            #line 247 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( prefixItemAccessorIndex - 1));
            
            #line default
            #line hidden
            
            #line 247 "CodeGenerator.Array.tt"
            this.Write("]);\r\n            }\r\n\r\n            if ((this.backing & Backing.Array) != 0)\r\n     " +
                    "       {\r\n                try\r\n                {\r\n                    return thi" +
                    "s.arrayBacking[");
            
            #line default
            #line hidden
            
            #line 254 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( prefixItemAccessorIndex - 1));
            
            #line default
            #line hidden
            
            #line 254 "CodeGenerator.Array.tt"
            this.Write("].As<");
            
            #line default
            #line hidden
            
            #line 254 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( prefixItem ));
            
            #line default
            #line hidden
            
            #line 254 "CodeGenerator.Array.tt"
            this.Write(@">();
                }
                catch (ArgumentOutOfRangeException ex)
                {
                    throw new IndexOutOfRangeException(ex.Message, ex);
                }
            }

            throw new InvalidOperationException();
        }
    }
");
            
            #line default
            #line hidden
            
            #line 265 "CodeGenerator.Array.tt"
          prefixItemAccessorIndex++;
        }
    }

    if (IsTuple && PrefixItems.Length > 1)
    { 
            
            #line default
            #line hidden
            
            #line 271 "CodeGenerator.Array.tt"
            this.Write("\r\n    /// <summary>\r\n    /// Conversion to tuple.\r\n    /// </summary>\r\n    /// <p" +
                    "aram name=\"value\">The value from which to convert.</param>\r\n    public static im" +
                    "plicit operator (");
            
            #line default
            #line hidden
            
            #line 276 "CodeGenerator.Array.tt"
 int prefixItemIndexA = 1; foreach(var prefixItem in PrefixItems) { 
            
            #line default
            #line hidden
            
            #line 277 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(  prefixItemIndexA++ > 1 ? ", " : "" ));
            
            #line default
            #line hidden
            
            #line 277 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( prefixItem ));
            
            #line default
            #line hidden
            
            #line 277 "CodeGenerator.Array.tt"
 } 
            
            #line default
            #line hidden
            
            #line 278 "CodeGenerator.Array.tt"
            this.Write(")(");
            
            #line default
            #line hidden
            
            #line 278 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 278 "CodeGenerator.Array.tt"
            this.Write(" value)\r\n    {\r\n       return (");
            
            #line default
            #line hidden
            
            #line 280 "CodeGenerator.Array.tt"
 int prefixItemIndexB = 1; foreach(var prefixItem in PrefixItems) { 
            
            #line default
            #line hidden
            
            #line 281 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(  prefixItemIndexB > 1 ? ", " : "" ));
            
            #line default
            #line hidden
            
            #line 281 "CodeGenerator.Array.tt"
            this.Write("value.Item");
            
            #line default
            #line hidden
            
            #line 281 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( prefixItemIndexB++ ));
            
            #line default
            #line hidden
            
            #line 281 "CodeGenerator.Array.tt"
 }
            
            #line default
            #line hidden
            
            #line 282 "CodeGenerator.Array.tt"
            this.Write(");\r\n    }\r\n\r\n    /// <summary>\r\n    /// Conversion from tuple.\r\n    /// </summary" +
                    ">\r\n    /// <param name=\"value\">The value from which to convert.</param>\r\n    pub" +
                    "lic static implicit operator ");
            
            #line default
            #line hidden
            
            #line 289 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 289 "CodeGenerator.Array.tt"
            this.Write("((");
            
            #line default
            #line hidden
            
            #line 289 "CodeGenerator.Array.tt"
 int prefixItemIndexD = 1; foreach(var prefixItem in PrefixItems) { 
            
            #line default
            #line hidden
            
            #line 290 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(  prefixItemIndexD++ > 1 ? ", " : "" ));
            
            #line default
            #line hidden
            
            #line 290 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( prefixItem ));
            
            #line default
            #line hidden
            
            #line 290 "CodeGenerator.Array.tt"
 } 
            
            #line default
            #line hidden
            
            #line 291 "CodeGenerator.Array.tt"
            this.Write(") value)\r\n    {\r\n        return ");
            
            #line default
            #line hidden
            
            #line 293 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 293 "CodeGenerator.Array.tt"
            this.Write(".Create(");
            
            #line default
            #line hidden
            
            #line 293 "CodeGenerator.Array.tt"
 int prefixItemIndexC = 1; foreach(var prefixItem in PrefixItems) { 
            
            #line default
            #line hidden
            
            #line 294 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(  prefixItemIndexC > 1 ? ", " : "" ));
            
            #line default
            #line hidden
            
            #line 294 "CodeGenerator.Array.tt"
            this.Write("value.Item");
            
            #line default
            #line hidden
            
            #line 294 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( prefixItemIndexC++ ));
            
            #line default
            #line hidden
            
            #line 294 "CodeGenerator.Array.tt"
 }
            
            #line default
            #line hidden
            
            #line 295 "CodeGenerator.Array.tt"
            this.Write(");\r\n    }\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 298 "CodeGenerator.Array.tt"
  } 
            
            #line default
            #line hidden
            
            #line 299 "CodeGenerator.Array.tt"
            this.Write("\r\n    /// <summary>\r\n    /// Conversion from immutable list.\r\n    /// </summary>\r" +
                    "\n    /// <param name=\"value\">The value from which to convert.</param>\r\n    publi" +
                    "c static implicit operator ImmutableList<JsonAny>(");
            
            #line default
            #line hidden
            
            #line 304 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 304 "CodeGenerator.Array.tt"
            this.Write(" value)\r\n    {\r\n        return value.GetImmutableList();\r\n    }\r\n\r\n    /// <summa" +
                    "ry>s\r\n    /// Conversion to immutable list.\r\n    /// </summary>\r\n    /// <param " +
                    "name=\"value\">The value from which to convert.</param>\r\n    public static implici" +
                    "t operator ");
            
            #line default
            #line hidden
            
            #line 313 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 313 "CodeGenerator.Array.tt"
            this.Write(@"(ImmutableList<JsonAny> value)
    {
        return new(value);
    }

    /// <summary>
    /// Conversion from JsonArray.
    /// </summary>
    /// <param name=""value"">The value from which to convert.</param>
    public static implicit operator ");
            
            #line default
            #line hidden
            
            #line 322 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 322 "CodeGenerator.Array.tt"
            this.Write(@"(JsonArray value)
    {
        if (value.HasDotnetBacking && value.ValueKind == JsonValueKind.Array)
        {
            return new(value.AsImmutableList());
        }

        return new(value.AsJsonElement);
    }

    /// <summary>
    /// Initializes a new instance of the <see cref=""");
            
            #line default
            #line hidden
            
            #line 333 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 333 "CodeGenerator.Array.tt"
            this.Write(@"""/> struct.
    /// </summary>
    /// <param name=""items"">The list of items from which to construct the array.</param>
    /// <returns>An instance of the array constructed from the list.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static ");
            
            #line default
            #line hidden
            
            #line 338 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 338 "CodeGenerator.Array.tt"
            this.Write(" From(ImmutableList<JsonAny> items)\r\n    {\r\n        return new(items);\r\n    }\r\n\r\n" +
                    "");
            
            #line default
            #line hidden
            
            #line 343 "CodeGenerator.Array.tt"
  if (!CanEnumerateAsSpecificType && !IsTuple)
    { 
            
            #line default
            #line hidden
            
            #line 345 "CodeGenerator.Array.tt"
            this.Write("    /// <summary>\r\n    /// Create an array from the span of items.\r\n    /// </sum" +
                    "mary>\r\n    /// <param name=\"items\">The items from which to create the array.</pa" +
                    "ram>\r\n    /// <returns>The array containing the items.</returns>\r\n    public sta" +
                    "tic ");
            
            #line default
            #line hidden
            
            #line 350 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 350 "CodeGenerator.Array.tt"
            this.Write(" Create(ReadOnlySpan<JsonAny> items)\r\n    {\r\n        return new([..items]);\r\n    " +
                    "}\r\n\r\n    /// <summary>\r\n    /// Initializes a new instance of the <see cref=\"");
            
            #line default
            #line hidden
            
            #line 356 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 356 "CodeGenerator.Array.tt"
            this.Write("\"/> struct.\r\n    /// </summary>\r\n    /// <param name=\"value\">The value from which" +
                    " to construct the instance.</param>\r\n    /// <returns>A JsonAny instantiated fro" +
                    "m the given items.</returns>\r\n    public static ");
            
            #line default
            #line hidden
            
            #line 360 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 360 "CodeGenerator.Array.tt"
            this.Write(" FromItems(params JsonAny[] value)\r\n    {\r\n        return new(value.ToImmutableLi" +
                    "st());\r\n    }\r\n\r\n    /// <summary>\r\n    /// Initializes a new instance of the <s" +
                    "ee cref=\"");
            
            #line default
            #line hidden
            
            #line 366 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 366 "CodeGenerator.Array.tt"
            this.Write("\"/> struct.\r\n    /// </summary>\r\n    /// <typeparam name=\"TItem\">The type of the " +
                    "items in the list.</typeparam>\r\n    /// <param name=\"value\">The value from which" +
                    " to construct the instance.</param>\r\n    /// <returns>A ");
            
            #line default
            #line hidden
            
            #line 370 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 370 "CodeGenerator.Array.tt"
            this.Write(" instantiated from the given items.</returns>\r\n    public static ");
            
            #line default
            #line hidden
            
            #line 371 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 371 "CodeGenerator.Array.tt"
            this.Write(@" FromItems<TItem>(params TItem[] value)
        where TItem : struct, IJsonValue<TItem>
    {
        ImmutableList<JsonAny>.Builder builder = ImmutableList.CreateBuilder<JsonAny>();
        foreach (TItem item in value)
        {
            builder.Add(item.AsAny);
        }

        return new(builder.ToImmutable());
    }

    /// <summary>
    /// Initializes a new instance of the <see cref=""");
            
            #line default
            #line hidden
            
            #line 384 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 384 "CodeGenerator.Array.tt"
            this.Write("\"/> struct.\r\n    /// </summary>\r\n    /// <typeparam name=\"TItem1\">The type of the" +
                    " items in the list.</typeparam>\r\n    /// <param name=\"value1\">The first value fr" +
                    "om which to construct the instance.</param>\r\n    /// <returns>A ");
            
            #line default
            #line hidden
            
            #line 388 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 388 "CodeGenerator.Array.tt"
            this.Write(" instantiated from the given items.</returns>\r\n    public static ");
            
            #line default
            #line hidden
            
            #line 389 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 389 "CodeGenerator.Array.tt"
            this.Write(@" FromItems<TItem1>(in TItem1 value1)
        where TItem1 : struct, IJsonValue<TItem1>
    {
        ImmutableList<JsonAny>.Builder builder = ImmutableList.CreateBuilder<JsonAny>();
        builder.Add(value1.AsAny);
        return new(builder.ToImmutable());
    }

    /// <summary>
    /// Initializes a new instance of the <see cref=""");
            
            #line default
            #line hidden
            
            #line 398 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 398 "CodeGenerator.Array.tt"
            this.Write(@"""/> struct.
    /// </summary>
    /// <typeparam name=""TItem1"">The type of the first item in the list.</typeparam>
    /// <typeparam name=""TItem2"">The type of the second item in the list.</typeparam>
    /// <param name=""value1"">The first value from which to construct the instance.</param>
    /// <param name=""value2"">The second value from which to construct the instance.</param>
    /// <returns>A ");
            
            #line default
            #line hidden
            
            #line 404 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 404 "CodeGenerator.Array.tt"
            this.Write(" instantiated from the given items.</returns>\r\n    public static ");
            
            #line default
            #line hidden
            
            #line 405 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 405 "CodeGenerator.Array.tt"
            this.Write(@" FromItems<TItem1, TItem2>(in TItem1 value1, in TItem2 value2)
        where TItem1 : struct, IJsonValue<TItem1>
        where TItem2 : struct, IJsonValue<TItem2>
    {
        ImmutableList<JsonAny>.Builder builder = ImmutableList.CreateBuilder<JsonAny>();
        builder.Add(value1.AsAny);
        builder.Add(value2.AsAny);
        return new(builder.ToImmutable());
    }

    /// <summary>
    /// Initializes a new instance of the <see cref=""");
            
            #line default
            #line hidden
            
            #line 416 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 416 "CodeGenerator.Array.tt"
            this.Write(@"""/> struct.
    /// </summary>
    /// <typeparam name=""TItem1"">The type of the first item in the list.</typeparam>
    /// <typeparam name=""TItem2"">The type of the second item in the list.</typeparam>
    /// <typeparam name=""TItem3"">The type of the third item in the list.</typeparam>
    /// <param name=""value1"">The first value from which to construct the instance.</param>
    /// <param name=""value2"">The second value from which to construct the instance.</param>
    /// <param name=""value3"">The thirdvalue from which to construct the instance.</param>
    /// <returns>A ");
            
            #line default
            #line hidden
            
            #line 424 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 424 "CodeGenerator.Array.tt"
            this.Write(" instantiated from the given items.</returns>\r\n    public static ");
            
            #line default
            #line hidden
            
            #line 425 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 425 "CodeGenerator.Array.tt"
            this.Write(@" FromItems<TItem1, TItem2, TItem3>(in TItem1 value1, in TItem2 value2, in TItem3 value3)
        where TItem1 : struct, IJsonValue<TItem1>
        where TItem2 : struct, IJsonValue<TItem2>
        where TItem3 : struct, IJsonValue<TItem3>
    {
        ImmutableList<JsonAny>.Builder builder = ImmutableList.CreateBuilder<JsonAny>();
        builder.Add(value1.AsAny);
        builder.Add(value2.AsAny);
        builder.Add(value3.AsAny);
        return new(builder.ToImmutable());
    }

    /// <summary>
    /// Create an array from the given items.
    /// </summary>
    /// <typeparam name=""T"">The type of the <paramref name=""items""/> from which to create the array.</typeparam>
    /// <param name=""items"">The items from which to create the array.</param>
    /// <returns>The new array created from the items.</returns>
    /// <remarks>
    /// This will serialize the items to create the underlying JsonArray. Note the
    /// other overloads which avoid this serialization step.
    /// </remarks>
    public static ");
            
            #line default
            #line hidden
            
            #line 447 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 447 "CodeGenerator.Array.tt"
            this.Write(@" From<T>(IEnumerable<T> items)
    {
        ImmutableList<JsonAny>.Builder builder = ImmutableList.CreateBuilder<JsonAny>();
        foreach (T item in items)
        {
            var abw = new ArrayBufferWriter<byte>();
            using var writer = new Utf8JsonWriter(abw);
            JsonSerializer.Serialize(writer, item);
            writer.Flush();
            builder.Add(JsonAny.Parse(abw.WrittenMemory));
        }

        return new ");
            
            #line default
            #line hidden
            
            #line 459 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 459 "CodeGenerator.Array.tt"
            this.Write(@"(builder.ToImmutable());
    }

    /// <summary>
    /// Create an array from the given items.
    /// </summary>
    /// <param name = ""items"">The items from which to create the array.</param>
    /// <returns>The new array created from the items.</returns>
    /// <remarks>
    /// This will serialize the items to create the underlying JsonArray. Note the
    /// other overloads which avoid this serialization step.
    /// </remarks>
    public static ");
            
            #line default
            #line hidden
            
            #line 471 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 471 "CodeGenerator.Array.tt"
            this.Write(" FromRange(IEnumerable<JsonAny> items)\r\n    {\r\n        ImmutableList<JsonAny>.Bui" +
                    "lder builder = ImmutableList.CreateBuilder<JsonAny>();\r\n        foreach (JsonAny" +
                    " item in items)\r\n        {\r\n            builder.Add(item);\r\n        }\r\n\r\n       " +
                    " return new ");
            
            #line default
            #line hidden
            
            #line 479 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 479 "CodeGenerator.Array.tt"
            this.Write(@"(builder.ToImmutable());
    }

    /// <summary>
    /// Create an array from the given items.
    /// </summary>
    /// <param name = ""items"">The items from which to create the array.</param>
    /// <returns>The new array created from the items.</returns>
    /// <remarks>
    /// This will serialize the items to create the underlying JsonArray. Note the
    /// other overloads which avoid this serialization step.
    /// </remarks>
    public static ");
            
            #line default
            #line hidden
            
            #line 491 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 491 "CodeGenerator.Array.tt"
            this.Write(@" FromRange<T>(IEnumerable<T> items)
        where T : struct, IJsonValue<T>
    {
        ImmutableList<JsonAny>.Builder builder = ImmutableList.CreateBuilder<JsonAny>();
        foreach (T item in items)
        {
            builder.Add(item.AsAny);
        }

        return new ");
            
            #line default
            #line hidden
            
            #line 500 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 500 "CodeGenerator.Array.tt"
            this.Write(@"(builder.ToImmutable());
    }

    /// <summary>
    /// Create an array from the given items.
    /// </summary>
    /// <param name=""items"">The items from which to create the array.</param>
    /// <returns>The new array created from the items.</returns>
    public static ");
            
            #line default
            #line hidden
            
            #line 508 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 508 "CodeGenerator.Array.tt"
            this.Write(@" FromRange(IEnumerable<string> items)
    {
        ImmutableList<JsonAny>.Builder builder = ImmutableList.CreateBuilder<JsonAny>();
        foreach (string item in items)
        {
            builder.Add((JsonAny)item);
        }

        return new ");
            
            #line default
            #line hidden
            
            #line 516 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 516 "CodeGenerator.Array.tt"
            this.Write(@"(builder.ToImmutable());
    }

    /// <summary>
    /// Create an array from the given items.
    /// </summary>
    /// <param name=""items"">The items from which to create the array.</param>
    /// <returns>The new array created from the items.</returns>
    public static ");
            
            #line default
            #line hidden
            
            #line 524 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 524 "CodeGenerator.Array.tt"
            this.Write(@" FromRange(IEnumerable<double> items)
    {
        ImmutableList<JsonAny>.Builder builder = ImmutableList.CreateBuilder<JsonAny>();
        foreach (double item in items)
        {
            builder.Add((JsonAny)item);
        }

        return new ");
            
            #line default
            #line hidden
            
            #line 532 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 532 "CodeGenerator.Array.tt"
            this.Write(@"(builder.ToImmutable());
    }

    /// <summary>
    /// Create an array from the given items.
    /// </summary>
    /// <param name=""items"">The items from which to create the array.</param>
    /// <returns>The new array created from the items.</returns>
    public static ");
            
            #line default
            #line hidden
            
            #line 540 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 540 "CodeGenerator.Array.tt"
            this.Write(@" FromRange(IEnumerable<float> items)
    {
        ImmutableList<JsonAny>.Builder builder = ImmutableList.CreateBuilder<JsonAny>();
        foreach (float item in items)
        {
            builder.Add((JsonAny)item);
        }

        return new ");
            
            #line default
            #line hidden
            
            #line 548 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 548 "CodeGenerator.Array.tt"
            this.Write(@"(builder.ToImmutable());
    }

    /// <summary>
    /// Create an array from the given items.
    /// </summary>
    /// <param name=""items"">The items from which to create the array.</param>
    /// <returns>The new array created from the items.</returns>
    public static ");
            
            #line default
            #line hidden
            
            #line 556 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 556 "CodeGenerator.Array.tt"
            this.Write(" FromRange(IEnumerable<int> items)\r\n    {\r\n        ImmutableList<JsonAny>.Builder" +
                    " builder = ImmutableList.CreateBuilder<JsonAny>();\r\n        foreach (int item in" +
                    " items)\r\n        {\r\n            builder.Add((JsonAny)item);\r\n        }\r\n\r\n      " +
                    "  return new ");
            
            #line default
            #line hidden
            
            #line 564 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 564 "CodeGenerator.Array.tt"
            this.Write(@"(builder.ToImmutable());
    }

    /// <summary>
    /// Create an array from the given items.
    /// </summary>
    /// <param name=""items"">The items from which to create the array.</param>
    /// <returns>The new array created from the items.</returns>
    public static ");
            
            #line default
            #line hidden
            
            #line 572 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 572 "CodeGenerator.Array.tt"
            this.Write(@" FromRange(IEnumerable<long> items)
    {
        ImmutableList<JsonAny>.Builder builder = ImmutableList.CreateBuilder<JsonAny>();
        foreach (long item in items)
        {
            builder.Add((JsonAny)item);
        }

        return new ");
            
            #line default
            #line hidden
            
            #line 580 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 580 "CodeGenerator.Array.tt"
            this.Write(@"(builder.ToImmutable());
    }

    /// <summary>
    /// Create an array from the given items.
    /// </summary>
    /// <param name=""items"">The items from which to create the array.</param>
    /// <returns>The new array created from the items.</returns>
    public static ");
            
            #line default
            #line hidden
            
            #line 588 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 588 "CodeGenerator.Array.tt"
            this.Write(@" FromRange(IEnumerable<bool> items)
    {
        ImmutableList<JsonAny>.Builder builder = ImmutableList.CreateBuilder<JsonAny>();
        foreach (bool item in items)
        {
            builder.Add((JsonAny)item);
        }

        return new ");
            
            #line default
            #line hidden
            
            #line 596 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 596 "CodeGenerator.Array.tt"
            this.Write("(builder.ToImmutable());\r\n    }\r\n\r\n    /// <summary>\r\n    /// Initializes a new i" +
                    "nstance of the <see cref=\"");
            
            #line default
            #line hidden
            
            #line 600 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 600 "CodeGenerator.Array.tt"
            this.Write("\"/> struct.\r\n    /// </summary>\r\n    /// <param name=\"value1\">The first value fro" +
                    "m which to construct the instance.</param>\r\n    /// <returns>A ");
            
            #line default
            #line hidden
            
            #line 603 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 603 "CodeGenerator.Array.tt"
            this.Write(" instantiated from the given items.</returns>\r\n    public static ");
            
            #line default
            #line hidden
            
            #line 604 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 604 "CodeGenerator.Array.tt"
            this.Write(@" FromItems(in JsonAny value1)
    {
        ImmutableList<JsonAny>.Builder builder = ImmutableList.CreateBuilder<JsonAny>();
        builder.Add(value1);
        return new(builder.ToImmutable());
    }

    /// <summary>
    /// Initializes a new instance of the <see cref=""");
            
            #line default
            #line hidden
            
            #line 612 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 612 "CodeGenerator.Array.tt"
            this.Write("\"/> struct.\r\n    /// </summary>\r\n    /// <param name=\"value1\">The first value fro" +
                    "m which to construct the instance.</param>\r\n    /// <param name=\"value2\">The sec" +
                    "ond value from which to construct the instance.</param>\r\n    /// <returns>A ");
            
            #line default
            #line hidden
            
            #line 616 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 616 "CodeGenerator.Array.tt"
            this.Write(" instantiated from the given items.</returns>\r\n    public static ");
            
            #line default
            #line hidden
            
            #line 617 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 617 "CodeGenerator.Array.tt"
            this.Write(@" FromItems(in JsonAny value1, in JsonAny value2)
    {
        ImmutableList<JsonAny>.Builder builder = ImmutableList.CreateBuilder<JsonAny>();
        builder.Add(value1);
        builder.Add(value2);
        return new(builder.ToImmutable());
    }

    /// <summary>
    /// Initializes a new instance of the <see cref=""");
            
            #line default
            #line hidden
            
            #line 626 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 626 "CodeGenerator.Array.tt"
            this.Write(@"""/> struct.
    /// </summary>
    /// <param name=""value1"">The first value from which to construct the instance.</param>
    /// <param name=""value2"">The second value from which to construct the instance.</param>
    /// <param name=""value3"">The thirdvalue from which to construct the instance.</param>
    /// <returns>A ");
            
            #line default
            #line hidden
            
            #line 631 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 631 "CodeGenerator.Array.tt"
            this.Write(" instantiated from the given items.</returns>\r\n    public static ");
            
            #line default
            #line hidden
            
            #line 632 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 632 "CodeGenerator.Array.tt"
            this.Write(@" FromItems(in JsonAny value1, in JsonAny value2, in JsonAny value3)
    {
        ImmutableList<JsonAny>.Builder builder = ImmutableList.CreateBuilder<JsonAny>();
        builder.Add(value1);
        builder.Add(value2);
        builder.Add(value3);
        return new(builder.ToImmutable());
    }
");
            
            #line default
            #line hidden
            
            #line 640 "CodeGenerator.Array.tt"
  }
    else if (!IsTuple && !(IsFixedSizeArray && IsNumericArray))
    {
            
            #line default
            #line hidden
            
            #line 643 "CodeGenerator.Array.tt"
            this.Write("    /// <summary>\r\n    /// Create an array from the span of items.\r\n    /// </sum" +
                    "mary>\r\n    /// <param name=\"items\">The items from which to create the array.</pa" +
                    "ram>\r\n    /// <returns>The array containing the items.</returns>\r\n    public sta" +
                    "tic ");
            
            #line default
            #line hidden
            
            #line 648 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 648 "CodeGenerator.Array.tt"
            this.Write(" Create(ReadOnlySpan<");
            
            #line default
            #line hidden
            
            #line 648 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 648 "CodeGenerator.Array.tt"
            this.Write("> items)\r\n    {\r\n        return new([..items]);\r\n    }\r\n\r\n    /// <summary>\r\n    " +
                    "/// Initializes a new instance of the <see cref=\"");
            
            #line default
            #line hidden
            
            #line 654 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 654 "CodeGenerator.Array.tt"
            this.Write("\"/> struct.\r\n    /// </summary>\r\n    /// <param name=\"value1\">The first value fro" +
                    "m which to construct the instance.</param>\r\n    /// <returns>A ");
            
            #line default
            #line hidden
            
            #line 657 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 657 "CodeGenerator.Array.tt"
            this.Write(" instantiated from the given items.</returns>\r\n    public static ");
            
            #line default
            #line hidden
            
            #line 658 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 658 "CodeGenerator.Array.tt"
            this.Write(" FromItems(in ");
            
            #line default
            #line hidden
            
            #line 658 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 658 "CodeGenerator.Array.tt"
            this.Write(@" value1)
    {
        ImmutableList<JsonAny>.Builder builder = ImmutableList.CreateBuilder<JsonAny>();
        builder.Add(value1.AsAny);
        return new(builder.ToImmutable());
    }

    /// <summary>
    /// Initializes a new instance of the <see cref=""");
            
            #line default
            #line hidden
            
            #line 666 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 666 "CodeGenerator.Array.tt"
            this.Write("\"/> struct.\r\n    /// </summary>\r\n    /// <param name=\"value1\">The first value fro" +
                    "m which to construct the instance.</param>\r\n    /// <param name=\"value2\">The sec" +
                    "ond value from which to construct the instance.</param>\r\n    /// <returns>A ");
            
            #line default
            #line hidden
            
            #line 670 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 670 "CodeGenerator.Array.tt"
            this.Write(" instantiated from the given items.</returns>\r\n    public static ");
            
            #line default
            #line hidden
            
            #line 671 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 671 "CodeGenerator.Array.tt"
            this.Write(" FromItems(in ");
            
            #line default
            #line hidden
            
            #line 671 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 671 "CodeGenerator.Array.tt"
            this.Write(" value1, in ");
            
            #line default
            #line hidden
            
            #line 671 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 671 "CodeGenerator.Array.tt"
            this.Write(@" value2)
    {
        ImmutableList<JsonAny>.Builder builder = ImmutableList.CreateBuilder<JsonAny>();
        builder.Add(value1.AsAny);
        builder.Add(value2.AsAny);
        return new(builder.ToImmutable());
    }

    /// <summary>
    /// Initializes a new instance of the <see cref=""");
            
            #line default
            #line hidden
            
            #line 680 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 680 "CodeGenerator.Array.tt"
            this.Write(@"""/> struct.
    /// </summary>
    /// <param name=""value1"">The first value from which to construct the instance.</param>
    /// <param name=""value2"">The second value from which to construct the instance.</param>
    /// <param name=""value3"">The thirdvalue from which to construct the instance.</param>
    /// <returns>A ");
            
            #line default
            #line hidden
            
            #line 685 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 685 "CodeGenerator.Array.tt"
            this.Write(" instantiated from the given items.</returns>\r\n    public static ");
            
            #line default
            #line hidden
            
            #line 686 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 686 "CodeGenerator.Array.tt"
            this.Write(" FromItems(in ");
            
            #line default
            #line hidden
            
            #line 686 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 686 "CodeGenerator.Array.tt"
            this.Write(" value1, in ");
            
            #line default
            #line hidden
            
            #line 686 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 686 "CodeGenerator.Array.tt"
            this.Write(" value2, in ");
            
            #line default
            #line hidden
            
            #line 686 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 686 "CodeGenerator.Array.tt"
            this.Write(@" value3)
    {
        ImmutableList<JsonAny>.Builder builder = ImmutableList.CreateBuilder<JsonAny>();
        builder.Add(value1.AsAny);
        builder.Add(value2.AsAny);
        builder.Add(value3.AsAny);
        return new(builder.ToImmutable());
    }

    /// <summary>
    /// Initializes a new instance of the <see cref=""");
            
            #line default
            #line hidden
            
            #line 696 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 696 "CodeGenerator.Array.tt"
            this.Write("\"/> struct.\r\n    /// </summary>\r\n    /// <param name=\"value\">The value from which" +
                    " to construct the instance.</param>\r\n    /// <returns>A JsonAny instantiated fro" +
                    "m the given items.</returns>\r\n    public static ");
            
            #line default
            #line hidden
            
            #line 700 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 700 "CodeGenerator.Array.tt"
            this.Write(" FromItems(params ");
            
            #line default
            #line hidden
            
            #line 700 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 700 "CodeGenerator.Array.tt"
            this.Write("[] value)\r\n    {\r\n        ImmutableList<JsonAny>.Builder builder = ImmutableList." +
                    "CreateBuilder<JsonAny>();\r\n        foreach (");
            
            #line default
            #line hidden
            
            #line 703 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 703 "CodeGenerator.Array.tt"
            this.Write(" item in value)\r\n        {\r\n            builder.Add(item.AsAny);\r\n        }\r\n\r\n  " +
                    "      return new(builder.ToImmutable());\r\n    }\r\n\r\n    /// <summary>\r\n    /// In" +
                    "itializes a new instance of the <see cref=\"");
            
            #line default
            #line hidden
            
            #line 712 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 712 "CodeGenerator.Array.tt"
            this.Write("\"/> struct.\r\n    /// </summary>\r\n    /// <param name=\"value\">The value from which" +
                    " to construct the instance.</param>\r\n    /// <returns>A JsonAny instantiated fro" +
                    "m the given items.</returns>\r\n    public static ");
            
            #line default
            #line hidden
            
            #line 716 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 716 "CodeGenerator.Array.tt"
            this.Write(" FromRange(IEnumerable<");
            
            #line default
            #line hidden
            
            #line 716 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 716 "CodeGenerator.Array.tt"
            this.Write("> value)\r\n    {\r\n        ImmutableList<JsonAny>.Builder builder = ImmutableList.C" +
                    "reateBuilder<JsonAny>();\r\n        foreach (");
            
            #line default
            #line hidden
            
            #line 719 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 719 "CodeGenerator.Array.tt"
            this.Write(@" item in value)
        {
            builder.Add(item.AsAny);
        }

        return new(builder.ToImmutable());
    }

    /// <summary>
    /// Create an array from the given items.
    /// </summary>
    /// <typeparam name=""T"">The type of the <paramref name=""items""/> from which to create the array.</typeparam>
    /// <param name=""items"">The items from which to create the array.</param>
    /// <returns>The new array created from the items.</returns>
    /// <remarks>
    /// This will serialize the items to create the underlying JsonArray. Note the
    /// other overloads which avoid this serialization step.
    /// </remarks>
    public static ");
            
            #line default
            #line hidden
            
            #line 737 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 737 "CodeGenerator.Array.tt"
            this.Write(@" From<T>(IEnumerable<T> items)
    {
        ImmutableList<JsonAny>.Builder builder = ImmutableList.CreateBuilder<JsonAny>();
        foreach (T item in items)
        {
            var abw = new ArrayBufferWriter<byte>();
            using var writer = new Utf8JsonWriter(abw);
            JsonSerializer.Serialize(writer, item);
            writer.Flush();
            builder.Add(JsonAny.Parse(abw.WrittenMemory));
        }

        return new ");
            
            #line default
            #line hidden
            
            #line 749 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 749 "CodeGenerator.Array.tt"
            this.Write(@"(builder.ToImmutable());
    }

    /// <summary>
    /// Create an array from the given items.
    /// </summary>
    /// <param name = ""items"">The items from which to create the array.</param>
    /// <returns>The new array created from the items.</returns>
    public static ");
            
            #line default
            #line hidden
            
            #line 757 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 757 "CodeGenerator.Array.tt"
            this.Write(" FromRange(IEnumerable<JsonAny> items)\r\n    {\r\n        ImmutableList<JsonAny>.Bui" +
                    "lder builder = ImmutableList.CreateBuilder<JsonAny>();\r\n        foreach (JsonAny" +
                    " item in items)\r\n        {\r\n            builder.Add(item);\r\n        }\r\n\r\n       " +
                    " return new ");
            
            #line default
            #line hidden
            
            #line 765 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 765 "CodeGenerator.Array.tt"
            this.Write(@"(builder.ToImmutable());
    }

    /// <summary>
    /// Create an array from the given items.
    /// </summary>
    /// <param name = ""items"">The items from which to create the array.</param>
    /// <returns>The new array created from the items.</returns>
    public static ");
            
            #line default
            #line hidden
            
            #line 773 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 773 "CodeGenerator.Array.tt"
            this.Write(@" FromRange<T>(IEnumerable<T> items)
        where T : struct, IJsonValue<T>
    {
        ImmutableList<JsonAny>.Builder builder = ImmutableList.CreateBuilder<JsonAny>();
        foreach (T item in items)
        {
            builder.Add(item.AsAny);
        }

        return new ");
            
            #line default
            #line hidden
            
            #line 782 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 782 "CodeGenerator.Array.tt"
            this.Write("(builder.ToImmutable());\r\n    }\r\n");
            
            #line default
            #line hidden
            
            #line 784 "CodeGenerator.Array.tt"
  }
    else
    { 
        if (IsFixedSizeArray && IsNumericArray)
        {
            
            #line default
            #line hidden
            
            #line 789 "CodeGenerator.Array.tt"
            this.Write("    /// <summary>\r\n    /// Create an array from the span of items.\r\n    /// </sum" +
                    "mary>\r\n    /// <param name=\"items\">The items from which to create the array.</pa" +
                    "ram>\r\n    /// <returns>The array containing the items.</returns>\r\n    public sta" +
                    "tic ");
            
            #line default
            #line hidden
            
            #line 794 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 794 "CodeGenerator.Array.tt"
            this.Write(" Create(ReadOnlySpan<");
            
            #line default
            #line hidden
            
            #line 794 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 794 "CodeGenerator.Array.tt"
            this.Write("> items)\r\n    {\r\n        return new([..items]);\r\n    }\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 799 "CodeGenerator.Array.tt"
      } 
            
            #line default
            #line hidden
            
            #line 800 "CodeGenerator.Array.tt"
            this.Write(@"#if NET8_0_OR_GREATER
    /// <summary>
    /// Create an array from the given items.
    /// </summary>
    /// <param name = ""items"">The items from which to create the array.</param>
    /// <returns>The new array created from the items.</returns>
    /// <remarks>
    /// This will serialize the items to create the underlying JsonArray. Note the
    /// other overloads which avoid this serialization step.
    /// </remarks>
    static ");
            
            #line default
            #line hidden
            
            #line 810 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 810 "CodeGenerator.Array.tt"
            this.Write(" IJsonArray<");
            
            #line default
            #line hidden
            
            #line 810 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 810 "CodeGenerator.Array.tt"
            this.Write(">.FromRange(IEnumerable<JsonAny> items)\r\n    {\r\n        ImmutableList<JsonAny>.Bu" +
                    "ilder builder = ImmutableList.CreateBuilder<JsonAny>();\r\n        foreach (JsonAn" +
                    "y item in items)\r\n        {\r\n            builder.Add(item);\r\n        }\r\n\r\n      " +
                    "  return new ");
            
            #line default
            #line hidden
            
            #line 818 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 818 "CodeGenerator.Array.tt"
            this.Write(@"(builder.ToImmutable());
    }

    /// <summary>
    /// Create an array from the given items.
    /// </summary>
    /// <param name = ""items"">The items from which to create the array.</param>
    /// <returns>The new array created from the items.</returns>
    /// <remarks>
    /// This will serialize the items to create the underlying JsonArray. Note the
    /// other overloads which avoid this serialization step.
    /// </remarks>
    static ");
            
            #line default
            #line hidden
            
            #line 830 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 830 "CodeGenerator.Array.tt"
            this.Write(" IJsonArray<");
            
            #line default
            #line hidden
            
            #line 830 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 830 "CodeGenerator.Array.tt"
            this.Write(">.FromRange<T>(IEnumerable<T> items)\r\n    {\r\n        ImmutableList<JsonAny>.Build" +
                    "er builder = ImmutableList.CreateBuilder<JsonAny>();\r\n        foreach (T item in" +
                    " items)\r\n        {\r\n            builder.Add(item.AsAny);\r\n        }\r\n\r\n        r" +
                    "eturn new ");
            
            #line default
            #line hidden
            
            #line 838 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 838 "CodeGenerator.Array.tt"
            this.Write("(builder.ToImmutable());\r\n    }\r\n#endif\r\n");
            
            #line default
            #line hidden
            
            #line 841 "CodeGenerator.Array.tt"
  }

    if (CanEnumerateAsSpecificType && IsFixedSizeArray && IsNumericArray)
    { 
        if (ArrayRank > 1)
        {
            
            #line default
            #line hidden
            
            #line 847 "CodeGenerator.Array.tt"
            this.Write("\r\n    /// <summary>\r\n    /// Creates an instance of the array of rank ");
            
            #line default
            #line hidden
            
            #line 849 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ArrayRank ));
            
            #line default
            #line hidden
            
            #line 849 "CodeGenerator.Array.tt"
            this.Write(", dimension ");
            
            #line default
            #line hidden
            
            #line 849 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ArrayDimension ));
            
            #line default
            #line hidden
            
            #line 849 "CodeGenerator.Array.tt"
            this.Write(@", from the given values.
    /// </summary>
    /// <param name=""values"">The numeric values from which to create the array.</param>
    /// <returns>An instance of the array populated from the given values.</returns>
    /// <remarks>
    /// The values should be of length ");
            
            #line default
            #line hidden
            
            #line 854 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ArrayValueBufferSize ));
            
            #line default
            #line hidden
            
            #line 854 "CodeGenerator.Array.tt"
            this.Write(".\r\n    /// </remarks>\r\n    public static ");
            
            #line default
            #line hidden
            
            #line 856 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 856 "CodeGenerator.Array.tt"
            this.Write(" FromValues(ReadOnlySpan<");
            
            #line default
            #line hidden
            
            #line 856 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( PreferredNumericType ));
            
            #line default
            #line hidden
            
            #line 856 "CodeGenerator.Array.tt"
            this.Write("> values)\r\n    {\r\n        if (values.Length != ");
            
            #line default
            #line hidden
            
            #line 858 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ArrayValueBufferSize ));
            
            #line default
            #line hidden
            
            #line 858 "CodeGenerator.Array.tt"
            this.Write(@")
        {
            throw new ArgumentException(nameof(values));
        }

        ImmutableList<JsonAny>.Builder builder = ImmutableList.CreateBuilder<JsonAny>();

        int index = 0;
        while (index < values.Length)
        {
            ");
            
            #line default
            #line hidden
            
            #line 868 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 868 "CodeGenerator.Array.tt"
            this.Write(" child = ");
            
            #line default
            #line hidden
            
            #line 868 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 868 "CodeGenerator.Array.tt"
            this.Write(".FromValues(values.Slice(index, ");
            
            #line default
            #line hidden
            
            #line 868 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ChildArrayValueBufferSize ));
            
            #line default
            #line hidden
            
            #line 868 "CodeGenerator.Array.tt"
            this.Write("));\r\n            builder.Add(child);\r\n            index += ");
            
            #line default
            #line hidden
            
            #line 870 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ChildArrayValueBufferSize ));
            
            #line default
            #line hidden
            
            #line 870 "CodeGenerator.Array.tt"
            this.Write(";\r\n        }\r\n\r\n        return new(builder.ToImmutable());\r\n    }\r\n");
            
            #line default
            #line hidden
            
            #line 875 "CodeGenerator.Array.tt"
      }
        else
        { 
            
            #line default
            #line hidden
            
            #line 878 "CodeGenerator.Array.tt"
            this.Write(@"
    /// <summary>
    /// Creates an instance of the array of rank 1, dimension 2 from the given values.
    /// </summary>
    /// <param name=""values"">The numeric values from which to create the array.</param>
    /// <returns>An instance of the array populated from the given values.</returns>
    /// <remarks>
    /// The values should be of length ");
            
            #line default
            #line hidden
            
            #line 885 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ArrayValueBufferSize ));
            
            #line default
            #line hidden
            
            #line 885 "CodeGenerator.Array.tt"
            this.Write(".\r\n    /// </remarks>\r\n    public static ");
            
            #line default
            #line hidden
            
            #line 887 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 887 "CodeGenerator.Array.tt"
            this.Write(" FromValues(ReadOnlySpan<");
            
            #line default
            #line hidden
            
            #line 887 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( PreferredNumericType ));
            
            #line default
            #line hidden
            
            #line 887 "CodeGenerator.Array.tt"
            this.Write("> values)\r\n    {\r\n        if (values.Length != ");
            
            #line default
            #line hidden
            
            #line 889 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ArrayValueBufferSize ));
            
            #line default
            #line hidden
            
            #line 889 "CodeGenerator.Array.tt"
            this.Write(@")
        {
            throw new ArgumentException(nameof(values));
        }
        
        ImmutableList<JsonAny>.Builder builder = ImmutableList.CreateBuilder<JsonAny>();

        int index = 0;
        while (index < Dimension)
        {
            builder.Add((JsonAny)values[index++]);
        }

        return new(builder.ToImmutable());
    }
");
            
            #line default
            #line hidden
            
            #line 904 "CodeGenerator.Array.tt"
      }
    }

    if (IsTuple)
    { 
            
            #line default
            #line hidden
            
            #line 909 "CodeGenerator.Array.tt"
            this.Write("\r\n    /// <summary>\r\n    /// Create a tuple from the given items.\r\n    /// </summ" +
                    "ary>\r\n");
            
            #line default
            #line hidden
            
            #line 913 "CodeGenerator.Array.tt"
      int prefixItemIndex = 1;

        foreach(var prefixItem in PrefixItems)
        { 
            
            #line default
            #line hidden
            
            #line 917 "CodeGenerator.Array.tt"
            this.Write("    /// <param name = \"item");
            
            #line default
            #line hidden
            
            #line 917 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( prefixItemIndex++ ));
            
            #line default
            #line hidden
            
            #line 917 "CodeGenerator.Array.tt"
            this.Write("\">An instance of a <see cref=\"");
            
            #line default
            #line hidden
            
            #line 917 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( prefixItem ));
            
            #line default
            #line hidden
            
            #line 917 "CodeGenerator.Array.tt"
            this.Write("\" />.</param>\r\n");
            
            #line default
            #line hidden
            
            #line 918 "CodeGenerator.Array.tt"
      }
            
            #line default
            #line hidden
            
            #line 919 "CodeGenerator.Array.tt"
            this.Write("    /// <returns>The new tuple created from the items.</returns>\r\n    public stat" +
                    "ic ");
            
            #line default
            #line hidden
            
            #line 920 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 920 "CodeGenerator.Array.tt"
            this.Write(" Create(");
            
            #line default
            #line hidden
            
            #line 920 "CodeGenerator.Array.tt"
 int prefixItemIndex2 = 1; foreach(var prefixItem in PrefixItems) { 
            
            #line default
            #line hidden
            
            #line 921 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(  prefixItemIndex2 > 1 ? ", " : "" ));
            
            #line default
            #line hidden
            
            #line 921 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( prefixItem ));
            
            #line default
            #line hidden
            
            #line 921 "CodeGenerator.Array.tt"
            this.Write(" item");
            
            #line default
            #line hidden
            
            #line 921 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(  prefixItemIndex2++ ));
            
            #line default
            #line hidden
            
            #line 921 "CodeGenerator.Array.tt"
 }
            
            #line default
            #line hidden
            
            #line 922 "CodeGenerator.Array.tt"
            this.Write(")\r\n    {\r\n        ImmutableList<JsonAny>.Builder builder = ImmutableList.CreateBu" +
                    "ilder<JsonAny>();\r\n");
            
            #line default
            #line hidden
            
            #line 925 "CodeGenerator.Array.tt"
      int prefixItemIndex3 = 1;
        foreach(var prefixItem in PrefixItems)
        { 
            
            #line default
            #line hidden
            
            #line 928 "CodeGenerator.Array.tt"
            this.Write("        builder.Add(item");
            
            #line default
            #line hidden
            
            #line 928 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( prefixItemIndex3++ ));
            
            #line default
            #line hidden
            
            #line 928 "CodeGenerator.Array.tt"
            this.Write(".AsAny);\r\n");
            
            #line default
            #line hidden
            
            #line 929 "CodeGenerator.Array.tt"
      }
            
            #line default
            #line hidden
            
            #line 930 "CodeGenerator.Array.tt"
            this.Write("\r\n        return new ");
            
            #line default
            #line hidden
            
            #line 931 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 931 "CodeGenerator.Array.tt"
            this.Write("(builder.ToImmutable());\r\n    }\r\n");
            
            #line default
            #line hidden
            
            #line 933 "CodeGenerator.Array.tt"
  } 
            
            #line default
            #line hidden
            
            #line 934 "CodeGenerator.Array.tt"
            this.Write("\r\n");
            
            #line default
            #line hidden
            
            #line 935 "CodeGenerator.Array.tt"
  if (CanEnumerateAsSpecificType && !IsTuple)
    { 
            
            #line default
            #line hidden
            
            #line 937 "CodeGenerator.Array.tt"
            this.Write("#if NET8_0_OR_GREATER\r\n    /// <inheritdoc />\r\n    IEnumerator<");
            
            #line default
            #line hidden
            
            #line 939 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 939 "CodeGenerator.Array.tt"
            this.Write("> IEnumerable<");
            
            #line default
            #line hidden
            
            #line 939 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 939 "CodeGenerator.Array.tt"
            this.Write(">.GetEnumerator()\r\n    {\r\n        return EnumerateArray();\r\n    }\r\n\r\n    /// <inh" +
                    "eritdoc />\r\n    IEnumerator IEnumerable.GetEnumerator()\r\n    {\r\n        return E" +
                    "numerateArray();\r\n    }\r\n#endif\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 951 "CodeGenerator.Array.tt"
  }
    else if (!IsTuple)
    { 
            
            #line default
            #line hidden
            
            #line 954 "CodeGenerator.Array.tt"
            this.Write(@"#if NET8_0_OR_GREATER
    /// <inheritdoc />
    IEnumerator<JsonAny> IEnumerable<JsonAny>.GetEnumerator()
    {
        return EnumerateArray();
    }

    /// <inheritdoc />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return EnumerateArray();
    }
#endif
");
            
            #line default
            #line hidden
            
            #line 967 "CodeGenerator.Array.tt"
  }
            
            #line default
            #line hidden
            
            #line 968 "CodeGenerator.Array.tt"
            this.Write(@"    /// <inheritdoc/>
    public ImmutableList<JsonAny> AsImmutableList()
    {
        return this.GetImmutableList();
    }

    /// <inheritdoc/>
    public ImmutableList<JsonAny>.Builder AsImmutableListBuilder()
    {
        return this.GetImmutableListBuilder();
    }


    /// <inheritdoc/>
    public int GetArrayLength()
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            return this.jsonElementBacking.GetArrayLength();
        }

        if ((this.backing & Backing.Array) != 0)
        {
            return this.arrayBacking.Count;
        }

        return 0;
    }

");
            
            #line default
            #line hidden
            
            #line 997 "CodeGenerator.Array.tt"
  if (CanEnumerateAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 999 "CodeGenerator.Array.tt"
            this.Write("    /// <inheritdoc/>\r\n    public JsonArrayEnumerator<");
            
            #line default
            #line hidden
            
            #line 1000 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 1000 "CodeGenerator.Array.tt"
            this.Write("> EnumerateArray()\r\n    {\r\n        if ((this.backing & Backing.JsonElement) != 0)" +
                    "\r\n        {\r\n            return new JsonArrayEnumerator<");
            
            #line default
            #line hidden
            
            #line 1004 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 1004 "CodeGenerator.Array.tt"
            this.Write(">(this.jsonElementBacking);\r\n        }\r\n\r\n        if ((this.backing & Backing.Arr" +
                    "ay) != 0)\r\n        {\r\n            return new JsonArrayEnumerator<");
            
            #line default
            #line hidden
            
            #line 1009 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 1009 "CodeGenerator.Array.tt"
            this.Write(">(this.arrayBacking);\r\n        }\r\n\r\n        throw new InvalidOperationException()" +
                    ";\r\n    }\r\n");
            
            #line default
            #line hidden
            
            #line 1014 "CodeGenerator.Array.tt"
  } 
            
            #line default
            #line hidden
            
            #line 1015 "CodeGenerator.Array.tt"
            this.Write("\r\n    /// <inheritdoc/>\r\n");
            
            #line default
            #line hidden
            
            #line 1017 "CodeGenerator.Array.tt"
  if (CanEnumerateAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 1019 "CodeGenerator.Array.tt"
            this.Write("    JsonArrayEnumerator IJsonArray<");
            
            #line default
            #line hidden
            
            #line 1019 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 1019 "CodeGenerator.Array.tt"
            this.Write(">.EnumerateArray()\r\n");
            
            #line default
            #line hidden
            
            #line 1020 "CodeGenerator.Array.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 1023 "CodeGenerator.Array.tt"
            this.Write("    public JsonArrayEnumerator EnumerateArray()\r\n");
            
            #line default
            #line hidden
            
            #line 1024 "CodeGenerator.Array.tt"
  } 
            
            #line default
            #line hidden
            
            #line 1025 "CodeGenerator.Array.tt"
            this.Write(@"    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            return new JsonArrayEnumerator(this.jsonElementBacking);
        }

        if ((this.backing & Backing.Array) != 0)
        {
            return new JsonArrayEnumerator(this.arrayBacking);
        }

        throw new InvalidOperationException();
    }

");
            
            #line default
            #line hidden
            
            #line 1039 "CodeGenerator.Array.tt"
  if (CanEnumerateAsSpecificType && IsFixedSizeArray && IsNumericArray)
    { 
            
            #line default
            #line hidden
            
            #line 1041 "CodeGenerator.Array.tt"
            this.Write("    /// <summary>\r\n    /// Fills the span with the numeric values in the array.\r\n" +
                    "    /// </summary>\r\n    /// <param name=\"items\">The <see cref=\"Span{");
            
            #line default
            #line hidden
            
            #line 1044 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( PreferredNumericType ));
            
            #line default
            #line hidden
            
            #line 1044 "CodeGenerator.Array.tt"
            this.Write(@"}""/> to fill with the values in the array.</param>
    /// <param name=""written"">The number of values written.</param>
    /// <returns><see langword=""true""/> if the array was written successfully, otherwise <see langword=""false"" />.</returns>
    /// <remarks>
    /// You can determine the size of the array to fill by interrogating
    /// <see cref=""TotalSize""/>
    /// </remarks>
    public bool TryGetNumericValues(Span<");
            
            #line default
            #line hidden
            
            #line 1051 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( PreferredNumericType ));
            
            #line default
            #line hidden
            
            #line 1051 "CodeGenerator.Array.tt"
            this.Write("> items, out int written)\r\n    {\r\n        int index = 0;\r\n\r\n        if ((this.bac" +
                    "king & Backing.Array) != 0)\r\n        {\r\n            if (items.Length < ");
            
            #line default
            #line hidden
            
            #line 1057 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 1057 "CodeGenerator.Array.tt"
            this.Write(".ValueBufferSize)\r\n            {\r\n                written = 0;\r\n                r" +
                    "eturn false;\r\n            }\r\n\r\n            foreach (var item in this.arrayBackin" +
                    "g)\r\n            {\r\n");
            
            #line default
            #line hidden
            
            #line 1065 "CodeGenerator.Array.tt"
      if (ArrayRank == 1)
        { 
            
            #line default
            #line hidden
            
            #line 1067 "CodeGenerator.Array.tt"
            this.Write("                if (item.ValueKind != JsonValueKind.Number)\r\n                {\r\n " +
                    "                   written = 0;\r\n                    return false;\r\n            " +
                    "    }\r\n\r\n                items[index++] = (");
            
            #line default
            #line hidden
            
            #line 1073 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( PreferredNumericType ));
            
            #line default
            #line hidden
            
            #line 1073 "CodeGenerator.Array.tt"
            this.Write(")item.AsNumber;\r\n");
            
            #line default
            #line hidden
            
            #line 1074 "CodeGenerator.Array.tt"
      }
        else
        { 
            
            #line default
            #line hidden
            
            #line 1077 "CodeGenerator.Array.tt"
            this.Write("                ");
            
            #line default
            #line hidden
            
            #line 1077 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 1077 "CodeGenerator.Array.tt"
            this.Write(" child = item.As<");
            
            #line default
            #line hidden
            
            #line 1077 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 1077 "CodeGenerator.Array.tt"
            this.Write(">();\r\n\r\n                if (!child.TryGetNumericValues(items[index..], out int wr" +
                    "ittenChildren))\r\n                {\r\n                    written = 0;\r\n          " +
                    "          return false;\r\n                }\r\n\r\n                index += writtenCh" +
                    "ildren;\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 1087 "CodeGenerator.Array.tt"
      } 
            
            #line default
            #line hidden
            
            #line 1088 "CodeGenerator.Array.tt"
            this.Write(@"            }

            written = index;
            return true;
        }

        if (this.jsonElementBacking.ValueKind != JsonValueKind.Array)
        {
            written = 0;
            return false;
        }

        if (items.Length < ");
            
            #line default
            #line hidden
            
            #line 1100 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 1100 "CodeGenerator.Array.tt"
            this.Write(".ValueBufferSize)\r\n        {\r\n            written = 0;\r\n            return false;" +
                    "\r\n        }\r\n\r\n        foreach (JsonElement jsonElement in this.jsonElementBacki" +
                    "ng.EnumerateArray())\r\n        {\r\n");
            
            #line default
            #line hidden
            
            #line 1108 "CodeGenerator.Array.tt"
      if (ArrayRank == 1)
        { 
            string preferredNumericType = PreferredNumericType; 

            
            #line default
            #line hidden
            
            #line 1112 "CodeGenerator.Array.tt"
            this.Write("            if (jsonElement.ValueKind != JsonValueKind.Number ||\r\n");
            
            #line default
            #line hidden
            
            #line 1113 "CodeGenerator.Array.tt"
          if (preferredNumericType == "double")
            { 
            
            #line default
            #line hidden
            
            #line 1115 "CodeGenerator.Array.tt"
            this.Write("                !jsonElement.TryGetDouble(out double value))\r\n");
            
            #line default
            #line hidden
            
            #line 1116 "CodeGenerator.Array.tt"
          }
            else if (preferredNumericType == "float")
            { 
            
            #line default
            #line hidden
            
            #line 1119 "CodeGenerator.Array.tt"
            this.Write("                !jsonElement.TryGetSingle(out float value))\r\n");
            
            #line default
            #line hidden
            
            #line 1120 "CodeGenerator.Array.tt"
          }
            else if (preferredNumericType == "decimal")
            { 
            
            #line default
            #line hidden
            
            #line 1123 "CodeGenerator.Array.tt"
            this.Write("                !jsonElement.TryGetDecimal(out decimal value))\r\n");
            
            #line default
            #line hidden
            
            #line 1124 "CodeGenerator.Array.tt"
          }
            else if (preferredNumericType == "Half")
            { 
            
            #line default
            #line hidden
            
            #line 1127 "CodeGenerator.Array.tt"
            this.Write("                !jsonElement.TryGetHalf(out Half value))\r\n");
            
            #line default
            #line hidden
            
            #line 1128 "CodeGenerator.Array.tt"
          }
            else if (preferredNumericType == "sbyte")
            { 
            
            #line default
            #line hidden
            
            #line 1131 "CodeGenerator.Array.tt"
            this.Write("                !jsonElement.TryGetSByte(out sbyte value))\r\n");
            
            #line default
            #line hidden
            
            #line 1132 "CodeGenerator.Array.tt"
          }
            else if (preferredNumericType == "short")
            { 
            
            #line default
            #line hidden
            
            #line 1135 "CodeGenerator.Array.tt"
            this.Write("                !jsonElement.TryGetInt16(out short value))\r\n");
            
            #line default
            #line hidden
            
            #line 1136 "CodeGenerator.Array.tt"
          }
            else if (preferredNumericType == "int")
            { 
            
            #line default
            #line hidden
            
            #line 1139 "CodeGenerator.Array.tt"
            this.Write("                !jsonElement.TryGetInt32(out int value))\r\n");
            
            #line default
            #line hidden
            
            #line 1140 "CodeGenerator.Array.tt"
          }
            else if (preferredNumericType == "long")
            { 
            
            #line default
            #line hidden
            
            #line 1143 "CodeGenerator.Array.tt"
            this.Write("                !jsonElement.TryGetInt64(out long value))\r\n");
            
            #line default
            #line hidden
            
            #line 1144 "CodeGenerator.Array.tt"
          }
            else if (preferredNumericType == "Int128")
            { 
            
            #line default
            #line hidden
            
            #line 1147 "CodeGenerator.Array.tt"
            this.Write("                !jsonElement.TryGetInt128(out Int128 value))\r\n");
            
            #line default
            #line hidden
            
            #line 1148 "CodeGenerator.Array.tt"
          }
            else if (preferredNumericType == "byte")
            { 
            
            #line default
            #line hidden
            
            #line 1151 "CodeGenerator.Array.tt"
            this.Write("                !jsonElement.TryGetByte(out byte value))\r\n");
            
            #line default
            #line hidden
            
            #line 1152 "CodeGenerator.Array.tt"
          }
            else if (preferredNumericType == "ushort")
            { 
            
            #line default
            #line hidden
            
            #line 1155 "CodeGenerator.Array.tt"
            this.Write("                !jsonElement.TryGetUInt16(out ushort value))\r\n");
            
            #line default
            #line hidden
            
            #line 1156 "CodeGenerator.Array.tt"
          }
            else if (preferredNumericType == "uint")
            { 
            
            #line default
            #line hidden
            
            #line 1159 "CodeGenerator.Array.tt"
            this.Write("                !jsonElement.TryGetUInt32(out uint value))\r\n");
            
            #line default
            #line hidden
            
            #line 1160 "CodeGenerator.Array.tt"
          }
            else if (preferredNumericType == "ulong")
            { 
            
            #line default
            #line hidden
            
            #line 1163 "CodeGenerator.Array.tt"
            this.Write("                !jsonElement.TryGetUInt64(out ulong value))\r\n");
            
            #line default
            #line hidden
            
            #line 1164 "CodeGenerator.Array.tt"
          }
            else if (preferredNumericType == "UInt128")
            { 
            
            #line default
            #line hidden
            
            #line 1167 "CodeGenerator.Array.tt"
            this.Write("                !jsonElement.TryGetUInt128(out UInt128 value))\r\n");
            
            #line default
            #line hidden
            
            #line 1168 "CodeGenerator.Array.tt"
          } 
            
            #line default
            #line hidden
            
            #line 1169 "CodeGenerator.Array.tt"
            this.Write("            {\r\n                written = 0;\r\n                return false;\r\n     " +
                    "       }\r\n\r\n            items[index++] = value;\r\n");
            
            #line default
            #line hidden
            
            #line 1175 "CodeGenerator.Array.tt"
      }
        else
        { 
            
            #line default
            #line hidden
            
            #line 1178 "CodeGenerator.Array.tt"
            this.Write("            ");
            
            #line default
            #line hidden
            
            #line 1178 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 1178 "CodeGenerator.Array.tt"
            this.Write(" child = ");
            
            #line default
            #line hidden
            
            #line 1178 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 1178 "CodeGenerator.Array.tt"
            this.Write(".FromJson(jsonElement);\r\n\r\n            if (!child.TryGetNumericValues(items[index" +
                    "..], out int writtenChildren))\r\n            {\r\n                written = 0;\r\n   " +
                    "             return false;\r\n            }\r\n\r\n            index += writtenChildre" +
                    "n;\r\n");
            
            #line default
            #line hidden
            
            #line 1187 "CodeGenerator.Array.tt"
      } 
            
            #line default
            #line hidden
            
            #line 1188 "CodeGenerator.Array.tt"
            this.Write("        }\r\n\r\n        written = index;\r\n        return true;\r\n    }\r\n");
            
            #line default
            #line hidden
            
            #line 1193 "CodeGenerator.Array.tt"
  } 
            
            #line default
            #line hidden
            
            #line 1194 "CodeGenerator.Array.tt"
            this.Write("\r\n    /// <inheritdoc/>\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 1197 "CodeGenerator.Array.tt"
  if (CanEnumerateAsSpecificType || IsTuple)
    { 
            
            #line default
            #line hidden
            
            #line 1199 "CodeGenerator.Array.tt"
            this.Write("    JsonArrayEnumerator<TItem> IJsonArray<");
            
            #line default
            #line hidden
            
            #line 1199 "CodeGenerator.Array.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 1199 "CodeGenerator.Array.tt"
            this.Write(">.EnumerateArray<TItem>()\r\n");
            
            #line default
            #line hidden
            
            #line 1200 "CodeGenerator.Array.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 1203 "CodeGenerator.Array.tt"
            this.Write("    public JsonArrayEnumerator<TItem> EnumerateArray<TItem>()\r\n        where TIte" +
                    "m : struct, IJsonValue<TItem>\r\n");
            
            #line default
            #line hidden
            
            #line 1205 "CodeGenerator.Array.tt"
  } 
            
            #line default
            #line hidden
            
            #line 1206 "CodeGenerator.Array.tt"
            this.Write("    {\r\n        if ((this.backing & Backing.JsonElement) != 0)\r\n        {\r\n       " +
                    "     return new JsonArrayEnumerator<TItem>(this.jsonElementBacking);\r\n        }\r" +
                    "\n\r\n        if ((this.backing & Backing.Array) != 0)\r\n        {\r\n            retu" +
                    "rn new JsonArrayEnumerator<TItem>(this.arrayBacking);\r\n        }\r\n\r\n        thro" +
                    "w new InvalidOperationException();\r\n    }\r\n\r\n    /// <summary>\r\n    /// Builds a" +
                    "n <see cref=\"ImmutableList{JsonAny}\"/> from the array.\r\n    /// </summary>\r\n    " +
                    "/// <returns>An immutable list of <see cref=\"JsonAny\"/> built from the array.</r" +
                    "eturns>\r\n    /// <exception cref=\"InvalidOperationException\">The value is not an" +
                    " array.</exception>\r\n    private ImmutableList<JsonAny> GetImmutableList()\r\n    " +
                    "{\r\n        if ((this.backing & Backing.Array) != 0)\r\n        {\r\n            retu" +
                    "rn this.arrayBacking;\r\n        }\r\n\r\n        return this.GetImmutableListBuilder(" +
                    ").ToImmutable();\r\n    }\r\n\r\n    /// <summary>\r\n    /// Builds an <see cref=\"Immut" +
                    "ableList{JsonAny}.Builder\"/> from the array.\r\n    /// </summary>\r\n    /// <retur" +
                    "ns>An immutable list builder of <see cref=\"JsonAny\"/>, built from the existing a" +
                    "rray.</returns>\r\n    /// <exception cref=\"InvalidOperationException\">The value i" +
                    "s not an array.</exception>\r\n    private ImmutableList<JsonAny>.Builder GetImmut" +
                    "ableListBuilder()\r\n    {\r\n        if ((this.backing & Backing.JsonElement) != 0 " +
                    "&& this.jsonElementBacking.ValueKind == JsonValueKind.Array)\r\n        {\r\n       " +
                    "     ImmutableList<JsonAny>.Builder builder = ImmutableList.CreateBuilder<JsonAn" +
                    "y>();\r\n            foreach (JsonElement item in this.jsonElementBacking.Enumerat" +
                    "eArray())\r\n            {\r\n                builder.Add(new(item));\r\n            }" +
                    "\r\n\r\n            return builder;\r\n        }\r\n\r\n        if ((this.backing & Backin" +
                    "g.Array) != 0)\r\n        {\r\n            return this.arrayBacking.ToBuilder();\r\n  " +
                    "      }\r\n\r\n        throw new InvalidOperationException();\r\n    }\r\n\r\n    /// <sum" +
                    "mary>\r\n    /// Builds an <see cref=\"ImmutableList{JsonAny}\"/> from the array, re" +
                    "placing the item at the specified index with the given item.\r\n    /// </summary>" +
                    "\r\n    /// <param name=\"index\">The index at which to add the element.</param>\r\n  " +
                    "  /// <param name=\"value\">The value to add.</param>\r\n    /// <returns>An immutab" +
                    "le list containing the contents of the list, with the specified item at the inde" +
                    "x.</returns>\r\n    /// <exception cref=\"InvalidOperationException\">The value is n" +
                    "ot an array.</exception>\r\n    /// <exception cref=\"IndexOutOfRangeException\">Thr" +
                    "own if the range is beyond the bounds of the array.</exception>\r\n    private Imm" +
                    "utableList<JsonAny> GetImmutableListSetting(int index, in JsonAny value)\r\n    {\r" +
                    "\n        if ((this.backing & Backing.JsonElement) != 0 && this.jsonElementBackin" +
                    "g.ValueKind == JsonValueKind.Array)\r\n        {\r\n            return JsonValueHelp" +
                    "ers.GetImmutableListFromJsonElementSetting(this.jsonElementBacking, index, value" +
                    ");\r\n        }\r\n\r\n        if ((this.backing & Backing.Array) != 0)\r\n        {\r\n  " +
                    "          try\r\n            {\r\n                return this.arrayBacking.SetItem(i" +
                    "ndex, value);\r\n            }\r\n            catch (ArgumentOutOfRangeException ex)" +
                    "\r\n            {\r\n                throw new IndexOutOfRangeException(ex.Message, " +
                    "ex);\r\n            }\r\n        }\r\n\r\n        throw new InvalidOperationException();" +
                    "\r\n    }\r\n\r\n    /// <summary>\r\n    /// Builds an <see cref=\"ImmutableList{JsonAny" +
                    "}\"/> from the array, removing the first item that equals the given value, and re" +
                    "placing it with the specified item.\r\n    /// </summary>\r\n    /// <param name=\"ol" +
                    "dItem\">The item to remove.</param>\r\n    /// <param name=\"newItem\">The item to in" +
                    "sert.</param>\r\n    /// <returns>An immutable list containing the contents of the" +
                    " list, without the first instance that matches the old item, replacing it with t" +
                    "he new item.</returns>\r\n    /// <exception cref=\"InvalidOperationException\">The " +
                    "value is not an array.</exception>\r\n    private ImmutableList<JsonAny> GetImmuta" +
                    "bleListReplacing(in JsonAny oldItem, in JsonAny newItem)\r\n    {\r\n        if ((th" +
                    "is.backing & Backing.JsonElement) != 0 && this.jsonElementBacking.ValueKind == J" +
                    "sonValueKind.Array)\r\n        {\r\n            return JsonValueHelpers.GetImmutable" +
                    "ListFromJsonElementReplacing(this.jsonElementBacking, oldItem, newItem);\r\n      " +
                    "  }\r\n\r\n        if ((this.backing & Backing.Array) != 0)\r\n        {\r\n            " +
                    "return this.arrayBacking.Replace(oldItem, newItem);\r\n        }\r\n\r\n        throw " +
                    "new InvalidOperationException();\r\n    }\r\n\r\n    /// <summary>\r\n    /// Builds an " +
                    "<see cref=\"ImmutableList{JsonAny}\"/> from the array, removing the first item tha" +
                    "t equals the given value.\r\n    /// </summary>\r\n    /// <param name=\"item\">The it" +
                    "em to remove.</param>\r\n    /// <returns>An immutable list containing the content" +
                    "s of the list, without the first instance that matches the given item.</returns>" +
                    "\r\n    /// <exception cref=\"InvalidOperationException\">The value is not an array." +
                    "</exception>\r\n    private ImmutableList<JsonAny> GetImmutableListWithout(in Json" +
                    "Any item)\r\n    {\r\n        if ((this.backing & Backing.JsonElement) != 0 && this." +
                    "jsonElementBacking.ValueKind == JsonValueKind.Array)\r\n        {\r\n            ret" +
                    "urn JsonValueHelpers.GetImmutableListFromJsonElementWithout(this.jsonElementBack" +
                    "ing, item);\r\n        }\r\n\r\n        if ((this.backing & Backing.Array) != 0)\r\n    " +
                    "    {\r\n            return this.arrayBacking.Remove(item);\r\n        }\r\n\r\n        " +
                    "throw new InvalidOperationException();\r\n    }\r\n\r\n    /// <summary>\r\n    /// Buil" +
                    "ds an <see cref=\"ImmutableList{JsonAny}\"/> from the array, removing the given ra" +
                    "nge.\r\n    /// </summary>\r\n    /// <param name=\"index\">The start index of the ran" +
                    "ge to remove.</param>\r\n    /// <param name=\"count\">The length of the range to re" +
                    "move.</param>\r\n    /// <returns>An immutable list containing the contents of the" +
                    " list, without the given range of items.</returns>\r\n    /// <exception cref=\"Inv" +
                    "alidOperationException\">The value is not an array.</exception>\r\n    /// <excepti" +
                    "on cref=\"IndexOutOfRangeException\">Thrown if the range is beyond the bounds of t" +
                    "he array.</exception>\r\n    private ImmutableList<JsonAny> GetImmutableListWithou" +
                    "tRange(int index, int count)\r\n    {\r\n        if ((this.backing & Backing.JsonEle" +
                    "ment) != 0 && this.jsonElementBacking.ValueKind == JsonValueKind.Array)\r\n       " +
                    " {\r\n            return JsonValueHelpers.GetImmutableListFromJsonElementWithoutRa" +
                    "nge(this.jsonElementBacking, index, count);\r\n        }\r\n\r\n        if ((this.back" +
                    "ing & Backing.Array) != 0)\r\n        {\r\n            try\r\n            {\r\n         " +
                    "       return this.arrayBacking.RemoveRange(index, count);\r\n            }\r\n     " +
                    "       catch (ArgumentOutOfRangeException ex)\r\n            {\r\n                th" +
                    "row new IndexOutOfRangeException(ex.Message, ex);\r\n            }\r\n        }\r\n\r\n " +
                    "       throw new InvalidOperationException();\r\n    }\r\n\r\n    /// <summary>\r\n    /" +
                    "// Builds an <see cref=\"ImmutableList{JsonAny}\"/> from the array, adding the giv" +
                    "en item.\r\n    /// </summary>\r\n    /// <param name=\"index\">The index at which to " +
                    "add the element.</param>\r\n    /// <param name=\"value\">The value to add.</param>\r" +
                    "\n    /// <returns>An immutable list containing the contents of the list, without" +
                    " the array.</returns>\r\n    /// <exception cref=\"InvalidOperationException\">The v" +
                    "alue is not an array.</exception>\r\n    /// <exception cref=\"IndexOutOfRangeExcep" +
                    "tion\">Thrown if the range is beyond the bounds of the array.</exception>\r\n    pr" +
                    "ivate ImmutableList<JsonAny> GetImmutableListWith(int index, in JsonAny value)\r\n" +
                    "    {\r\n        if ((this.backing & Backing.JsonElement) != 0 && this.jsonElement" +
                    "Backing.ValueKind == JsonValueKind.Array)\r\n        {\r\n            return JsonVal" +
                    "ueHelpers.GetImmutableListFromJsonElementWith(this.jsonElementBacking, index, va" +
                    "lue);\r\n        }\r\n\r\n        if ((this.backing & Backing.Array) != 0)\r\n        {\r" +
                    "\n            try\r\n            {\r\n                return this.arrayBacking.Insert" +
                    "(index, value);\r\n            }\r\n            catch (ArgumentOutOfRangeException e" +
                    "x)\r\n            {\r\n                throw new IndexOutOfRangeException(ex.Message" +
                    ", ex);\r\n            }\r\n        }\r\n\r\n        throw new InvalidOperationException(" +
                    ");\r\n    }\r\n\r\n    /// <summary>\r\n    /// Builds an <see cref=\"ImmutableList{JsonA" +
                    "ny}\"/> from the array, adding the given item.\r\n    /// </summary>\r\n    /// <para" +
                    "m name=\"index\">The index at which to add the element.</param>\r\n    /// <param na" +
                    "me=\"values\">The values to add.</param>\r\n    /// <returns>An immutable list conta" +
                    "ining the contents of the list, without the array.</returns>\r\n    /// <exception" +
                    " cref=\"InvalidOperationException\">The value is not an array.</exception>\r\n    //" +
                    "/ <exception cref=\"IndexOutOfRangeException\">Thrown if the range is beyond the b" +
                    "ounds of the array.</exception>\r\n    private ImmutableList<JsonAny> GetImmutable" +
                    "ListWith<TEnumerable>(int index, TEnumerable values)\r\n        where TEnumerable " +
                    ": IEnumerable<JsonAny>\r\n    {\r\n        if ((this.backing & Backing.JsonElement) " +
                    "!= 0 && this.jsonElementBacking.ValueKind == JsonValueKind.Array)\r\n        {\r\n  " +
                    "          return JsonValueHelpers.GetImmutableListFromJsonElementWith(this.jsonE" +
                    "lementBacking, index, values);\r\n        }\r\n\r\n        if ((this.backing & Backing" +
                    ".Array) != 0)\r\n        {\r\n            try\r\n            {\r\n                return" +
                    " this.arrayBacking.InsertRange(index, values);\r\n            }\r\n            catch" +
                    " (ArgumentOutOfRangeException ex)\r\n            {\r\n                throw new Inde" +
                    "xOutOfRangeException(ex.Message, ex);\r\n            }\r\n        }\r\n\r\n        throw" +
                    " new InvalidOperationException();\r\n    }\r\n}\r\n");
            
            #line default
            #line hidden
            
            #line 1425 "CodeGenerator.Array.tt"
 EndNesting(); 
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class CodeGeneratorArrayBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
