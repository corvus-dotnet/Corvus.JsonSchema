//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Corvus.Json.CodeGeneration.Generators.Draft201909 {
    using System.Collections.Generic;
    using Corvus.Json;
    using System;
    
    
    public partial class CodeGeneratorEnum : CodeGeneratorEnumBase {
        
        
        #line 343 "CodeGenerator.Enum.tt"

    public bool ShouldGenerate
    {
        get
        {
            return HasEnum;
        }
    }

        #line default
        #line hidden
        
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 4 "CodeGenerator.Enum.tt"

    // This is only emitted if HasEnum is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.Enum should not be emitted if IsEnum is false.");
    } 
            
            #line default
            #line hidden
            
            #line 10 "CodeGenerator.Enum.tt"
            this.Write(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace ");
            
            #line default
            #line hidden
            
            #line 27 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Namespace ));
            
            #line default
            #line hidden
            
            #line 27 "CodeGenerator.Enum.tt"
            this.Write(";\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 29 "CodeGenerator.Enum.tt"
 BeginNesting(); 
            
            #line default
            #line hidden
            
            #line 30 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( FormattedTypeDocumentation ));
            
            #line default
            #line hidden
            
            #line 30 "CodeGenerator.Enum.tt"
            this.Write("\r\npublic readonly partial struct ");
            
            #line default
            #line hidden
            
            #line 31 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 31 "CodeGenerator.Enum.tt"
            this.Write(@"
{
    /// <summary>
    /// Matches the value against each of the enumeration values, and returns the result of calling the provided match function for the first match found.
    /// </summary>
    /// <param name=""context"">The context to pass to the match function.</param>
");
            
            #line default
            #line hidden
            
            #line 37 "CodeGenerator.Enum.tt"
  int enumItemIndex = 0;
    foreach (var enumValue in EnumValues)
    { 
            
            #line default
            #line hidden
            
            #line 40 "CodeGenerator.Enum.tt"
            this.Write("    /// <param name=\"match");
            
            #line default
            #line hidden
            
            #line 40 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.IsString ? enumValue.AsPropertyName : $"Item{enumItemIndex}" ));
            
            #line default
            #line hidden
            
            #line 40 "CodeGenerator.Enum.tt"
            this.Write("\">The function to call if the value matches the JSON value ");
            
            #line default
            #line hidden
            
            #line 40 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.SerializedValue ));
            
            #line default
            #line hidden
            
            #line 40 "CodeGenerator.Enum.tt"
            this.Write(".</param>\r\n");
            
            #line default
            #line hidden
            
            #line 41 "CodeGenerator.Enum.tt"
      enumItemIndex++;
    } 
            
            #line default
            #line hidden
            
            #line 43 "CodeGenerator.Enum.tt"
            this.Write("    /// <param name=\"defaultMatch\">The fallback match.</param>\r\n    public TOut M" +
                    "atch<TIn, TOut>(\r\n        in TIn context");
            
            #line default
            #line hidden
            
            #line 45 "CodeGenerator.Enum.tt"
  enumItemIndex = 0;
    foreach (var enumValue in EnumValues)
    { 
            
            #line default
            #line hidden
            
            #line 48 "CodeGenerator.Enum.tt"
            this.Write(",\r\n\r\n        Func<TIn, TOut> match");
            
            #line default
            #line hidden
            
            #line 50 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.IsString ? enumValue.AsPropertyName : $"Item{enumItemIndex}" ));
            
            #line default
            #line hidden
            
            #line 50 "CodeGenerator.Enum.tt"
      enumItemIndex++;
    } 
            
            #line default
            #line hidden
            
            #line 52 "CodeGenerator.Enum.tt"
            this.Write(",\r\n        Func<TIn, TOut> defaultMatch)\r\n    {\r\n");
            
            #line default
            #line hidden
            
            #line 55 "CodeGenerator.Enum.tt"
  if (EnumValues.All(i => i.IsString))
    { 
            
            #line default
            #line hidden
            
            #line 57 "CodeGenerator.Enum.tt"
            this.Write("        if (this.ValueKind == JsonValueKind.String)\r\n        {\r\n            if (t" +
                    "his.HasJsonElementBacking)\r\n            {\r\n");
            
            #line default
            #line hidden
            
            #line 61 "CodeGenerator.Enum.tt"
      foreach (var enumValue in EnumValues)
        { 
            
            #line default
            #line hidden
            
            #line 63 "CodeGenerator.Enum.tt"
            this.Write("                if (this.jsonElementBacking.ValueEquals(EnumValues.");
            
            #line default
            #line hidden
            
            #line 63 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.AsPropertyName ));
            
            #line default
            #line hidden
            
            #line 63 "CodeGenerator.Enum.tt"
            this.Write("Utf8))\r\n                {\r\n                    return match");
            
            #line default
            #line hidden
            
            #line 65 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.AsPropertyName ));
            
            #line default
            #line hidden
            
            #line 65 "CodeGenerator.Enum.tt"
            this.Write("(context);\r\n                }\r\n");
            
            #line default
            #line hidden
            
            #line 67 "CodeGenerator.Enum.tt"
      } 
            
            #line default
            #line hidden
            
            #line 68 "CodeGenerator.Enum.tt"
            this.Write("            }\r\n            else\r\n            {\r\n                switch(this.strin" +
                    "gBacking)\r\n                {\r\n");
            
            #line default
            #line hidden
            
            #line 73 "CodeGenerator.Enum.tt"
      foreach (var enumValue in EnumValues)
        { 
            
            #line default
            #line hidden
            
            #line 75 "CodeGenerator.Enum.tt"
            this.Write("                    case ");
            
            #line default
            #line hidden
            
            #line 75 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.RawStringValue ));
            
            #line default
            #line hidden
            
            #line 75 "CodeGenerator.Enum.tt"
            this.Write(":\r\n                        return match");
            
            #line default
            #line hidden
            
            #line 76 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.AsPropertyName  ));
            
            #line default
            #line hidden
            
            #line 76 "CodeGenerator.Enum.tt"
            this.Write("(context);\r\n");
            
            #line default
            #line hidden
            
            #line 77 "CodeGenerator.Enum.tt"
      } 
            
            #line default
            #line hidden
            
            #line 78 "CodeGenerator.Enum.tt"
            this.Write("                    default:\r\n                        break;\r\n                }\r\n" +
                    "            }\r\n        }\r\n");
            
            #line default
            #line hidden
            
            #line 83 "CodeGenerator.Enum.tt"
  }
    else
    {
        enumItemIndex = 0;
        foreach (var enumValue in EnumValues)
        {
            if (enumValue.IsString)
            { 
            
            #line default
            #line hidden
            
            #line 91 "CodeGenerator.Enum.tt"
            this.Write("            if (this.ValueKind == JsonValueKind.String)\r\n            {\r\n         " +
                    "       if (this.HasJsonElementBacking)\r\n                {\r\n                    i" +
                    "f (this.jsonElementBacking.ValueEquals(EnumValues.");
            
            #line default
            #line hidden
            
            #line 95 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.AsPropertyName ));
            
            #line default
            #line hidden
            
            #line 95 "CodeGenerator.Enum.tt"
            this.Write("Utf8))\r\n                    {\r\n                        return match");
            
            #line default
            #line hidden
            
            #line 97 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.AsPropertyName ));
            
            #line default
            #line hidden
            
            #line 97 "CodeGenerator.Enum.tt"
            this.Write("(context);\r\n                    }\r\n                }\r\n                else\r\n     " +
                    "           {\r\n                    if (this.stringBacking == EnumValues.");
            
            #line default
            #line hidden
            
            #line 102 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.AsPropertyName ));
            
            #line default
            #line hidden
            
            #line 102 "CodeGenerator.Enum.tt"
            this.Write(")\r\n                    {\r\n                        return match");
            
            #line default
            #line hidden
            
            #line 104 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.AsPropertyName  ));
            
            #line default
            #line hidden
            
            #line 104 "CodeGenerator.Enum.tt"
            this.Write("(context);\r\n                    }\r\n                }\r\n            }\r\n");
            
            #line default
            #line hidden
            
            #line 108 "CodeGenerator.Enum.tt"
          }
            else if (enumValue.IsBoolean)
            { 
            
            #line default
            #line hidden
            
            #line 111 "CodeGenerator.Enum.tt"
            this.Write("            if (this.ValueKind == EnumValues.Item");
            
            #line default
            #line hidden
            
            #line 111 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumItemIndex ));
            
            #line default
            #line hidden
            
            #line 111 "CodeGenerator.Enum.tt"
            this.Write(".ValueKind)\r\n            {\r\n                return matchItem");
            
            #line default
            #line hidden
            
            #line 113 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumItemIndex ));
            
            #line default
            #line hidden
            
            #line 113 "CodeGenerator.Enum.tt"
            this.Write("(context);\r\n            }\r\n");
            
            #line default
            #line hidden
            
            #line 115 "CodeGenerator.Enum.tt"
          }
            else if (enumValue.IsNumber)
            { 
            
            #line default
            #line hidden
            
            #line 118 "CodeGenerator.Enum.tt"
            this.Write("            if (this.Equals(EnumValues.Item");
            
            #line default
            #line hidden
            
            #line 118 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumItemIndex ));
            
            #line default
            #line hidden
            
            #line 118 "CodeGenerator.Enum.tt"
            this.Write(".AsNumber))\r\n            {\r\n                return matchItem");
            
            #line default
            #line hidden
            
            #line 120 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumItemIndex ));
            
            #line default
            #line hidden
            
            #line 120 "CodeGenerator.Enum.tt"
            this.Write("(context);\r\n            }\r\n");
            
            #line default
            #line hidden
            
            #line 122 "CodeGenerator.Enum.tt"
          }
            else if (enumValue.IsObject)
            { 
            
            #line default
            #line hidden
            
            #line 125 "CodeGenerator.Enum.tt"
            this.Write("            if (this.Equals(EnumValues.Item");
            
            #line default
            #line hidden
            
            #line 125 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumItemIndex ));
            
            #line default
            #line hidden
            
            #line 125 "CodeGenerator.Enum.tt"
            this.Write(".AsObject))\r\n            {\r\n                return matchItem");
            
            #line default
            #line hidden
            
            #line 127 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumItemIndex ));
            
            #line default
            #line hidden
            
            #line 127 "CodeGenerator.Enum.tt"
            this.Write("(context);\r\n            }\r\n");
            
            #line default
            #line hidden
            
            #line 129 "CodeGenerator.Enum.tt"
          }
            else if (enumValue.IsArray)
            { 
            
            #line default
            #line hidden
            
            #line 132 "CodeGenerator.Enum.tt"
            this.Write("            if (this.Equals(EnumValues.Item");
            
            #line default
            #line hidden
            
            #line 132 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumItemIndex ));
            
            #line default
            #line hidden
            
            #line 132 "CodeGenerator.Enum.tt"
            this.Write(".AsArray))\r\n            {\r\n                return matchItem");
            
            #line default
            #line hidden
            
            #line 134 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumItemIndex ));
            
            #line default
            #line hidden
            
            #line 134 "CodeGenerator.Enum.tt"
            this.Write("(context);\r\n            }\r\n");
            
            #line default
            #line hidden
            
            #line 136 "CodeGenerator.Enum.tt"
          }
            else if (enumValue.IsNull)
            { 
            
            #line default
            #line hidden
            
            #line 139 "CodeGenerator.Enum.tt"
            this.Write("            if (this.ValueKind == JsonValueKind.Null)\r\n            {\r\n           " +
                    "     return matchItem");
            
            #line default
            #line hidden
            
            #line 141 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumItemIndex ));
            
            #line default
            #line hidden
            
            #line 141 "CodeGenerator.Enum.tt"
            this.Write("(context);\r\n            }\r\n");
            
            #line default
            #line hidden
            
            #line 143 "CodeGenerator.Enum.tt"
          }

            ++enumItemIndex;
        }
    }
            
            #line default
            #line hidden
            
            #line 148 "CodeGenerator.Enum.tt"
            this.Write("\r\n        return defaultMatch(context);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Matc" +
                    "hes the value against each of the enumeration values, and returns the result of " +
                    "calling the provided match function for the first match found.\r\n    /// </summar" +
                    "y>\r\n");
            
            #line default
            #line hidden
            
            #line 155 "CodeGenerator.Enum.tt"
  enumItemIndex = 0;
    foreach (var enumValue in EnumValues)
    { 
            
            #line default
            #line hidden
            
            #line 158 "CodeGenerator.Enum.tt"
            this.Write("    /// <param name=\"match");
            
            #line default
            #line hidden
            
            #line 158 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.IsString ? enumValue.AsPropertyName : $"Item{enumItemIndex}" ));
            
            #line default
            #line hidden
            
            #line 158 "CodeGenerator.Enum.tt"
            this.Write("\">The function to call if the value matches the JSON value ");
            
            #line default
            #line hidden
            
            #line 158 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.SerializedValue ));
            
            #line default
            #line hidden
            
            #line 158 "CodeGenerator.Enum.tt"
            this.Write(".</param>\r\n");
            
            #line default
            #line hidden
            
            #line 159 "CodeGenerator.Enum.tt"
      enumItemIndex++;
    } 
            
            #line default
            #line hidden
            
            #line 161 "CodeGenerator.Enum.tt"
            this.Write("    /// <param name=\"defaultMatch\">The fallback match.</param>\r\n    public TOut M" +
                    "atch<TOut>(");
            
            #line default
            #line hidden
            
            #line 162 "CodeGenerator.Enum.tt"
  enumItemIndex = 0;
    foreach (var enumValue in EnumValues)
    { 
            
            #line default
            #line hidden
            
            #line 165 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumItemIndex > 0 ? "," : ""));
            
            #line default
            #line hidden
            
            #line 165 "CodeGenerator.Enum.tt"
            this.Write("\r\n\r\n        Func<TOut> match");
            
            #line default
            #line hidden
            
            #line 167 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.IsString ? enumValue.AsPropertyName : $"Item{enumItemIndex}" ));
            
            #line default
            #line hidden
            
            #line 167 "CodeGenerator.Enum.tt"
      enumItemIndex++;
    } 
            
            #line default
            #line hidden
            
            #line 169 "CodeGenerator.Enum.tt"
            this.Write(",\r\n        Func<TOut> defaultMatch)\r\n    {\r\n");
            
            #line default
            #line hidden
            
            #line 172 "CodeGenerator.Enum.tt"
  if (EnumValues.All(i => i.IsString))
    { 
            
            #line default
            #line hidden
            
            #line 174 "CodeGenerator.Enum.tt"
            this.Write("        if (this.ValueKind == JsonValueKind.String)\r\n        {\r\n            if (t" +
                    "his.HasJsonElementBacking)\r\n            {\r\n");
            
            #line default
            #line hidden
            
            #line 178 "CodeGenerator.Enum.tt"
      foreach (var enumValue in EnumValues)
        { 
            
            #line default
            #line hidden
            
            #line 180 "CodeGenerator.Enum.tt"
            this.Write("                if (this.jsonElementBacking.ValueEquals(EnumValues.");
            
            #line default
            #line hidden
            
            #line 180 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.AsPropertyName ));
            
            #line default
            #line hidden
            
            #line 180 "CodeGenerator.Enum.tt"
            this.Write("Utf8))\r\n                {\r\n                    return match");
            
            #line default
            #line hidden
            
            #line 182 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.AsPropertyName ));
            
            #line default
            #line hidden
            
            #line 182 "CodeGenerator.Enum.tt"
            this.Write("();\r\n                }\r\n");
            
            #line default
            #line hidden
            
            #line 184 "CodeGenerator.Enum.tt"
      } 
            
            #line default
            #line hidden
            
            #line 185 "CodeGenerator.Enum.tt"
            this.Write("            }\r\n            else\r\n            {\r\n                switch(this.strin" +
                    "gBacking)\r\n                {\r\n");
            
            #line default
            #line hidden
            
            #line 190 "CodeGenerator.Enum.tt"
      foreach (var enumValue in EnumValues)
        { 
            
            #line default
            #line hidden
            
            #line 192 "CodeGenerator.Enum.tt"
            this.Write("                    case ");
            
            #line default
            #line hidden
            
            #line 192 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.RawStringValue ));
            
            #line default
            #line hidden
            
            #line 192 "CodeGenerator.Enum.tt"
            this.Write(":\r\n                        return match");
            
            #line default
            #line hidden
            
            #line 193 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.AsPropertyName  ));
            
            #line default
            #line hidden
            
            #line 193 "CodeGenerator.Enum.tt"
            this.Write("();\r\n");
            
            #line default
            #line hidden
            
            #line 194 "CodeGenerator.Enum.tt"
      } 
            
            #line default
            #line hidden
            
            #line 195 "CodeGenerator.Enum.tt"
            this.Write("                    default:\r\n                        break;\r\n                }\r\n" +
                    "            }\r\n        }\r\n");
            
            #line default
            #line hidden
            
            #line 200 "CodeGenerator.Enum.tt"
  }
    else
    {
        enumItemIndex = 0;
        foreach (var enumValue in EnumValues)
        {
            if (enumValue.IsString)
            { 
            
            #line default
            #line hidden
            
            #line 208 "CodeGenerator.Enum.tt"
            this.Write("            if (this.ValueKind == JsonValueKind.String)\r\n            {\r\n         " +
                    "       if (this.HasJsonElementBacking)\r\n                {\r\n                    i" +
                    "f (this.jsonElementBacking.ValueEquals(EnumValues.");
            
            #line default
            #line hidden
            
            #line 212 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.AsPropertyName ));
            
            #line default
            #line hidden
            
            #line 212 "CodeGenerator.Enum.tt"
            this.Write("Utf8))\r\n                    {\r\n                        return match");
            
            #line default
            #line hidden
            
            #line 214 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.AsPropertyName ));
            
            #line default
            #line hidden
            
            #line 214 "CodeGenerator.Enum.tt"
            this.Write("();\r\n                    }\r\n                }\r\n                else\r\n            " +
                    "    {\r\n                    if (this.stringBacking == EnumValues.");
            
            #line default
            #line hidden
            
            #line 219 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.AsPropertyName ));
            
            #line default
            #line hidden
            
            #line 219 "CodeGenerator.Enum.tt"
            this.Write(")\r\n                    {\r\n                        return match");
            
            #line default
            #line hidden
            
            #line 221 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.AsPropertyName  ));
            
            #line default
            #line hidden
            
            #line 221 "CodeGenerator.Enum.tt"
            this.Write("();\r\n                    }\r\n                }\r\n            }\r\n");
            
            #line default
            #line hidden
            
            #line 225 "CodeGenerator.Enum.tt"
          }
            else if (enumValue.IsBoolean)
            { 
            
            #line default
            #line hidden
            
            #line 228 "CodeGenerator.Enum.tt"
            this.Write("            if (this.ValueKind == EnumValues.Item");
            
            #line default
            #line hidden
            
            #line 228 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumItemIndex ));
            
            #line default
            #line hidden
            
            #line 228 "CodeGenerator.Enum.tt"
            this.Write(".ValueKind)\r\n            {\r\n                return matchItem");
            
            #line default
            #line hidden
            
            #line 230 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumItemIndex ));
            
            #line default
            #line hidden
            
            #line 230 "CodeGenerator.Enum.tt"
            this.Write("();\r\n            }\r\n");
            
            #line default
            #line hidden
            
            #line 232 "CodeGenerator.Enum.tt"
          }
            else if (enumValue.IsNumber)
            { 
            
            #line default
            #line hidden
            
            #line 235 "CodeGenerator.Enum.tt"
            this.Write("            if (this.Equals(EnumValues.Item");
            
            #line default
            #line hidden
            
            #line 235 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumItemIndex ));
            
            #line default
            #line hidden
            
            #line 235 "CodeGenerator.Enum.tt"
            this.Write(".AsNumber))\r\n            {\r\n                return matchItem");
            
            #line default
            #line hidden
            
            #line 237 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumItemIndex ));
            
            #line default
            #line hidden
            
            #line 237 "CodeGenerator.Enum.tt"
            this.Write("();\r\n            }\r\n");
            
            #line default
            #line hidden
            
            #line 239 "CodeGenerator.Enum.tt"
          }
            else if (enumValue.IsObject)
            { 
            
            #line default
            #line hidden
            
            #line 242 "CodeGenerator.Enum.tt"
            this.Write("            if (this.Equals(EnumValues.Item");
            
            #line default
            #line hidden
            
            #line 242 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumItemIndex ));
            
            #line default
            #line hidden
            
            #line 242 "CodeGenerator.Enum.tt"
            this.Write(".AsObject))\r\n            {\r\n                return matchItem");
            
            #line default
            #line hidden
            
            #line 244 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumItemIndex ));
            
            #line default
            #line hidden
            
            #line 244 "CodeGenerator.Enum.tt"
            this.Write("();\r\n            }\r\n");
            
            #line default
            #line hidden
            
            #line 246 "CodeGenerator.Enum.tt"
          }
            else if (enumValue.IsArray)
            { 
            
            #line default
            #line hidden
            
            #line 249 "CodeGenerator.Enum.tt"
            this.Write("            if (this.Equals(EnumValues.Item");
            
            #line default
            #line hidden
            
            #line 249 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumItemIndex ));
            
            #line default
            #line hidden
            
            #line 249 "CodeGenerator.Enum.tt"
            this.Write(".AsArray))\r\n            {\r\n                return matchItem");
            
            #line default
            #line hidden
            
            #line 251 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumItemIndex ));
            
            #line default
            #line hidden
            
            #line 251 "CodeGenerator.Enum.tt"
            this.Write("();\r\n            }\r\n");
            
            #line default
            #line hidden
            
            #line 253 "CodeGenerator.Enum.tt"
          }
            else if (enumValue.IsNull)
            { 
            
            #line default
            #line hidden
            
            #line 256 "CodeGenerator.Enum.tt"
            this.Write("            if (this.ValueKind == JsonValueKind.Null)\r\n            {\r\n           " +
                    "     return matchItem");
            
            #line default
            #line hidden
            
            #line 258 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumItemIndex ));
            
            #line default
            #line hidden
            
            #line 258 "CodeGenerator.Enum.tt"
            this.Write("();\r\n            }\r\n");
            
            #line default
            #line hidden
            
            #line 260 "CodeGenerator.Enum.tt"
          }

            ++enumItemIndex;
        }
    }
            
            #line default
            #line hidden
            
            #line 265 "CodeGenerator.Enum.tt"
            this.Write("\r\n        return defaultMatch();\r\n    }\r\n\r\n    /// <summary>\r\n    /// Permitted v" +
                    "alues.\r\n    /// </summary>\r\n    public static class EnumValues\r\n    {\r\n");
            
            #line default
            #line hidden
            
            #line 274 "CodeGenerator.Enum.tt"
  enumItemIndex = 0;
    foreach (var enumValue in EnumValues)
    {
        if (enumValue.IsString)
        { 
            
            #line default
            #line hidden
            
            #line 279 "CodeGenerator.Enum.tt"
            this.Write("        /// <summary>\r\n        /// Gets ");
            
            #line default
            #line hidden
            
            #line 280 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.RawStringValue ));
            
            #line default
            #line hidden
            
            #line 280 "CodeGenerator.Enum.tt"
            this.Write(" as a JSON value.\r\n        /// </summary>\r\n        public static readonly ");
            
            #line default
            #line hidden
            
            #line 282 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 282 "CodeGenerator.Enum.tt"
            this.Write(" ");
            
            #line default
            #line hidden
            
            #line 282 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.AsPropertyName ));
            
            #line default
            #line hidden
            
            #line 282 "CodeGenerator.Enum.tt"
            this.Write(" = ");
            
            #line default
            #line hidden
            
            #line 282 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 282 "CodeGenerator.Enum.tt"
            this.Write(".Parse(");
            
            #line default
            #line hidden
            
            #line 282 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.SerializedValue ));
            
            #line default
            #line hidden
            
            #line 282 "CodeGenerator.Enum.tt"
            this.Write(");\r\n        /// <summary>\r\n        /// Gets ");
            
            #line default
            #line hidden
            
            #line 284 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.RawStringValue ));
            
            #line default
            #line hidden
            
            #line 284 "CodeGenerator.Enum.tt"
            this.Write(" as a UTF8 string.\r\n        /// </summary>\r\n        public static ReadOnlySpan<by" +
                    "te> ");
            
            #line default
            #line hidden
            
            #line 286 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.AsPropertyName ));
            
            #line default
            #line hidden
            
            #line 286 "CodeGenerator.Enum.tt"
            this.Write("Utf8 => ");
            
            #line default
            #line hidden
            
            #line 286 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.RawStringValue ));
            
            #line default
            #line hidden
            
            #line 286 "CodeGenerator.Enum.tt"
            this.Write("u8;\r\n");
            
            #line default
            #line hidden
            
            #line 287 "CodeGenerator.Enum.tt"
      }
        else if (enumValue.IsBoolean)
        { 
            
            #line default
            #line hidden
            
            #line 290 "CodeGenerator.Enum.tt"
            this.Write("        /// <summary>\r\n        /// Gets ");
            
            #line default
            #line hidden
            
            #line 291 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.SerializedValue ));
            
            #line default
            #line hidden
            
            #line 291 "CodeGenerator.Enum.tt"
            this.Write(" as a JSON value.\r\n        /// </summary>\r\n        public static readonly ");
            
            #line default
            #line hidden
            
            #line 293 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 293 "CodeGenerator.Enum.tt"
            this.Write(" Item");
            
            #line default
            #line hidden
            
            #line 293 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumItemIndex ));
            
            #line default
            #line hidden
            
            #line 293 "CodeGenerator.Enum.tt"
            this.Write(" = ");
            
            #line default
            #line hidden
            
            #line 293 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 293 "CodeGenerator.Enum.tt"
            this.Write(".Parse(");
            
            #line default
            #line hidden
            
            #line 293 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.SerializedValue ));
            
            #line default
            #line hidden
            
            #line 293 "CodeGenerator.Enum.tt"
            this.Write(");\r\n");
            
            #line default
            #line hidden
            
            #line 294 "CodeGenerator.Enum.tt"
      }
        else if (enumValue.IsNumber)
        { 
            
            #line default
            #line hidden
            
            #line 297 "CodeGenerator.Enum.tt"
            this.Write("        /// <summary>\r\n        /// Gets ");
            
            #line default
            #line hidden
            
            #line 298 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.SerializedValue ));
            
            #line default
            #line hidden
            
            #line 298 "CodeGenerator.Enum.tt"
            this.Write(" as a JSON value.\r\n        /// </summary>\r\n        public static readonly ");
            
            #line default
            #line hidden
            
            #line 300 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 300 "CodeGenerator.Enum.tt"
            this.Write(" Item");
            
            #line default
            #line hidden
            
            #line 300 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumItemIndex ));
            
            #line default
            #line hidden
            
            #line 300 "CodeGenerator.Enum.tt"
            this.Write(" = ");
            
            #line default
            #line hidden
            
            #line 300 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 300 "CodeGenerator.Enum.tt"
            this.Write(".Parse(");
            
            #line default
            #line hidden
            
            #line 300 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.SerializedValue ));
            
            #line default
            #line hidden
            
            #line 300 "CodeGenerator.Enum.tt"
            this.Write(");\r\n");
            
            #line default
            #line hidden
            
            #line 301 "CodeGenerator.Enum.tt"
      }
        else if (enumValue.IsObject)
        { 
            
            #line default
            #line hidden
            
            #line 304 "CodeGenerator.Enum.tt"
            this.Write("        /// <summary>\r\n        /// Gets ");
            
            #line default
            #line hidden
            
            #line 305 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.SerializedValue ));
            
            #line default
            #line hidden
            
            #line 305 "CodeGenerator.Enum.tt"
            this.Write(" as a JSON value.\r\n        /// </summary>\r\n        public static readonly ");
            
            #line default
            #line hidden
            
            #line 307 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 307 "CodeGenerator.Enum.tt"
            this.Write(" Item");
            
            #line default
            #line hidden
            
            #line 307 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumItemIndex));
            
            #line default
            #line hidden
            
            #line 307 "CodeGenerator.Enum.tt"
            this.Write(" = ");
            
            #line default
            #line hidden
            
            #line 307 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 307 "CodeGenerator.Enum.tt"
            this.Write(".Parse(");
            
            #line default
            #line hidden
            
            #line 307 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.SerializedValue ));
            
            #line default
            #line hidden
            
            #line 307 "CodeGenerator.Enum.tt"
            this.Write(");\r\n");
            
            #line default
            #line hidden
            
            #line 308 "CodeGenerator.Enum.tt"
      }
        else if (enumValue.IsArray)
        { 
            
            #line default
            #line hidden
            
            #line 311 "CodeGenerator.Enum.tt"
            this.Write("        /// <summary>\r\n        /// Gets ");
            
            #line default
            #line hidden
            
            #line 312 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.SerializedValue ));
            
            #line default
            #line hidden
            
            #line 312 "CodeGenerator.Enum.tt"
            this.Write(" as a JSON value.\r\n        /// </summary>\r\n        public static readonly ");
            
            #line default
            #line hidden
            
            #line 314 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 314 "CodeGenerator.Enum.tt"
            this.Write(" Item");
            
            #line default
            #line hidden
            
            #line 314 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumItemIndex ));
            
            #line default
            #line hidden
            
            #line 314 "CodeGenerator.Enum.tt"
            this.Write(" = ");
            
            #line default
            #line hidden
            
            #line 314 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 314 "CodeGenerator.Enum.tt"
            this.Write(".Parse(");
            
            #line default
            #line hidden
            
            #line 314 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.SerializedValue ));
            
            #line default
            #line hidden
            
            #line 314 "CodeGenerator.Enum.tt"
            this.Write(");\r\n");
            
            #line default
            #line hidden
            
            #line 315 "CodeGenerator.Enum.tt"
      }
        else if (enumValue.IsNull)
        { 
            
            #line default
            #line hidden
            
            #line 318 "CodeGenerator.Enum.tt"
            this.Write("        /// <summary>\r\n        /// Gets \"null\" as a JSON value.\r\n        /// </su" +
                    "mmary>\r\n        public static readonly ");
            
            #line default
            #line hidden
            
            #line 321 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 321 "CodeGenerator.Enum.tt"
            this.Write(" Item");
            
            #line default
            #line hidden
            
            #line 321 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumItemIndex));
            
            #line default
            #line hidden
            
            #line 321 "CodeGenerator.Enum.tt"
            this.Write(" = ");
            
            #line default
            #line hidden
            
            #line 321 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 321 "CodeGenerator.Enum.tt"
            this.Write(".Parse(\"null\");\r\n");
            
            #line default
            #line hidden
            
            #line 322 "CodeGenerator.Enum.tt"
      }

        ++enumItemIndex;
    }

    enumItemIndex = 0;
    foreach (var enumValue in EnumValues)
    {
        if (enumValue.IsString)
        { 
            
            #line default
            #line hidden
            
            #line 332 "CodeGenerator.Enum.tt"
            this.Write("        /// <summary>\r\n        /// Gets ");
            
            #line default
            #line hidden
            
            #line 333 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.RawStringValue ));
            
            #line default
            #line hidden
            
            #line 333 "CodeGenerator.Enum.tt"
            this.Write(" as a JSON value.\r\n        /// </summary>\r\n        internal static readonly ");
            
            #line default
            #line hidden
            
            #line 335 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 335 "CodeGenerator.Enum.tt"
            this.Write(" Item");
            
            #line default
            #line hidden
            
            #line 335 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumItemIndex ));
            
            #line default
            #line hidden
            
            #line 335 "CodeGenerator.Enum.tt"
            this.Write(" = ");
            
            #line default
            #line hidden
            
            #line 335 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 335 "CodeGenerator.Enum.tt"
            this.Write(".Parse(");
            
            #line default
            #line hidden
            
            #line 335 "CodeGenerator.Enum.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( enumValue.SerializedValue ));
            
            #line default
            #line hidden
            
            #line 335 "CodeGenerator.Enum.tt"
            this.Write(");\r\n");
            
            #line default
            #line hidden
            
            #line 336 "CodeGenerator.Enum.tt"
      }

        enumItemIndex++;
    } 
            
            #line default
            #line hidden
            
            #line 340 "CodeGenerator.Enum.tt"
            this.Write("    }\r\n}\r\n");
            
            #line default
            #line hidden
            
            #line 342 "CodeGenerator.Enum.tt"
 EndNesting(); 
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class CodeGeneratorEnumBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
