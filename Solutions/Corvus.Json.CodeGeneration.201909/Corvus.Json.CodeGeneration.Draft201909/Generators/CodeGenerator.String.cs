//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:7.0.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Corvus.Json.CodeGeneration.Generators.Draft201909 {
    using System.Collections.Generic;
    using Corvus.Json;
    using System;
    
    
    public partial class CodeGeneratorString : CodeGeneratorStringBase {
        
        
        #line 345 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"

    public bool ShouldGenerate
    {
        get
        {
            return IsImplicitString || IsNotImplicitType;
        }
    }

        #line default
        #line hidden
        
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 4 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"

    // This is only emitted if IsImplicitString is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.String should not be emitted if IsImplicitString is false.");
    } 
            
            #line default
            #line hidden
            
            #line 10 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Buffers;
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Text;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace ");
            
            #line default
            #line hidden
            
            #line 29 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Namespace ));
            
            #line default
            #line hidden
            
            #line 29 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write(";\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 31 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
 BeginNesting(); 
            
            #line default
            #line hidden
            
            #line 32 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write("/// <summary>\r\n/// A type generated from a JsonSchema specification.\r\n/// </summa" +
                    "ry>\r\npublic readonly partial struct ");
            
            #line default
            #line hidden
            
            #line 35 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 35 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write(" : IJsonString<");
            
            #line default
            #line hidden
            
            #line 35 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 35 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write(">\r\n{\r\n    /// <summary>\r\n    /// Initializes a new instance of the <see cref=\"");
            
            #line default
            #line hidden
            
            #line 38 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 38 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write("\"/> struct.\r\n    /// </summary>\r\n    /// <param name=\"value\">The value from which" +
                    " to construct the instance.</param>\r\n    public ");
            
            #line default
            #line hidden
            
            #line 41 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 41 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write("(string value)\r\n    {\r\n        this.jsonElementBacking = default;\r\n        this.b" +
                    "acking = Backing.String;\r\n\r\n        this.stringBacking = value;\r\n");
            
            #line default
            #line hidden
            
            #line 47 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
  if(IsImplicitBoolean || IsNotImplicitType)
    { 
            
            #line default
            #line hidden
            
            #line 49 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write("        this.boolBacking = default;\r\n");
            
            #line default
            #line hidden
            
            #line 50 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
  }
    if(IsImplicitNumber || IsNotImplicitType)
    { 
            
            #line default
            #line hidden
            
            #line 53 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write("        this.numberBacking = default;\r\n");
            
            #line default
            #line hidden
            
            #line 54 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
  }
    if(IsImplicitArray || IsNotImplicitType)
    { 
            
            #line default
            #line hidden
            
            #line 57 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write("        this.arrayBacking = ImmutableList<JsonAny>.Empty;\r\n");
            
            #line default
            #line hidden
            
            #line 58 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
  }
    if(IsImplicitObject || IsNotImplicitType)
    { 
            
            #line default
            #line hidden
            
            #line 61 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write("        this.objectBacking = ImmutableDictionary<JsonPropertyName, JsonAny>.Empty" +
                    ";\r\n");
            
            #line default
            #line hidden
            
            #line 62 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
  } 
            
            #line default
            #line hidden
            
            #line 63 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write("    }\r\n\r\n    /// <summary>\r\n    /// Initializes a new instance of the <see cref=\"" +
                    "");
            
            #line default
            #line hidden
            
            #line 66 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 66 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write("\"/> struct.\r\n    /// </summary>\r\n    /// <param name=\"value\">The value from which" +
                    " to construct the instance.</param>\r\n    public ");
            
            #line default
            #line hidden
            
            #line 69 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 69 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write("(in ReadOnlySpan<char> value)\r\n    {\r\n        this.jsonElementBacking = default;\r" +
                    "\n        this.backing = Backing.String;\r\n        this.stringBacking = value.ToSt" +
                    "ring();\r\n");
            
            #line default
            #line hidden
            
            #line 74 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
  if(IsImplicitBoolean || IsNotImplicitType)
    { 
            
            #line default
            #line hidden
            
            #line 76 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write("        this.boolBacking = default;\r\n");
            
            #line default
            #line hidden
            
            #line 77 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
  }
    if(IsImplicitNumber || IsNotImplicitType)
    { 
            
            #line default
            #line hidden
            
            #line 80 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write("        this.numberBacking = default;\r\n");
            
            #line default
            #line hidden
            
            #line 81 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
  }
    if(IsImplicitArray || IsNotImplicitType)
    { 
            
            #line default
            #line hidden
            
            #line 84 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write("        this.arrayBacking = ImmutableList<JsonAny>.Empty;\r\n");
            
            #line default
            #line hidden
            
            #line 85 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
  }
    if(IsImplicitObject || IsNotImplicitType)
    { 
            
            #line default
            #line hidden
            
            #line 88 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write("        this.objectBacking = ImmutableDictionary<JsonPropertyName, JsonAny>.Empty" +
                    ";\r\n");
            
            #line default
            #line hidden
            
            #line 89 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
  } 
            
            #line default
            #line hidden
            
            #line 90 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write("    }\r\n\r\n    /// <summary>\r\n    /// Initializes a new instance of the <see cref=\"" +
                    "");
            
            #line default
            #line hidden
            
            #line 93 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 93 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write("\"/> struct.\r\n    /// </summary>\r\n    /// <param name=\"utf8Value\">The value from w" +
                    "hich to construct the instance.</param>\r\n    public ");
            
            #line default
            #line hidden
            
            #line 96 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 96 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write("(in ReadOnlySpan<byte> utf8Value)\r\n    {\r\n        this.jsonElementBacking = defau" +
                    "lt;\r\n        this.backing = Backing.String;\r\n        this.stringBacking = Encodi" +
                    "ng.UTF8.GetString(utf8Value);\r\n");
            
            #line default
            #line hidden
            
            #line 101 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
  if(IsImplicitBoolean || IsNotImplicitType)
    { 
            
            #line default
            #line hidden
            
            #line 103 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write("        this.boolBacking = default;\r\n");
            
            #line default
            #line hidden
            
            #line 104 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
  }
    if(IsImplicitNumber || IsNotImplicitType)
    { 
            
            #line default
            #line hidden
            
            #line 107 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write("        this.numberBacking = default;\r\n");
            
            #line default
            #line hidden
            
            #line 108 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
  }
    if(IsImplicitArray || IsNotImplicitType)
    { 
            
            #line default
            #line hidden
            
            #line 111 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write("        this.arrayBacking = ImmutableList<JsonAny>.Empty;\r\n");
            
            #line default
            #line hidden
            
            #line 112 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
  }
    if(IsImplicitObject || IsNotImplicitType)
    { 
            
            #line default
            #line hidden
            
            #line 115 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write("        this.objectBacking = ImmutableDictionary<JsonPropertyName, JsonAny>.Empty" +
                    ";\r\n");
            
            #line default
            #line hidden
            
            #line 116 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
  } 
            
            #line default
            #line hidden
            
            #line 117 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write("    }\r\n\r\n    /// <summary>\r\n    /// Conversion from JsonString.\r\n    /// </summar" +
                    "y>\r\n    /// <param name=\"value\">The value from which to convert.</param>\r\n    pu" +
                    "blic static implicit operator JsonString(");
            
            #line default
            #line hidden
            
            #line 123 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 123 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write(" value)\r\n    {\r\n        return value.AsString;\r\n    }\r\n\r\n    /// <summary>\r\n    /" +
                    "// Conversion to JsonString.\r\n    /// </summary>\r\n    /// <param name=\"value\">Th" +
                    "e value from which to convert.</param>\r\n    public static implicit operator ");
            
            #line default
            #line hidden
            
            #line 132 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 132 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write(@"(JsonString value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return new((string)value);
    }

    /// <summary>
    /// Conversion from string.
    /// </summary>
    /// <param name=""value"">The value from which to convert.</param>
    public static implicit operator ");
            
            #line default
            #line hidden
            
            #line 146 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 146 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write(@"(string value)
    {
        return new(value);
    }

    /// <summary>
    /// Conversion to string.
    /// </summary>
    /// <param name=""value"">The value from which to convert.</param>
    /// <exception cref=""InvalidOperationException"">The value was not a string.</exception>
    public static implicit operator string(");
            
            #line default
            #line hidden
            
            #line 156 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 156 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write(@" value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            if (value.jsonElementBacking.GetString() is string result)
            {
                return result;
            }

            throw new InvalidOperationException();
        }

        if ((value.backing & Backing.String) != 0)
        {
            return value.stringBacking;
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Conversion from string.
    /// </summary>
    /// <param name=""value"">The value from which to convert.</param>
    public static implicit operator ");
            
            #line default
            #line hidden
            
            #line 180 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 180 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write(@"(ReadOnlySpan<char> value)
    {
        return new(value);
    }

    /// <summary>
    /// Conversion to string.
    /// </summary>
    /// <param name=""value"">The value from which to convert.</param>
    /// <exception cref=""InvalidOperationException"">The value was not a string.</exception>
    public static implicit operator ReadOnlySpan<char>(");
            
            #line default
            #line hidden
            
            #line 190 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 190 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write(" value)\r\n    {\r\n        return ((string)value).AsSpan();\r\n    }\r\n\r\n    /// <summa" +
                    "ry>\r\n    /// Conversion from string.\r\n    /// </summary>\r\n    /// <param name=\"v" +
                    "alue\">The value from which to convert.</param>\r\n    public static implicit opera" +
                    "tor ");
            
            #line default
            #line hidden
            
            #line 199 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 199 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
            this.Write("(ReadOnlySpan<byte> value)\r\n    {\r\n        return new(value);\r\n    }\r\n\r\n    /// <" +
                    "inheritdoc/>\r\n    public bool TryGetString([NotNullWhen(true)] out string? value" +
                    ")\r\n    {\r\n        if ((this.backing & Backing.String) != 0)\r\n        {\r\n        " +
                    "    value = this.stringBacking;\r\n            return true;\r\n        }\r\n\r\n        " +
                    "if ((this.backing & Backing.JsonElement) != 0 && this.jsonElementBacking.ValueKi" +
                    "nd == JsonValueKind.String)\r\n        {\r\n            value = this.jsonElementBack" +
                    "ing.GetString();\r\n            return value is not null;\r\n        }\r\n\r\n        va" +
                    "lue = null;\r\n        return false;\r\n    }\r\n\r\n    /// <inheritdoc/>\r\n    public R" +
                    "eadOnlySpan<char> AsSpan()\r\n    {\r\n        if ((this.backing & Backing.String) !" +
                    "= 0)\r\n        {\r\n            return this.stringBacking.AsSpan();\r\n        }\r\n\r\n " +
                    "       if ((this.backing & Backing.JsonElement) != 0 && this.jsonElementBacking." +
                    "ValueKind == JsonValueKind.String)\r\n        {\r\n            return this.jsonEleme" +
                    "ntBacking.GetString().AsSpan();\r\n        }\r\n\r\n        throw new InvalidOperation" +
                    "Exception();\r\n    }\r\n\r\n    /// <summary>\r\n    /// Gets the string value.\r\n    //" +
                    "/ </summary>\r\n    /// <returns><c>The string if this value represents a string</" +
                    "c>, otherwise <c>null</c>.</returns>\r\n    public string? AsOptionalString()\r\n   " +
                    " {\r\n        if (this.TryGetString(out string? value))\r\n        {\r\n            re" +
                    "turn value;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /// <summary>\r\n    " +
                    "/// Compare to a sequence of characters.\r\n    /// </summary>\r\n    /// <param nam" +
                    "e=\"utf8Bytes\">The UTF8-encoded character sequence to compare.</param>\r\n    /// <" +
                    "returns><c>True</c> if teh sequences match.</returns>\r\n    public bool EqualsUtf" +
                    "8Bytes(ReadOnlySpan<byte> utf8Bytes)\r\n    {\r\n        if ((this.backing & Backing" +
                    ".JsonElement) != 0)\r\n        {\r\n            if (this.jsonElementBacking.ValueKin" +
                    "d == JsonValueKind.String)\r\n            {\r\n                return this.jsonEleme" +
                    "ntBacking.ValueEquals(utf8Bytes);\r\n            }\r\n        }\r\n\r\n        if ((this" +
                    ".backing & Backing.String) != 0)\r\n        {\r\n            int maxCharCount = Enco" +
                    "ding.UTF8.GetMaxCharCount(utf8Bytes.Length);\r\n            char[]? pooledChars = " +
                    "null;\r\n\r\n            Span<char> chars = maxCharCount <= JsonValueHelpers.MaxStac" +
                    "kAlloc ?\r\n                stackalloc char[maxCharCount] :\r\n                (pool" +
                    "edChars = ArrayPool<char>.Shared.Rent(maxCharCount));\r\n\r\n            try\r\n      " +
                    "      {\r\n                int written = Encoding.UTF8.GetChars(utf8Bytes, chars);" +
                    "\r\n                return chars[..written].SequenceEqual(this.stringBacking);\r\n  " +
                    "          }\r\n            finally\r\n            {\r\n                if (pooledChars" +
                    " is not null)\r\n                {\r\n                    ArrayPool<char>.Shared.Ret" +
                    "urn(pooledChars, true);\r\n                }\r\n            }\r\n        }\r\n\r\n        " +
                    "return false;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Compare to a sequence of char" +
                    "acters.\r\n    /// </summary>\r\n    /// <param name=\"chars\">The character sequence " +
                    "to compare.</param>\r\n    /// <returns><c>True</c> if teh sequences match.</retur" +
                    "ns>\r\n    public bool EqualsString(string chars)\r\n    {\r\n        if ((this.backin" +
                    "g & Backing.JsonElement) != 0)\r\n        {\r\n            if (this.jsonElementBacki" +
                    "ng.ValueKind == JsonValueKind.String)\r\n            {\r\n                return thi" +
                    "s.jsonElementBacking.ValueEquals(chars);\r\n            }\r\n\r\n            return fa" +
                    "lse;\r\n        }\r\n\r\n        if ((this.backing & Backing.String) != 0)\r\n        {\r" +
                    "\n            return chars.Equals(this.stringBacking, StringComparison.Ordinal);\r" +
                    "\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Compare" +
                    " to a sequence of characters.\r\n    /// </summary>\r\n    /// <param name=\"chars\">T" +
                    "he character sequence to compare.</param>\r\n    /// <returns><c>True</c> if teh s" +
                    "equences match.</returns>\r\n    public bool EqualsString(ReadOnlySpan<char> chars" +
                    ")\r\n    {\r\n        if ((this.backing & Backing.JsonElement) != 0)\r\n        {\r\n   " +
                    "         if (this.jsonElementBacking.ValueKind == JsonValueKind.String)\r\n       " +
                    "     {\r\n                return this.jsonElementBacking.ValueEquals(chars);\r\n    " +
                    "        }\r\n\r\n            return false;\r\n        }\r\n\r\n        if ((this.backing &" +
                    " Backing.String) != 0)\r\n        {\r\n            return chars.SequenceEqual(this.s" +
                    "tringBacking);\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n");
            
            #line default
            #line hidden
            
            #line 344 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.String.tt"
 EndNesting(); 
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class CodeGeneratorStringBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
