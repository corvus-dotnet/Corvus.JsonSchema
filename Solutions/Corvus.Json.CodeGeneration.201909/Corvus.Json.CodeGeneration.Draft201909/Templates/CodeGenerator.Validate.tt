<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Corvus.Json" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Text.Json;
using Corvus.Json;

namespace <#= Namespace #>;

<# BeginNesting(); #>
<#= FormattedTypeDocumentation #>
public readonly partial struct <#= TypeDeclaration.DotnetTypeName #>
{
<#  if (HasMultipleOf)
    { #>
    private static readonly BinaryJsonNumber __Corvus_MultipleOf = new(<#= MultipleOf #>);

<#  }

    if (HasMaximum)
    {#>
    private static readonly BinaryJsonNumber __Corvus_Maximum = new(<#= Maximum #>);

<#  }

    if (HasMinimum)
    {#>
    private static readonly BinaryJsonNumber __Corvus_Minimum = new(<#= Minimum #>);

<#  }

    if (HasExclusiveMaximum)
    { #>
    private static readonly BinaryJsonNumber __Corvus_ExclusiveMaximum = new(<#= ExclusiveMaximum #>);

<#  }

    if (HasExclusiveMinimum)
    { #>
    private static readonly BinaryJsonNumber __Corvus_ExclusiveMinimum = new(<#= ExclusiveMinimum #>);

<#  } #>
    /// <inheritdoc/>
    public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
    {
        ValidationContext result = validationContext;
        if (level > ValidationLevel.Flag)
        {
            result = result.UsingResults();
        }
        
        if (level > ValidationLevel.Basic)
        {
            result = result.UsingStack();
            result = result.PushSchemaLocation(<#= Formatting.FormatLiteralOrNull(TypeDeclaration.RelativeSchemaLocation, true) #>);
        }
<#  if (HasAdditionalProperties || HasUnevaluatedProperties)
    { #>

        result = result.UsingEvaluatedProperties();
<#  }
    if (HasAdditionalItems || HasUnevaluatedItems)
    { #>

        result = result.UsingEvaluatedItems();
<#  }
    if (HasRef)
    { #>

        result = this.ValidateRef(result, level);
        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }
<#  }
    if (HasRecursiveRef)
    { #>

        result = this.ValidateRecursiveRef(result, level);
        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }
<#  }
    if ((HasExplicitType || HasFormat || HasMediaTypeOrEncoding) || (HasItems || HasContains || HasUniqueItems || HasMaxItems || HasMinItems || HasUnevaluatedItems || HasAdditionalItems) || (HasDependentRequired || HasLocalProperties || HasRequired || HasMaxProperties || HasMinProperties || HasDependentSchemas || HasPropertyNames || HasPatternProperties || ((AllowsAdditionalProperties && (HasAdditionalProperties || HasUnevaluatedProperties)))))
    { #>

        JsonValueKind valueKind = this.ValueKind;
<#  }
    if (HasExplicitType || HasFormat || HasMediaTypeOrEncoding)
    {
        if (HasExplicitType)
        { #>

        result = this.ValidateType(valueKind, result, level);
        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }
<#      }
        if (HasFormat && ValidateFormat)
        { #>

        result = this.ValidateFormat(valueKind, result, level);
        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }
<#      }
        if (HasMediaTypeOrEncoding)
        { #>

        result = this.ValidateMediaTypeAndEncoding(valueKind, result, level);
        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }
<#      }
    }
    if (HasConst)
    { #>

        result = Corvus.Json.Validate.ValidateConst(this, result, level, __CorvusConstValue);
        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }
<#  }
    if (HasEnum)
    { #>
        result = Corvus.Json.Validate.ValidateEnum(
            this,
            result,
            level<#= EnumValues.Length > 0 ? "," : ");" #>
<#      for(int enumIndex = 0; enumIndex < EnumValues.Length; ++enumIndex)
        { #>
            EnumValues.Item<#= enumIndex #><#= enumIndex < (EnumValues.Length - 1) ? "," : ");" #>
<#      } #>
        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }
<#  }
    if (HasMultipleOf || HasMaximum || HasExclusiveMaximum|| HasMinimum || HasExclusiveMinimum)
    { #>

        result = Corvus.Json.Validate.ValidateNumber(
            this,
            result,
            level,
            <#= HasMultipleOf ? "__Corvus_MultipleOf" : "BinaryJsonNumber.None" #>,
            <#= HasMaximum ? "__Corvus_Maximum" : "BinaryJsonNumber.None" #>,
            <#= HasExclusiveMaximum ? "__Corvus_ExclusiveMaximum" : "BinaryJsonNumber.None" #>,
            <#= HasMinimum ? "__Corvus_Minimum" : "BinaryJsonNumber.None" #>,
            <#= HasExclusiveMinimum ? "__Corvus_ExclusiveMinimum" : "BinaryJsonNumber.None" #>);

        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }
<#  }
    if (HasMaxLength || HasMinLength || HasPattern)
    { #>

        result = Corvus.Json.Validate.ValidateString(
            this,
            result,
            level,
            <#= HasMaxLength ? MaxLength : "null" #>,
            <#= HasMinLength ? MinLength : "null" #>,
            <#= HasPattern ? "__CorvusPatternExpression" : "null" #>);

        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }
<#  }
    if (HasIfThenElse)
    { #>

        result = this.ValidateIfThenElse(result, level);
        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }
<#  }
    if (HasNot)
    { #>

        result = this.ValidateNot(result, level);
        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }
<#  }
    if (HasAllOf)
    { #>

        result = this.ValidateAllOf(result, level);
        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }
<#  }
    if (HasAnyOf)
    { #>

        result = this.ValidateAnyOf(result, level);
        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }
<#  }
    if (HasOneOf)
    { #>

        result = this.ValidateOneOf(result, level);
        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }
<#  }
    if (HasDependentRequired || HasLocalProperties || HasRequired || HasMaxProperties || HasMinProperties || HasDependentSchemas || HasPropertyNames || HasPatternProperties || ((AllowsAdditionalProperties && (HasAdditionalProperties || HasUnevaluatedProperties)) || !AllowsAdditionalProperties))
    { #>

        result = this.ValidateObject(valueKind, result, level);
        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }
<#  }
    if (HasItems || HasContains || HasUniqueItems || HasMaxItems || HasMinItems || HasUnevaluatedItems || HasAdditionalItems)
    { #>

        result = this.ValidateArray(valueKind, result, level);
        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }
<#  } #>
        if (level != ValidationLevel.Flag)
        {
            result = result.PopLocation();
        }

        return result;
    }
}
<# EndNesting(); #>