//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Corvus.Json.CodeGeneration.Generators.Draft202012 {
    using System.Collections.Generic;
    using Corvus.Json;
    using System;
    
    
    public partial class CodeGeneratorObject : CodeGeneratorObjectBase {
        
        
        #line 968 "CodeGenerator.Object.tt"

    public bool ShouldGenerate
    {
        get
        {
            return IsImplicitObject || IsNotImplicitType;
        }
    }

        #line default
        #line hidden
        
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 4 "CodeGenerator.Object.tt"

    // This is only emitted if IsImplicitObject is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.Object should not be emitted if IsImplicitObject is false.");
    } 
            
            #line default
            #line hidden
            
            #line 10 "CodeGenerator.Object.tt"
            this.Write(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace ");
            
            #line default
            #line hidden
            
            #line 27 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Namespace ));
            
            #line default
            #line hidden
            
            #line 27 "CodeGenerator.Object.tt"
            this.Write(";\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 29 "CodeGenerator.Object.tt"
 BeginNesting(); 
            
            #line default
            #line hidden
            
            #line 30 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( FormattedTypeDocumentation ));
            
            #line default
            #line hidden
            
            #line 30 "CodeGenerator.Object.tt"
            this.Write("\r\npublic readonly partial struct ");
            
            #line default
            #line hidden
            
            #line 31 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 31 "CodeGenerator.Object.tt"
            this.Write(" : IJsonObject<");
            
            #line default
            #line hidden
            
            #line 31 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 31 "CodeGenerator.Object.tt"
            this.Write(">\r\n{\r\n    /// <summary>\r\n    /// Initializes a new instance of the <see cref=\"");
            
            #line default
            #line hidden
            
            #line 34 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 34 "CodeGenerator.Object.tt"
            this.Write("\"/> struct.\r\n    /// </summary>\r\n    /// <param name=\"value\">The value from which" +
                    " to construct the instance.</param>\r\n    public ");
            
            #line default
            #line hidden
            
            #line 37 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 37 "CodeGenerator.Object.tt"
            this.Write("(ImmutableList<JsonObjectProperty> value)\r\n    {\r\n        this.jsonElementBacking" +
                    " = default;\r\n        this.backing = Backing.Object;\r\n");
            
            #line default
            #line hidden
            
            #line 41 "CodeGenerator.Object.tt"
  if(IsImplicitString || IsNotImplicitType)
    { 
            
            #line default
            #line hidden
            
            #line 43 "CodeGenerator.Object.tt"
            this.Write("        this.stringBacking = string.Empty;\r\n");
            
            #line default
            #line hidden
            
            #line 44 "CodeGenerator.Object.tt"
  }
    if (IsImplicitBoolean && !(IsImplicitNumber || IsNotImplicitType))
    { 
            
            #line default
            #line hidden
            
            #line 47 "CodeGenerator.Object.tt"
            this.Write("        this.boolBacking = default;\r\n");
            
            #line default
            #line hidden
            
            #line 48 "CodeGenerator.Object.tt"
  }
    if(IsImplicitNumber || IsNotImplicitType)
    { 
            
            #line default
            #line hidden
            
            #line 51 "CodeGenerator.Object.tt"
            this.Write("        this.numberBacking = default;\r\n");
            
            #line default
            #line hidden
            
            #line 52 "CodeGenerator.Object.tt"
  }
    if(IsImplicitArray || IsNotImplicitType)
    { 
            
            #line default
            #line hidden
            
            #line 55 "CodeGenerator.Object.tt"
            this.Write("        this.arrayBacking = ImmutableList<JsonAny>.Empty;\r\n");
            
            #line default
            #line hidden
            
            #line 56 "CodeGenerator.Object.tt"
  } 
            
            #line default
            #line hidden
            
            #line 57 "CodeGenerator.Object.tt"
            this.Write("        this.objectBacking = value;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Conversi" +
                    "on from JsonObject.\r\n    /// </summary>\r\n    /// <param name=\"value\">The value f" +
                    "rom which to convert.</param>\r\n    public static implicit operator ");
            
            #line default
            #line hidden
            
            #line 64 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 64 "CodeGenerator.Object.tt"
            this.Write(@"(JsonObject value)
    {
        if (value.HasDotnetBacking && value.ValueKind == JsonValueKind.Object)
        {
            return new(value.AsPropertyBacking());
        }

        return new(value.AsJsonElement);
    }


    /// <inheritdoc/>
    public ImmutableList<JsonObjectProperty> AsPropertyBacking()
    {
        return this.GetPropertyBacking();
    }

");
            
            #line default
            #line hidden
            
            #line 81 "CodeGenerator.Object.tt"
  if (CanEnumerateObjectAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 83 "CodeGenerator.Object.tt"
            this.Write("    /// <inheritdoc/>\r\n    JsonAny IJsonObject<");
            
            #line default
            #line hidden
            
            #line 84 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 84 "CodeGenerator.Object.tt"
            this.Write(">.this[in JsonPropertyName name]\r\n");
            
            #line default
            #line hidden
            
            #line 85 "CodeGenerator.Object.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 88 "CodeGenerator.Object.tt"
            this.Write("    /// <inheritdoc/>\r\n    public JsonAny this[in JsonPropertyName name]\r\n");
            
            #line default
            #line hidden
            
            #line 90 "CodeGenerator.Object.tt"
  } 
            
            #line default
            #line hidden
            
            #line 91 "CodeGenerator.Object.tt"
            this.Write("    {\r\n        get\r\n        {\r\n");
            
            #line default
            #line hidden
            
            #line 94 "CodeGenerator.Object.tt"
  if (CanEnumerateObjectAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 96 "CodeGenerator.Object.tt"
            this.Write("            if (this.TryGetProperty(name, out ");
            
            #line default
            #line hidden
            
            #line 96 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SinglePropertyDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 96 "CodeGenerator.Object.tt"
            this.Write(" result))\r\n            {\r\n                return result.AsAny;\r\n            }\r\n");
            
            #line default
            #line hidden
            
            #line 100 "CodeGenerator.Object.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 103 "CodeGenerator.Object.tt"
            this.Write("            if (this.TryGetProperty(name, out JsonAny result))\r\n            {\r\n  " +
                    "              return result;\r\n            }\r\n");
            
            #line default
            #line hidden
            
            #line 107 "CodeGenerator.Object.tt"
  } 
            
            #line default
            #line hidden
            
            #line 108 "CodeGenerator.Object.tt"
            this.Write("\r\n            throw new IndexOutOfRangeException();\r\n        }\r\n    }\r\n\r\n    ");
            
            #line default
            #line hidden
            
            #line 113 "CodeGenerator.Object.tt"
  if (CanEnumerateObjectAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 115 "CodeGenerator.Object.tt"
            this.Write("    /// <summary>\r\n    /// Get the property with the given name.\r\n    /// </summa" +
                    "ry>\r\n    public ");
            
            #line default
            #line hidden
            
            #line 118 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SinglePropertyDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 118 "CodeGenerator.Object.tt"
            this.Write(" this[in JsonPropertyName name]\r\n    {\r\n        get\r\n        {\r\n            if (t" +
                    "his.TryGetProperty(name, out ");
            
            #line default
            #line hidden
            
            #line 122 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SinglePropertyDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 122 "CodeGenerator.Object.tt"
            this.Write(" result))\r\n            {\r\n                return result;\r\n            }\r\n\r\n      " +
                    "      throw new IndexOutOfRangeException();\r\n        }\r\n    }\r\n");
            
            #line default
            #line hidden
            
            #line 130 "CodeGenerator.Object.tt"
 } 
            
            #line default
            #line hidden
            
            #line 131 "CodeGenerator.Object.tt"
            this.Write("\r\n");
            
            #line default
            #line hidden
            
            #line 132 "CodeGenerator.Object.tt"
  if (CanEnumerateObjectAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 134 "CodeGenerator.Object.tt"
            this.Write(@"#if NET8_0_OR_GREATER
    /// <summary>
    /// Creates an instance of the type from the given dictionary of properties.
    /// </summary>
    /// <param name=""source"">The dictionary of properties.</param>
    /// <returns>An instance of the type initialized from the dictionary of properties.</returns>
    static ");
            
            #line default
            #line hidden
            
            #line 140 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 140 "CodeGenerator.Object.tt"
            this.Write(" IJsonObject<");
            
            #line default
            #line hidden
            
            #line 140 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 140 "CodeGenerator.Object.tt"
            this.Write(">.FromProperties(IDictionary<JsonPropertyName, JsonAny> source)\r\n    {\r\n        r" +
                    "eturn new(source.Select(kvp => new JsonObjectProperty(kvp.Key, kvp.Value)).ToImm" +
                    "utableList());\r\n    }\r\n#endif\r\n");
            
            #line default
            #line hidden
            
            #line 145 "CodeGenerator.Object.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 148 "CodeGenerator.Object.tt"
            this.Write(@"    /// <summary>
    /// Creates an instance of the type from the given dictionary of properties.
    /// </summary>
    /// <param name=""source"">The dictionary of properties.</param>
    /// <returns>An instance of the type initialized from the dictionary of properties.</returns>
    public static ");
            
            #line default
            #line hidden
            
            #line 153 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 153 "CodeGenerator.Object.tt"
            this.Write(" FromProperties(IDictionary<JsonPropertyName, JsonAny> source)\r\n    {\r\n        re" +
                    "turn new(source.Select(kvp => new JsonObjectProperty(kvp.Key, kvp.Value)).ToImmu" +
                    "tableList());\r\n    }\r\n");
            
            #line default
            #line hidden
            
            #line 157 "CodeGenerator.Object.tt"
  } 
            
            #line default
            #line hidden
            
            #line 158 "CodeGenerator.Object.tt"
            this.Write(@"
    /// <summary>
    /// Creates an instance of the type from the given dictionary of properties.
    /// </summary>
    /// <param name=""source"">The dictionary of properties.</param>
    /// <returns>An instance of the type initialized from the dictionary of properties.</returns>
    public static ");
            
            #line default
            #line hidden
            
            #line 164 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 164 "CodeGenerator.Object.tt"
            this.Write(" FromProperties(ImmutableList<JsonObjectProperty> source)\r\n    {\r\n        return " +
                    "new(source);\r\n    }\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 169 "CodeGenerator.Object.tt"
  if (CanEnumerateObjectAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 171 "CodeGenerator.Object.tt"
            this.Write(@"#if NET8_0_OR_GREATER
    /// <summary>
    /// Creates an instance of the type from the given dictionary of properties.
    /// </summary>
    /// <param name=""source"">The dictionary of properties.</param>
    /// <returns>An instance of the type initialized from the dictionary of properties.</returns>
    static ");
            
            #line default
            #line hidden
            
            #line 177 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 177 "CodeGenerator.Object.tt"
            this.Write(" IJsonObject<");
            
            #line default
            #line hidden
            
            #line 177 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 177 "CodeGenerator.Object.tt"
            this.Write(">.FromProperties(params (JsonPropertyName Name, JsonAny Value)[] source)\r\n    {\r\n" +
                    "        return new(source.Select(s => new JsonObjectProperty(s.Name, s.Value)).T" +
                    "oImmutableList());\r\n    }\r\n#endif\r\n");
            
            #line default
            #line hidden
            
            #line 182 "CodeGenerator.Object.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 185 "CodeGenerator.Object.tt"
            this.Write(@"    /// <summary>
    /// Creates an instance of the type from the given dictionary of properties.
    /// </summary>
    /// <param name=""source"">The dictionary of properties.</param>
    /// <returns>An instance of the type initialized from the dictionary of properties.</returns>
    public static ");
            
            #line default
            #line hidden
            
            #line 190 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 190 "CodeGenerator.Object.tt"
            this.Write(" FromProperties(params (JsonPropertyName Name, JsonAny Value)[] source)\r\n    {\r\n " +
                    "       return new(source.Select(s => new JsonObjectProperty(s.Name, s.Value)).To" +
                    "ImmutableList());\r\n    }\r\n");
            
            #line default
            #line hidden
            
            #line 194 "CodeGenerator.Object.tt"
  } 
            
            #line default
            #line hidden
            
            #line 195 "CodeGenerator.Object.tt"
  if (CanEnumerateObjectAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 197 "CodeGenerator.Object.tt"
            this.Write(@"
    /// <summary>
    /// Creates an instance of the type from the given dictionary of properties.
    /// </summary>
    /// <param name=""source"">The dictionary of properties.</param>
    /// <returns>An instance of the type initialized from the dictionary of properties.</returns>
    public static ");
            
            #line default
            #line hidden
            
            #line 203 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 203 "CodeGenerator.Object.tt"
            this.Write(" FromProperties(IDictionary<JsonPropertyName, ");
            
            #line default
            #line hidden
            
            #line 203 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SinglePropertyDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 203 "CodeGenerator.Object.tt"
            this.Write(@"> source)
    {
        return new(source.Select(kvp => new JsonObjectProperty(kvp.Key, kvp.Value)).ToImmutableList());
    }

    /// <summary>
    /// Creates an instance of the type from the given dictionary of properties.
    /// </summary>
    /// <param name=""source"">The dictionary of properties.</param>
    /// <returns>An instance of the type initialized from the dictionary of properties.</returns>
    public static ");
            
            #line default
            #line hidden
            
            #line 213 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 213 "CodeGenerator.Object.tt"
            this.Write(" FromProperties(params (JsonPropertyName Name, ");
            
            #line default
            #line hidden
            
            #line 213 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SinglePropertyDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 213 "CodeGenerator.Object.tt"
            this.Write(" Value)[] source)\r\n    {\r\n        return new(source.Select(s => new JsonObjectPro" +
                    "perty(s.Name, s.Value.AsAny)).ToImmutableList());\r\n    }\r\n");
            
            #line default
            #line hidden
            
            #line 217 "CodeGenerator.Object.tt"
  } 
            
            #line default
            #line hidden
            
            #line 218 "CodeGenerator.Object.tt"
            this.Write("\r\n");
            
            #line default
            #line hidden
            
            #line 219 "CodeGenerator.Object.tt"
  if (CanEnumerateObjectAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 221 "CodeGenerator.Object.tt"
            this.Write("    /// <inheritdoc/>\r\n    JsonObjectEnumerator IJsonObject<");
            
            #line default
            #line hidden
            
            #line 222 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 222 "CodeGenerator.Object.tt"
            this.Write(">.EnumerateObject()\r\n");
            
            #line default
            #line hidden
            
            #line 223 "CodeGenerator.Object.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 226 "CodeGenerator.Object.tt"
            this.Write("    /// <inheritdoc/>\r\n    public JsonObjectEnumerator EnumerateObject()\r\n");
            
            #line default
            #line hidden
            
            #line 228 "CodeGenerator.Object.tt"
  } 
            
            #line default
            #line hidden
            
            #line 229 "CodeGenerator.Object.tt"
            this.Write(@"    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            return new(this.jsonElementBacking);
        }

        if ((this.backing & Backing.Object) != 0)
        {
            return new(this.objectBacking);
        }

        throw new InvalidOperationException();
    }
");
            
            #line default
            #line hidden
            
            #line 242 "CodeGenerator.Object.tt"
  if (CanEnumerateObjectAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 244 "CodeGenerator.Object.tt"
            this.Write("\r\n    /// <summary>\r\n    /// </summary>\r\n    public JsonObjectEnumerator<");
            
            #line default
            #line hidden
            
            #line 247 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SinglePropertyDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 247 "CodeGenerator.Object.tt"
            this.Write(@"> EnumerateObject()
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            return new(this.jsonElementBacking);
        }

        if ((this.backing & Backing.Object) != 0)
        {
            return new(this.objectBacking);
        }

        throw new InvalidOperationException();
    }
");
            
            #line default
            #line hidden
            
            #line 261 "CodeGenerator.Object.tt"
  } 
            
            #line default
            #line hidden
            
            #line 262 "CodeGenerator.Object.tt"
            this.Write("\r\n    /// <inheritdoc/>\r\n    public bool HasProperties()\r\n    {\r\n        if ((thi" +
                    "s.backing & Backing.Object) != 0)\r\n        {\r\n            return this.objectBack" +
                    "ing.Count > 0;\r\n        }\r\n\r\n        if ((this.backing & Backing.JsonElement) !=" +
                    " 0)\r\n        {\r\n            using JsonElement.ObjectEnumerator enumerator = this" +
                    ".jsonElementBacking.EnumerateObject();\r\n            return enumerator.MoveNext()" +
                    ";\r\n        }\r\n\r\n        throw new InvalidOperationException();\r\n    }\r\n\r\n    ///" +
                    " <inheritdoc/>\r\n    public bool HasProperty(in JsonPropertyName name)\r\n    {\r\n  " +
                    "      if ((this.backing & Backing.JsonElement) != 0)\r\n        {\r\n            ret" +
                    "urn name.TryGetProperty(this.jsonElementBacking, out JsonElement _);\r\n        }\r" +
                    "\n\r\n        if ((this.backing & Backing.Object) != 0)\r\n        {\r\n            ret" +
                    "urn this.objectBacking.ContainsKey(name);\r\n        }\r\n\r\n        throw new Invali" +
                    "dOperationException();\r\n    }\r\n\r\n    /// <inheritdoc/>\r\n    public bool HasPrope" +
                    "rty(string name)\r\n    {\r\n        if ((this.backing & Backing.JsonElement) != 0)\r" +
                    "\n        {\r\n            return this.jsonElementBacking.TryGetProperty(name, out " +
                    "_);\r\n        }\r\n\r\n        if ((this.backing & Backing.Object) != 0)\r\n        {\r\n" +
                    "            return this.objectBacking.ContainsKey(name);\r\n        }\r\n\r\n        t" +
                    "hrow new InvalidOperationException();\r\n    }\r\n\r\n    /// <inheritdoc/>\r\n    publi" +
                    "c bool HasProperty(ReadOnlySpan<char> name)\r\n    {\r\n        if ((this.backing & " +
                    "Backing.JsonElement) != 0)\r\n        {\r\n            return this.jsonElementBackin" +
                    "g.TryGetProperty(name, out _);\r\n        }\r\n\r\n        if ((this.backing & Backing" +
                    ".Object) != 0)\r\n        {\r\n            return this.objectBacking.ContainsKey(nam" +
                    "e);\r\n        }\r\n\r\n        throw new InvalidOperationException();\r\n    }\r\n\r\n    /" +
                    "// <inheritdoc/>\r\n    public bool HasProperty(ReadOnlySpan<byte> utf8Name)\r\n    " +
                    "{\r\n        if ((this.backing & Backing.JsonElement) != 0)\r\n        {\r\n          " +
                    "  return this.jsonElementBacking.TryGetProperty(utf8Name, out _);\r\n        }\r\n\r\n" +
                    "        if ((this.backing & Backing.Object) != 0)\r\n        {\r\n            return" +
                    " this.objectBacking.ContainsKey(utf8Name);\r\n        }\r\n\r\n        throw new Inval" +
                    "idOperationException();\r\n    }\r\n\r\n    /// <inheritdoc/>\r\n");
            
            #line default
            #line hidden
            
            #line 345 "CodeGenerator.Object.tt"
  if (CanEnumerateObjectAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 347 "CodeGenerator.Object.tt"
            this.Write("    bool IJsonObject<");
            
            #line default
            #line hidden
            
            #line 347 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 347 "CodeGenerator.Object.tt"
            this.Write(">.TryGetProperty(in JsonPropertyName name, out JsonAny value)\r\n");
            
            #line default
            #line hidden
            
            #line 348 "CodeGenerator.Object.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 351 "CodeGenerator.Object.tt"
            this.Write("    public bool TryGetProperty(in JsonPropertyName name, out JsonAny value)\r\n");
            
            #line default
            #line hidden
            
            #line 352 "CodeGenerator.Object.tt"
  } 
            
            #line default
            #line hidden
            
            #line 353 "CodeGenerator.Object.tt"
            this.Write(@"    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (name.TryGetProperty(this.jsonElementBacking, out JsonElement result))
            {
                value = new(result);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.TryGetValue(name, out value);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc/>
");
            
            #line default
            #line hidden
            
            #line 375 "CodeGenerator.Object.tt"
  if (CanEnumerateObjectAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 377 "CodeGenerator.Object.tt"
            this.Write("    bool IJsonObject<");
            
            #line default
            #line hidden
            
            #line 377 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 377 "CodeGenerator.Object.tt"
            this.Write(">.TryGetProperty(string name, out JsonAny value)\r\n");
            
            #line default
            #line hidden
            
            #line 378 "CodeGenerator.Object.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 381 "CodeGenerator.Object.tt"
            this.Write("    public bool TryGetProperty(string name, out JsonAny value)\r\n");
            
            #line default
            #line hidden
            
            #line 382 "CodeGenerator.Object.tt"
  } 
            
            #line default
            #line hidden
            
            #line 383 "CodeGenerator.Object.tt"
            this.Write(@"    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement result))
            {
                value = new(result);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.TryGetValue(name, out value);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc/>
");
            
            #line default
            #line hidden
            
            #line 405 "CodeGenerator.Object.tt"
  if (CanEnumerateObjectAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 407 "CodeGenerator.Object.tt"
            this.Write("    bool IJsonObject<");
            
            #line default
            #line hidden
            
            #line 407 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 407 "CodeGenerator.Object.tt"
            this.Write(">.TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)\r\n");
            
            #line default
            #line hidden
            
            #line 408 "CodeGenerator.Object.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 411 "CodeGenerator.Object.tt"
            this.Write("    public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)\r\n");
            
            #line default
            #line hidden
            
            #line 412 "CodeGenerator.Object.tt"
  } 
            
            #line default
            #line hidden
            
            #line 413 "CodeGenerator.Object.tt"
            this.Write(@"    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement result))
            {
                value = new(result);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.TryGetValue(name, out value);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc/>
");
            
            #line default
            #line hidden
            
            #line 435 "CodeGenerator.Object.tt"
  if (CanEnumerateObjectAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 437 "CodeGenerator.Object.tt"
            this.Write("    bool IJsonObject<");
            
            #line default
            #line hidden
            
            #line 437 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 437 "CodeGenerator.Object.tt"
            this.Write(">.TryGetProperty(ReadOnlySpan<byte> utf8Name, out JsonAny value)\r\n");
            
            #line default
            #line hidden
            
            #line 438 "CodeGenerator.Object.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 441 "CodeGenerator.Object.tt"
            this.Write("    public bool TryGetProperty(ReadOnlySpan<byte> utf8Name, out JsonAny value)\r\n");
            
            #line default
            #line hidden
            
            #line 442 "CodeGenerator.Object.tt"
  } 
            
            #line default
            #line hidden
            
            #line 443 "CodeGenerator.Object.tt"
            this.Write(@"    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.TryGetProperty(utf8Name, out JsonElement result))
            {
                value = new(result);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.TryGetValue(utf8Name, out value);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc/>
");
            
            #line default
            #line hidden
            
            #line 465 "CodeGenerator.Object.tt"
  if (CanEnumerateObjectAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 467 "CodeGenerator.Object.tt"
            this.Write("    bool IJsonObject<");
            
            #line default
            #line hidden
            
            #line 467 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 467 "CodeGenerator.Object.tt"
            this.Write(">.TryGetProperty<TValue>(in JsonPropertyName name, out TValue value)\r\n");
            
            #line default
            #line hidden
            
            #line 468 "CodeGenerator.Object.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 471 "CodeGenerator.Object.tt"
            this.Write("    public bool TryGetProperty<TValue>(in JsonPropertyName name, out TValue value" +
                    ")\r\n        where TValue : struct, IJsonValue<TValue>\r\n");
            
            #line default
            #line hidden
            
            #line 473 "CodeGenerator.Object.tt"
  } 
            
            #line default
            #line hidden
            
            #line 474 "CodeGenerator.Object.tt"
            this.Write(@"    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (name.TryGetProperty(this.jsonElementBacking, out JsonElement result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(result);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(result);
#endif
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc/>
");
            
            #line default
            #line hidden
            
            #line 511 "CodeGenerator.Object.tt"
  if (CanEnumerateObjectAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 513 "CodeGenerator.Object.tt"
            this.Write("    bool IJsonObject<");
            
            #line default
            #line hidden
            
            #line 513 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 513 "CodeGenerator.Object.tt"
            this.Write(">.TryGetProperty<TValue>(string name, out TValue value)\r\n");
            
            #line default
            #line hidden
            
            #line 514 "CodeGenerator.Object.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 517 "CodeGenerator.Object.tt"
            this.Write("    public bool TryGetProperty<TValue>(string name, out TValue value)\r\n        wh" +
                    "ere TValue : struct, IJsonValue<TValue>\r\n");
            
            #line default
            #line hidden
            
            #line 519 "CodeGenerator.Object.tt"
  } 
            
            #line default
            #line hidden
            
            #line 520 "CodeGenerator.Object.tt"
            this.Write(@"    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(result);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(result);
#endif
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc/>
");
            
            #line default
            #line hidden
            
            #line 557 "CodeGenerator.Object.tt"
  if (CanEnumerateObjectAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 559 "CodeGenerator.Object.tt"
            this.Write("    bool IJsonObject<");
            
            #line default
            #line hidden
            
            #line 559 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 559 "CodeGenerator.Object.tt"
            this.Write(">.TryGetProperty<TValue>(ReadOnlySpan<char> name, out TValue value)\r\n");
            
            #line default
            #line hidden
            
            #line 560 "CodeGenerator.Object.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 563 "CodeGenerator.Object.tt"
            this.Write("    public bool TryGetProperty<TValue>(ReadOnlySpan<char> name, out TValue value)" +
                    "\r\n        where TValue : struct, IJsonValue<TValue>\r\n");
            
            #line default
            #line hidden
            
            #line 565 "CodeGenerator.Object.tt"
  } 
            
            #line default
            #line hidden
            
            #line 566 "CodeGenerator.Object.tt"
            this.Write(@"    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(result);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(result);
#endif
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc/>
");
            
            #line default
            #line hidden
            
            #line 603 "CodeGenerator.Object.tt"
  if (CanEnumerateObjectAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 605 "CodeGenerator.Object.tt"
            this.Write("    bool IJsonObject<");
            
            #line default
            #line hidden
            
            #line 605 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 605 "CodeGenerator.Object.tt"
            this.Write(">.TryGetProperty<TValue>(ReadOnlySpan<byte> utf8Name, out TValue value)\r\n");
            
            #line default
            #line hidden
            
            #line 606 "CodeGenerator.Object.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 609 "CodeGenerator.Object.tt"
            this.Write("    public bool TryGetProperty<TValue>(ReadOnlySpan<byte> utf8Name, out TValue va" +
                    "lue)\r\n        where TValue : struct, IJsonValue<TValue>\r\n");
            
            #line default
            #line hidden
            
            #line 611 "CodeGenerator.Object.tt"
  } 
            
            #line default
            #line hidden
            
            #line 612 "CodeGenerator.Object.tt"
            this.Write(@"    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.TryGetProperty(utf8Name, out JsonElement result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(result);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(result);
#endif
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(utf8Name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc/>
");
            
            #line default
            #line hidden
            
            #line 649 "CodeGenerator.Object.tt"
  if (CanEnumerateObjectAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 651 "CodeGenerator.Object.tt"
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 651 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 651 "CodeGenerator.Object.tt"
            this.Write(" IJsonObject<");
            
            #line default
            #line hidden
            
            #line 651 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 651 "CodeGenerator.Object.tt"
            this.Write(">.SetProperty<TValue>(in JsonPropertyName name, TValue value)\r\n");
            
            #line default
            #line hidden
            
            #line 652 "CodeGenerator.Object.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 655 "CodeGenerator.Object.tt"
            this.Write("    public ");
            
            #line default
            #line hidden
            
            #line 655 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 655 "CodeGenerator.Object.tt"
            this.Write(" SetProperty<TValue>(in JsonPropertyName name, TValue value)\r\n        where TValu" +
                    "e : struct, IJsonValue\r\n");
            
            #line default
            #line hidden
            
            #line 657 "CodeGenerator.Object.tt"
  } 
            
            #line default
            #line hidden
            
            #line 658 "CodeGenerator.Object.tt"
            this.Write("    {\r\n        return new(this.GetPropertyBackingWith(name, value.AsAny));\r\n    }" +
                    "\r\n");
            
            #line default
            #line hidden
            
            #line 661 "CodeGenerator.Object.tt"
  if (CanEnumerateObjectAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 663 "CodeGenerator.Object.tt"
            this.Write(@"    
    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name=""name"">The name of the property.</param>
    /// <param name=""value"">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref=""InvalidOperationException"">The value is not an object.</exception>
    public bool TryGetProperty(in JsonPropertyName name, out ");
            
            #line default
            #line hidden
            
            #line 671 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SinglePropertyDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 671 "CodeGenerator.Object.tt"
            this.Write(" value)\r\n    {\r\n        if ((this.backing & Backing.JsonElement) != 0)\r\n        {" +
                    "\r\n            if (name.TryGetProperty(this.jsonElementBacking, out JsonElement r" +
                    "esult))\r\n            {\r\n#if NET8_0_OR_GREATER\r\n                value = ");
            
            #line default
            #line hidden
            
            #line 678 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SinglePropertyDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 678 "CodeGenerator.Object.tt"
            this.Write(".FromJson(result);\r\n#else\r\n                value = JsonValueNetStandard20Extensio" +
                    "ns.FromJsonElement<");
            
            #line default
            #line hidden
            
            #line 680 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SinglePropertyDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 680 "CodeGenerator.Object.tt"
            this.Write(@">(result);
#endif
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = ");
            
            #line default
            #line hidden
            
            #line 694 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SinglePropertyDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 694 "CodeGenerator.Object.tt"
            this.Write(".FromAny(result);\r\n#else\r\n                value = result.As<");
            
            #line default
            #line hidden
            
            #line 696 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SinglePropertyDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 696 "CodeGenerator.Object.tt"
            this.Write(@">();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name=""name"">The name of the property.</param>
    /// <param name=""value"">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref=""InvalidOperationException"">The value is not an object.</exception>
    public bool TryGetProperty(string name, out ");
            
            #line default
            #line hidden
            
            #line 715 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SinglePropertyDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 715 "CodeGenerator.Object.tt"
            this.Write(" value)\r\n    {\r\n        if ((this.backing & Backing.JsonElement) != 0)\r\n        {" +
                    "\r\n            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement r" +
                    "esult))\r\n            {\r\n#if NET8_0_OR_GREATER\r\n                value = ");
            
            #line default
            #line hidden
            
            #line 722 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SinglePropertyDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 722 "CodeGenerator.Object.tt"
            this.Write(".FromJson(result);\r\n#else\r\n                value = JsonValueNetStandard20Extensio" +
                    "ns.FromJsonElement<");
            
            #line default
            #line hidden
            
            #line 724 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SinglePropertyDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 724 "CodeGenerator.Object.tt"
            this.Write(@">(result);
#endif
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = ");
            
            #line default
            #line hidden
            
            #line 738 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SinglePropertyDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 738 "CodeGenerator.Object.tt"
            this.Write(".FromAny(result);\r\n#else\r\n                value = result.As<");
            
            #line default
            #line hidden
            
            #line 740 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SinglePropertyDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 740 "CodeGenerator.Object.tt"
            this.Write(@">();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name=""name"">The name of the property.</param>
    /// <param name=""value"">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref=""InvalidOperationException"">The value is not an object.</exception>
    public bool TryGetProperty(ReadOnlySpan<char> name, out ");
            
            #line default
            #line hidden
            
            #line 759 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SinglePropertyDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 759 "CodeGenerator.Object.tt"
            this.Write(" value)\r\n    {\r\n        if ((this.backing & Backing.JsonElement) != 0)\r\n        {" +
                    "\r\n            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement r" +
                    "esult))\r\n            {\r\n#if NET8_0_OR_GREATER\r\n                value = ");
            
            #line default
            #line hidden
            
            #line 766 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SinglePropertyDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 766 "CodeGenerator.Object.tt"
            this.Write(".FromJson(result);\r\n#else\r\n                value = JsonValueNetStandard20Extensio" +
                    "ns.FromJsonElement<");
            
            #line default
            #line hidden
            
            #line 768 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SinglePropertyDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 768 "CodeGenerator.Object.tt"
            this.Write(@">(result);
#endif
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = ");
            
            #line default
            #line hidden
            
            #line 782 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SinglePropertyDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 782 "CodeGenerator.Object.tt"
            this.Write(".FromAny(result);\r\n#else\r\n                value = result.As<");
            
            #line default
            #line hidden
            
            #line 784 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SinglePropertyDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 784 "CodeGenerator.Object.tt"
            this.Write(@">();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name=""utf8Name"">The name of the property as a UTF8 string.</param>
    /// <param name=""value"">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref=""InvalidOperationException"">The value is not an object.</exception>
    public bool TryGetProperty(ReadOnlySpan<byte> utf8Name, out ");
            
            #line default
            #line hidden
            
            #line 803 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SinglePropertyDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 803 "CodeGenerator.Object.tt"
            this.Write(" value)\r\n    {\r\n        if ((this.backing & Backing.JsonElement) != 0)\r\n        {" +
                    "\r\n            if (this.jsonElementBacking.TryGetProperty(utf8Name, out JsonEleme" +
                    "nt result))\r\n            {\r\n#if NET8_0_OR_GREATER\r\n                value = ");
            
            #line default
            #line hidden
            
            #line 810 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SinglePropertyDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 810 "CodeGenerator.Object.tt"
            this.Write(".FromJson(result);\r\n#else\r\n                value = JsonValueNetStandard20Extensio" +
                    "ns.FromJsonElement<");
            
            #line default
            #line hidden
            
            #line 812 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SinglePropertyDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 812 "CodeGenerator.Object.tt"
            this.Write(@">(result);
#endif
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(utf8Name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = ");
            
            #line default
            #line hidden
            
            #line 826 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SinglePropertyDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 826 "CodeGenerator.Object.tt"
            this.Write(".FromAny(result);\r\n#else\r\n                value = result.As<");
            
            #line default
            #line hidden
            
            #line 828 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SinglePropertyDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 828 "CodeGenerator.Object.tt"
            this.Write(@">();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Sets the given property value.
    /// </summary>
    /// <param name=""name"">The name of the property.</param>
    /// <param name=""value"">The value of the property.</param>
    /// <returns>The instance with the property set.</returns>
    public ");
            
            #line default
            #line hidden
            
            #line 846 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 846 "CodeGenerator.Object.tt"
            this.Write(" SetProperty(in JsonPropertyName name, in ");
            
            #line default
            #line hidden
            
            #line 846 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SinglePropertyDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 846 "CodeGenerator.Object.tt"
            this.Write(" value)\r\n    {\r\n        return new(this.GetPropertyBackingWith(name, value.AsAny)" +
                    ");\r\n    }\r\n");
            
            #line default
            #line hidden
            
            #line 850 "CodeGenerator.Object.tt"
  } 
            
            #line default
            #line hidden
            
            #line 851 "CodeGenerator.Object.tt"
            this.Write("\r\n    /// <inheritdoc/>\r\n    public ");
            
            #line default
            #line hidden
            
            #line 853 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 853 "CodeGenerator.Object.tt"
            this.Write(" RemoveProperty(in JsonPropertyName name)\r\n    {\r\n        return new(this.GetProp" +
                    "ertyBackingWithout(name));\r\n    }\r\n\r\n    /// <inheritdoc/>\r\n    public ");
            
            #line default
            #line hidden
            
            #line 859 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 859 "CodeGenerator.Object.tt"
            this.Write(" RemoveProperty(string name)\r\n    {\r\n        return new(this.GetPropertyBackingWi" +
                    "thout(name));\r\n    }\r\n\r\n    /// <inheritdoc/>\r\n    public ");
            
            #line default
            #line hidden
            
            #line 865 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 865 "CodeGenerator.Object.tt"
            this.Write(" RemoveProperty(ReadOnlySpan<char> name)\r\n    {\r\n        return new(this.GetPrope" +
                    "rtyBackingWithout(name));\r\n    }\r\n\r\n    /// <inheritdoc/>\r\n    public ");
            
            #line default
            #line hidden
            
            #line 871 "CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 871 "CodeGenerator.Object.tt"
            this.Write(" RemoveProperty(ReadOnlySpan<byte> utf8Name)\r\n    {\r\n        return new(this.GetP" +
                    "ropertyBackingWithout(utf8Name));\r\n    }\r\n\r\n    /// <summary>\r\n    /// Builds an" +
                    " <see cref=\"ImmutableList{JsonObjectProperty}\"/> from the object.\r\n    /// </sum" +
                    "mary>\r\n    /// <returns>An immutable list of <see cref=\"JsonAny\"/> built from th" +
                    "e array.</returns>\r\n    /// <exception cref=\"InvalidOperationException\">The valu" +
                    "e is not an array.</exception>\r\n    private ImmutableList<JsonObjectProperty> Ge" +
                    "tPropertyBacking()\r\n    {\r\n        if ((this.backing & Backing.Object) != 0)\r\n  " +
                    "      {\r\n            return this.objectBacking;\r\n        }\r\n\r\n        return Pro" +
                    "pertyBackingBuilders.GetPropertyBackingBuilder(this.jsonElementBacking).ToImmuta" +
                    "ble();\r\n    }\r\n\r\n    /// <summary>\r\n    /// Builds an <see cref=\"ImmutableList{J" +
                    "sonObjectProperty}\"/> from the object, without a specific property.\r\n    /// </s" +
                    "ummary>\r\n    /// <returns>An immutable dictionary builder of <see cref=\"JsonProp" +
                    "ertyName\"/> to <see cref=\"JsonAny\"/>, built from the existing object, without th" +
                    "e given property.</returns>\r\n    /// <exception cref=\"InvalidOperationException\"" +
                    ">The value is not an object.</exception>\r\n    private ImmutableList<JsonObjectPr" +
                    "operty> GetPropertyBackingWithout(in JsonPropertyName name)\r\n    {\r\n        if (" +
                    "(this.backing & Backing.Object) != 0)\r\n        {\r\n            return this.object" +
                    "Backing.Remove(name);\r\n        }\r\n\r\n        return PropertyBackingBuilders.GetPr" +
                    "opertyBackingBuilderWithout(this.jsonElementBacking, name).ToImmutable();\r\n    }" +
                    "\r\n\r\n    /// <summary>\r\n    /// Builds an <see cref=\"ImmutableList{JsonObjectProp" +
                    "erty}\"/> from the object, without a specific property.\r\n    /// </summary>\r\n    " +
                    "/// <returns>An immutable dictionary builder of <see cref=\"JsonPropertyName\"/> t" +
                    "o <see cref=\"JsonAny\"/>, built from the existing object, without the given prope" +
                    "rty.</returns>\r\n    /// <exception cref=\"InvalidOperationException\">The value is" +
                    " not an object.</exception>\r\n    private ImmutableList<JsonObjectProperty> GetPr" +
                    "opertyBackingWithout(ReadOnlySpan<char> name)\r\n    {\r\n        if ((this.backing " +
                    "& Backing.Object) != 0)\r\n        {\r\n            return this.objectBacking.Remove" +
                    "(name);\r\n        }\r\n\r\n        return PropertyBackingBuilders.GetPropertyBackingB" +
                    "uilderWithout(this.jsonElementBacking, name).ToImmutable();\r\n    }\r\n\r\n    /// <s" +
                    "ummary>\r\n    /// Builds an <see cref=\"ImmutableList{JsonObjectProperty}\"/> from " +
                    "the object, without a specific property.\r\n    /// </summary>\r\n    /// <returns>A" +
                    "n immutable dictionary builder of <see cref=\"JsonPropertyName\"/> to <see cref=\"J" +
                    "sonAny\"/>, built from the existing object, without the given property.</returns>" +
                    "\r\n    /// <exception cref=\"InvalidOperationException\">The value is not an object" +
                    ".</exception>\r\n    private ImmutableList<JsonObjectProperty> GetPropertyBackingW" +
                    "ithout(ReadOnlySpan<byte> name)\r\n    {\r\n        if ((this.backing & Backing.Obje" +
                    "ct) != 0)\r\n        {\r\n            return this.objectBacking.Remove(name);\r\n     " +
                    "   }\r\n\r\n        return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(" +
                    "this.jsonElementBacking, name).ToImmutable();\r\n    }\r\n\r\n    /// <summary>\r\n    /" +
                    "// Builds an <see cref=\"ImmutableList{JsonObjectProperty}\"/> from the object, wi" +
                    "thout a specific property.\r\n    /// </summary>\r\n    /// <returns>An immutable di" +
                    "ctionary builder of <see cref=\"JsonPropertyName\"/> to <see cref=\"JsonAny\"/>, bui" +
                    "lt from the existing object, without the given property.</returns>\r\n    /// <exc" +
                    "eption cref=\"InvalidOperationException\">The value is not an object.</exception>\r" +
                    "\n    private ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(string " +
                    "name)\r\n    {\r\n        if ((this.backing & Backing.Object) != 0)\r\n        {\r\n    " +
                    "        return this.objectBacking.Remove(name);\r\n        }\r\n\r\n        return Pro" +
                    "pertyBackingBuilders.GetPropertyBackingBuilderWithout(this.jsonElementBacking, n" +
                    "ame).ToImmutable();\r\n    }\r\n\r\n    /// <summary>\r\n    /// Builds an <see cref=\"Im" +
                    "mutableList{JsonObjectProperty}\"/> from the object, without a specific property." +
                    "\r\n    /// </summary>\r\n    /// <returns>An immutable dictionary builder of <see c" +
                    "ref=\"JsonPropertyName\"/> to <see cref=\"JsonAny\"/>, built from the existing objec" +
                    "t, without the given property.</returns>\r\n    /// <exception cref=\"InvalidOperat" +
                    "ionException\">The value is not an object.</exception>\r\n    private ImmutableList" +
                    "<JsonObjectProperty> GetPropertyBackingWith(in JsonPropertyName name, in JsonAny" +
                    " value)\r\n    {\r\n        if ((this.backing & Backing.Object) != 0)\r\n        {\r\n  " +
                    "          return this.objectBacking.SetItem(name, value);\r\n        }\r\n\r\n        " +
                    "ImmutableList<JsonObjectProperty>.Builder result = PropertyBackingBuilders.GetPr" +
                    "opertyBackingBuilderReplacing(this.jsonElementBacking, name, value);\r\n        re" +
                    "turn result.ToImmutable();\r\n    }\r\n}\r\n");
            
            #line default
            #line hidden
            
            #line 967 "CodeGenerator.Object.tt"
 EndNesting(); 
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class CodeGeneratorObjectBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
