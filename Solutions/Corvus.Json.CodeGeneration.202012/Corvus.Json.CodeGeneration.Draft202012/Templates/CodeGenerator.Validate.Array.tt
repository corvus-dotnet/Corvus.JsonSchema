<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Corvus.Json" #>
<#
    // This is only emitted if (HasItems || HasContains || HasUniqueItems || HasMaxItems || HasMinItems || HasUnevaluatedItems || HasPrefixItems) is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.Validate.Array should not be emitted if (HasItems || HasContains || HasUniqueItems || HasMaxItems || HasMinItems || HasUnevaluatedItems || HasPrefixItems) is false.");
    } #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Text.Json;
using Corvus.Json;

namespace <#= Namespace #>;

<# BeginNesting(); #>
<#= FormattedTypeDocumentation #>
public readonly partial struct <#= TypeDeclaration.DotnetTypeName #>
{
    private ValidationContext ValidateArray(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
    {
        ValidationContext result = validationContext;

        if (valueKind != JsonValueKind.Array)
        {
            return result;
        }
<#  if (HasItems || HasContains || HasUniqueItems || HasUnevaluatedItems || HasPrefixItems)
    { #>

        int arrayLength = 0;
<#  }
    else
    { #>
        int arrayLength = this.GetArrayLength();
<#  }
    if (HasContains)
    { #>
        int containsCount = 0;
<#  }
    if (HasItems || HasContains || HasUniqueItems || HasUnevaluatedItems || HasPrefixItems)
    { #>

<#  if (!CanEnumerateAsSpecificType)
    { #>

        using JsonArrayEnumerator arrayEnumerator = this.EnumerateArray();
<#  }
    else
    { #>

        using JsonArrayEnumerator<<#= SingleItemsDotnetTypeName #>> arrayEnumerator = this.EnumerateArray();
<#  } #>

        while (arrayEnumerator.MoveNext())
        {
            if (level > ValidationLevel.Basic)
            {
                result = result.PushDocumentArrayIndex(arrayLength);
            }

<#      if (HasUniqueItems)
        { #>
<#  if (!CanEnumerateAsSpecificType)
    { #>

            using JsonArrayEnumerator innerEnumerator = this.EnumerateArray();
<#  }
    else
    { #>

            using JsonArrayEnumerator<<#= SingleItemsDotnetTypeName #>> innerEnumerator = this.EnumerateArray();
<#  } #>
            int innerIndex = -1;
            while (innerIndex < arrayLength && innerEnumerator.MoveNext())
            {
                innerIndex++;
            }

            while (innerEnumerator.MoveNext())
            {
                if (innerEnumerator.Current.Equals(arrayEnumerator.Current))
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $"6.4.3. uniqueItems - duplicate items were found at indices {arrayLength} and {innerIndex}.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "6.4.3. uniqueItems - duplicate items were found.");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }
                }
            }
<#      }
        if (HasContains)
        { #>
            ValidationContext containsResult = arrayEnumerator.Current.As<<#= ContainsDotnetTypeName #>>().Validate(result.CreateChildContext(), level);
            if (containsResult.IsValid)
            {
                result = result.WithLocalItemIndex(arrayLength);
                containsCount++;
<#          if (HasMaxContains && !HasUnevaluatedItems)
            { #>
                if (level == ValidationLevel.Flag && containsCount > <#=  MaxContains #>)
                {
                    return result.WithResult(isValid: false);
                }
<#          } #>
            }
<#      }
        if (HasSingleItemsType && !HasPrefixItems)
        { #>

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationProperty("items");
            }

            result = arrayEnumerator.Current.Validate(result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation(); // items
            }

            result = result.WithLocalItemIndex(arrayLength);
<#      }
        else if (HasPrefixItems)
        {
            int itemsIndex = 0; #>

            switch (arrayLength)
            {
<#          if (HasPrefixItems)
            {
                foreach (var prefixItem in PrefixItems)
                { #>
                case <#= itemsIndex #>:
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationProperty("prefixItems");
                    }

                    result = arrayEnumerator.Current.As<<#= prefixItem #>>().Validate(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation(); // prefixItems
                    }

                    result = result.WithLocalItemIndex(arrayLength);
                    break;
<#                  itemsIndex++;
                }
            }#>
                default:
<#          if (HasSingleItemsType)
            { #>
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationProperty("items");
                    }

                    result = arrayEnumerator.Current.Validate(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation(); // prefixItems
                    }

                    result = result.WithLocalItemIndex(arrayLength);
<#          }
            else if (HasUnevaluatedItems)
            { #>
                    if (!result.HasEvaluatedLocalOrAppliedItemIndex(arrayLength))
                    {
                        if (level > ValidationLevel.Basic)
                        {
                            result = result.PushValidationLocationProperty("unevaluatedItems");
                        }

                        result = arrayEnumerator.Current.As<<#= UnevaluatedItemsDotnetTypeName #>>().Validate(result, level);

                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        if (level > ValidationLevel.Basic)
                        {
                            result = result.PopLocation(); // unevaluatedItems
                        }

                        result = result.WithLocalItemIndex(arrayLength);
                    }
<#          } #>
                    break;
            }
<#      }
        else if (HasUnevaluatedItems)
        { #>

            if (!result.HasEvaluatedLocalOrAppliedItemIndex(arrayLength))
            {
                if (level > ValidationLevel.Basic)
                {
                    result = result.PushValidationLocationProperty("unevaluatedItems");
                }

                result = arrayEnumerator.Current.As<<#= UnevaluatedItemsDotnetTypeName #>>().Validate(result, level);

                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                if (level > ValidationLevel.Basic)
                {
                    result = result.PopLocation(); // unevaluatedItems
                }

                result = result.WithLocalItemIndex(arrayLength);
            }
<#      } #>

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation(); // array index
            }

            arrayLength++;
        }
<#  }
    if (HasMaxItems)
    { #>

        if (arrayLength > <#= MaxItems #>)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, $"6.4.1. maxItems - {arrayLength} exceeds maximum number of items <#= MaxItems #>.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "6.4.1. maxItems - item count exceeds maximum number of items <#= MaxItems #>.");
            }
            else
            {
                return result.WithResult(isValid: false);
            }
        }
<#  }
    if (HasMinItems)
    { #>

        if (arrayLength < <#= MinItems #>)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, $"6.4.2. minItems - {arrayLength} is less than the minimum number of items <#= MinItems #>.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "6.4.2. minItems - item count is less than the minimum number of items <#= MinItems #>.");
            }
            else
            {
                return result.WithResult(isValid: false);
            }
        }
<#  }
    if (HasContains)
    {
        if (HasMaxContains)
        { #>

        if (containsCount > <#= MaxContains #>)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, $"6.4.4. maxContains - {containsCount} exceeds maximum number of matching items <#=     MaxContains #>.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "6.4.4. maxContains - item count exceeds maximum number of matching items <#=     MaxContains #>.");
            }
            else
            {
                return result.WithResult(isValid: false);
            }
        }
<#      }
        if (HasMinContains)
        { #>

        if (containsCount < <#= MinContains #>)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, $"6.4.5. minContains - {containsCount} is less than minimum number of matching items <#=     MinContains #>.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "6.4.5. minContains - item count is less than minimum number of matching items <#=     MinContains #>.");
            }
            else
            {
                return result.WithResult(isValid: false);
            }
        }
<#      }
        else
        { #>

        if (containsCount == 0)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, $"10.3.1.3. contains - no items found matching the required schema.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "10.3.1.3. contains - no items found matching the required schema.");
            }
            else
            {
                return result.WithResult(isValid: false);
            }
        }
<#      }
    } #>
        return result;
    }
}
<# EndNesting(); #>
<#+
    public bool ShouldGenerate
    {
        get
        {
            return HasItems || HasContains || HasUniqueItems || HasMaxItems || HasMinItems || HasUnevaluatedItems || HasPrefixItems;
        }
    }
#>