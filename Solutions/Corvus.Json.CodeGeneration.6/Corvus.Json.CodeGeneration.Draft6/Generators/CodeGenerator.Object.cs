//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:7.0.11
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Corvus.Json.CodeGeneration.Generators.Draft6 {
    using System.Collections.Generic;
    using Corvus.Json;
    using System;
    
    
    public partial class CodeGeneratorObject : CodeGeneratorObjectBase {
        
        
        #line 577 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"

    public bool ShouldGenerate
    {
        get
        {
            return IsImplicitObject || IsNotImplicitType;
        }
    }

        #line default
        #line hidden
        
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 4 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"

    // This is only emitted if IsImplicitObject is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.Object should not be emitted if IsImplicitObject is false.");
    } 
            
            #line default
            #line hidden
            
            #line 10 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace ");
            
            #line default
            #line hidden
            
            #line 27 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Namespace ));
            
            #line default
            #line hidden
            
            #line 27 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(";\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 29 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
 BeginNesting(); 
            
            #line default
            #line hidden
            
            #line 30 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write("/// <summary>\r\n/// A type generated from a JsonSchema specification.\r\n/// </summa" +
                    "ry>\r\npublic readonly partial struct ");
            
            #line default
            #line hidden
            
            #line 33 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 33 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(" : IJsonObject<");
            
            #line default
            #line hidden
            
            #line 33 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 33 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(">\r\n{\r\n    /// <summary>\r\n    /// Initializes a new instance of the <see cref=\"");
            
            #line default
            #line hidden
            
            #line 36 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 36 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write("\"/> struct.\r\n    /// </summary>\r\n    /// <param name=\"value\">The value from which" +
                    " to construct the instance.</param>\r\n    public ");
            
            #line default
            #line hidden
            
            #line 39 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 39 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write("(ImmutableList<JsonObjectProperty> value)\r\n    {\r\n        this.jsonElementBacking" +
                    " = default;\r\n        this.backing = Backing.Object;\r\n");
            
            #line default
            #line hidden
            
            #line 43 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
  if(IsImplicitString || IsNotImplicitType)
    { 
            
            #line default
            #line hidden
            
            #line 45 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write("        this.stringBacking = string.Empty;\r\n");
            
            #line default
            #line hidden
            
            #line 46 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
  }
    if(IsImplicitBoolean || IsNotImplicitType)
    { 
            
            #line default
            #line hidden
            
            #line 49 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write("        this.boolBacking = default;\r\n");
            
            #line default
            #line hidden
            
            #line 50 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
  }
    if(IsImplicitNumber || IsNotImplicitType)
    { 
            
            #line default
            #line hidden
            
            #line 53 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write("        this.numberBacking = default;\r\n");
            
            #line default
            #line hidden
            
            #line 54 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
  }
    if(IsImplicitArray || IsNotImplicitType)
    { 
            
            #line default
            #line hidden
            
            #line 57 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write("        this.arrayBacking = ImmutableList<JsonAny>.Empty;\r\n");
            
            #line default
            #line hidden
            
            #line 58 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
  } 
            
            #line default
            #line hidden
            
            #line 59 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(@"        this.objectBacking = value;
    }

    /// <inheritdoc/>
    public ImmutableList<JsonObjectProperty> AsImmutableList()
    {
        return this.GetPropertyBacking();
    }

    /// <inheritdoc/>
    public ImmutableList<JsonObjectProperty>.Builder AsImmutableListBuilder()
    {
        return this.GetPropertyBackingBuilder();
    }

    /// <inheritdoc/>
    public JsonAny this[in JsonPropertyName name]
    {
        get
        {
            if (this.TryGetProperty(name, out JsonAny result))
            {
                return result;
            }

            throw new IndexOutOfRangeException();
        }
    }

    /// <summary>
    /// Conversion from JsonObject.
    /// </summary>
    /// <param name=""value"">The value from which to convert.</param>
    public static implicit operator JsonObject(");
            
            #line default
            #line hidden
            
            #line 92 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 92 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(" value)\r\n    {\r\n        return JsonObject.FromObject(value);\r\n    }\r\n\r\n    /// <s" +
                    "ummary>\r\n    /// Conversion to JsonObject.\r\n    /// </summary>\r\n    /// <param n" +
                    "ame=\"value\">The value from which to convert.</param>\r\n    public static implicit" +
                    " operator ");
            
            #line default
            #line hidden
            
            #line 101 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 101 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(@"(JsonObject value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return new(value.AsImmutableList());
    }

    /// <summary>
    /// Creates an instance of the type from the given dictionary of properties.
    /// </summary>
    /// <param name=""source"">The dictionary of properties.</param>
    /// <returns>An instance of the type initialized from the dictionary of properties.</returns>
    public static ");
            
            #line default
            #line hidden
            
            #line 116 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 116 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(@" FromProperties(IDictionary<JsonPropertyName, JsonAny> source)
    {
        return new(source.Select(kvp => new JsonObjectProperty(kvp.Key, kvp.Value)).ToImmutableList());
    }

    /// <summary>
    /// Creates an instance of the type from the given dictionary of properties.
    /// </summary>
    /// <param name=""source"">The dictionary of properties.</param>
    /// <returns>An instance of the type initialized from the dictionary of properties.</returns>
    public static ");
            
            #line default
            #line hidden
            
            #line 126 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 126 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(@" FromProperties(ImmutableList<JsonObjectProperty> source)
    {
        return new(source);
    }

    /// <summary>
    /// Creates an instance of the type from the given dictionary of properties.
    /// </summary>
    /// <param name=""source"">The dictionary of properties.</param>
    /// <returns>An instance of the type initialized from the dictionary of properties.</returns>
    public static ");
            
            #line default
            #line hidden
            
            #line 136 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 136 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(" FromProperties(params (JsonPropertyName Name, JsonAny Value)[] source)\r\n    {\r\n " +
                    "       return new(source.Select(s => new JsonObjectProperty(s.Name, s.Value)).To" +
                    "ImmutableList());\r\n    }\r\n\r\n    /// <inheritdoc/>\r\n    public JsonObjectEnumerat" +
                    "or EnumerateObject()\r\n    {\r\n        if ((this.backing & Backing.JsonElement) !=" +
                    " 0)\r\n        {\r\n            return new(this.jsonElementBacking);\r\n        }\r\n\r\n " +
                    "       if ((this.backing & Backing.Object) != 0)\r\n        {\r\n            return " +
                    "new(this.objectBacking);\r\n        }\r\n\r\n        throw new InvalidOperationExcepti" +
                    "on();\r\n    }\r\n\r\n    /// <inheritdoc/>\r\n    public bool HasProperties()\r\n    {\r\n " +
                    "       if ((this.backing & Backing.Object) != 0)\r\n        {\r\n            return " +
                    "this.objectBacking.Count > 0;\r\n        }\r\n\r\n        if ((this.backing & Backing." +
                    "JsonElement) != 0)\r\n        {\r\n            using JsonElement.ObjectEnumerator en" +
                    "umerator = this.jsonElementBacking.EnumerateObject();\r\n            return enumer" +
                    "ator.MoveNext();\r\n        }\r\n\r\n        throw new InvalidOperationException();\r\n " +
                    "   }\r\n\r\n    /// <inheritdoc/>\r\n    public bool HasProperty(in JsonPropertyName n" +
                    "ame)\r\n    {\r\n        if ((this.backing & Backing.JsonElement) != 0)\r\n        {\r\n" +
                    "            return name.TryGetProperty(this.jsonElementBacking, out JsonElement " +
                    "_);\r\n        }\r\n\r\n        if ((this.backing & Backing.Object) != 0)\r\n        {\r\n" +
                    "            return this.objectBacking.ContainsKey(name);\r\n        }\r\n\r\n        t" +
                    "hrow new InvalidOperationException();\r\n    }\r\n\r\n    /// <inheritdoc/>\r\n    publi" +
                    "c bool HasProperty(string name)\r\n    {\r\n        if ((this.backing & Backing.Json" +
                    "Element) != 0)\r\n        {\r\n            return this.jsonElementBacking.TryGetProp" +
                    "erty(name, out _);\r\n        }\r\n\r\n        if ((this.backing & Backing.Object) != " +
                    "0)\r\n        {\r\n            return this.objectBacking.ContainsKey(name);\r\n       " +
                    " }\r\n\r\n        throw new InvalidOperationException();\r\n    }\r\n\r\n    /// <inheritd" +
                    "oc/>\r\n    public bool HasProperty(ReadOnlySpan<char> name)\r\n    {\r\n        if ((" +
                    "this.backing & Backing.JsonElement) != 0)\r\n        {\r\n            return this.js" +
                    "onElementBacking.TryGetProperty(name, out _);\r\n        }\r\n\r\n        if ((this.ba" +
                    "cking & Backing.Object) != 0)\r\n        {\r\n            return this.objectBacking." +
                    "ContainsKey(name);\r\n        }\r\n\r\n        throw new InvalidOperationException();\r" +
                    "\n    }\r\n\r\n    /// <inheritdoc/>\r\n    public bool HasProperty(ReadOnlySpan<byte> " +
                    "utf8Name)\r\n    {\r\n        if ((this.backing & Backing.JsonElement) != 0)\r\n      " +
                    "  {\r\n            return this.jsonElementBacking.TryGetProperty(utf8Name, out _);" +
                    "\r\n        }\r\n\r\n        if ((this.backing & Backing.Object) != 0)\r\n        {\r\n   " +
                    "         return this.objectBacking.ContainsKey(utf8Name);\r\n        }\r\n\r\n        " +
                    "throw new InvalidOperationException();\r\n    }\r\n\r\n    /// <inheritdoc/>\r\n    publ" +
                    "ic bool TryGetProperty(in JsonPropertyName name, out JsonAny value)\r\n    {\r\n    " +
                    "    if ((this.backing & Backing.JsonElement) != 0)\r\n        {\r\n            if (t" +
                    "his.jsonElementBacking.TryGetProperty((string)name, out JsonElement result))\r\n  " +
                    "          {\r\n                value = new(result);\r\n                return true;\r" +
                    "\n            }\r\n\r\n            value = default;\r\n            return false;\r\n     " +
                    "   }\r\n\r\n        if ((this.backing & Backing.Object) != 0)\r\n        {\r\n          " +
                    "  return this.objectBacking.TryGetValue(name, out value);\r\n        }\r\n\r\n        " +
                    "throw new InvalidOperationException();\r\n    }\r\n\r\n    /// <inheritdoc/>\r\n    publ" +
                    "ic bool TryGetProperty(string name, out JsonAny value)\r\n    {\r\n        if ((this" +
                    ".backing & Backing.JsonElement) != 0)\r\n        {\r\n            if (this.jsonEleme" +
                    "ntBacking.TryGetProperty(name, out JsonElement result))\r\n            {\r\n        " +
                    "        value = new(result);\r\n                return true;\r\n            }\r\n\r\n   " +
                    "         value = default;\r\n            return false;\r\n        }\r\n\r\n        if ((" +
                    "this.backing & Backing.Object) != 0)\r\n        {\r\n            return this.objectB" +
                    "acking.TryGetValue(name, out value);\r\n        }\r\n\r\n        throw new InvalidOper" +
                    "ationException();\r\n    }\r\n\r\n    /// <inheritdoc/>\r\n    public bool TryGetPropert" +
                    "y(ReadOnlySpan<char> name, out JsonAny value)\r\n    {\r\n        if ((this.backing " +
                    "& Backing.JsonElement) != 0)\r\n        {\r\n            if (this.jsonElementBacking" +
                    ".TryGetProperty(name, out JsonElement result))\r\n            {\r\n                v" +
                    "alue = new(result);\r\n                return true;\r\n            }\r\n\r\n            " +
                    "value = default;\r\n            return false;\r\n        }\r\n\r\n        if ((this.back" +
                    "ing & Backing.Object) != 0)\r\n        {\r\n            return this.objectBacking.Tr" +
                    "yGetValue(name, out value);\r\n        }\r\n\r\n        throw new InvalidOperationExce" +
                    "ption();\r\n    }\r\n\r\n    /// <inheritdoc/>\r\n    public bool TryGetProperty(ReadOnl" +
                    "ySpan<byte> utf8Name, out JsonAny value)\r\n    {\r\n        if ((this.backing & Bac" +
                    "king.JsonElement) != 0)\r\n        {\r\n            if (this.jsonElementBacking.TryG" +
                    "etProperty(utf8Name, out JsonElement result))\r\n            {\r\n                va" +
                    "lue = new(result);\r\n                return true;\r\n            }\r\n\r\n            v" +
                    "alue = default;\r\n            return false;\r\n        }\r\n\r\n        if ((this.backi" +
                    "ng & Backing.Object) != 0)\r\n        {\r\n            return this.objectBacking.Try" +
                    "GetValue(utf8Name, out value);\r\n        }\r\n\r\n        throw new InvalidOperationE" +
                    "xception();\r\n    }\r\n\r\n    /// <inheritdoc/>\r\n    public bool TryGetProperty<TVal" +
                    "ue>(in JsonPropertyName name, out TValue value)\r\n        where TValue : struct, " +
                    "IJsonValue<TValue>\r\n    {\r\n        if ((this.backing & Backing.JsonElement) != 0" +
                    ")\r\n        {\r\n            if (this.jsonElementBacking.TryGetProperty((string)nam" +
                    "e, out JsonElement result))\r\n            {\r\n                value = TValue.FromJ" +
                    "son(result);\r\n                return true;\r\n            }\r\n\r\n            value =" +
                    " default;\r\n            return false;\r\n        }\r\n\r\n        if ((this.backing & B" +
                    "acking.Object) != 0)\r\n        {\r\n            if (this.objectBacking.TryGetValue(" +
                    "name, out JsonAny result))\r\n            {\r\n                value = TValue.FromAn" +
                    "y(result);\r\n                return true;\r\n            }\r\n\r\n            value = d" +
                    "efault;\r\n            return false;\r\n        }\r\n\r\n        throw new InvalidOperat" +
                    "ionException();\r\n    }\r\n\r\n    /// <inheritdoc/>\r\n    public bool TryGetProperty<" +
                    "TValue>(string name, out TValue value)\r\n        where TValue : struct, IJsonValu" +
                    "e<TValue>\r\n    {\r\n        if ((this.backing & Backing.JsonElement) != 0)\r\n      " +
                    "  {\r\n            if (this.jsonElementBacking.TryGetProperty(name, out JsonElemen" +
                    "t result))\r\n            {\r\n                value = TValue.FromJson(result);\r\n   " +
                    "             return true;\r\n            }\r\n\r\n            value = default;\r\n      " +
                    "      return false;\r\n        }\r\n\r\n        if ((this.backing & Backing.Object) !=" +
                    " 0)\r\n        {\r\n            if (this.objectBacking.TryGetValue(name, out JsonAny" +
                    " result))\r\n            {\r\n                value = TValue.FromAny(result);\r\n     " +
                    "           return true;\r\n            }\r\n\r\n            value = default;\r\n        " +
                    "    return false;\r\n        }\r\n\r\n        throw new InvalidOperationException();\r\n" +
                    "    }\r\n\r\n    /// <inheritdoc/>\r\n    public bool TryGetProperty<TValue>(ReadOnlyS" +
                    "pan<char> name, out TValue value)\r\n        where TValue : struct, IJsonValue<TVa" +
                    "lue>\r\n    {\r\n        if ((this.backing & Backing.JsonElement) != 0)\r\n        {\r\n" +
                    "            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement res" +
                    "ult))\r\n            {\r\n                value = TValue.FromJson(result);\r\n        " +
                    "        return true;\r\n            }\r\n\r\n            value = default;\r\n           " +
                    " return false;\r\n        }\r\n\r\n        if ((this.backing & Backing.Object) != 0)\r\n" +
                    "        {\r\n            if (this.objectBacking.TryGetValue(name, out JsonAny resu" +
                    "lt))\r\n            {\r\n                value = TValue.FromAny(result);\r\n          " +
                    "      return true;\r\n            }\r\n\r\n            value = default;\r\n            r" +
                    "eturn false;\r\n        }\r\n\r\n        throw new InvalidOperationException();\r\n    }" +
                    "\r\n\r\n    /// <inheritdoc/>\r\n    public bool TryGetProperty<TValue>(ReadOnlySpan<b" +
                    "yte> utf8Name, out TValue value)\r\n        where TValue : struct, IJsonValue<TVal" +
                    "ue>\r\n    {\r\n        if ((this.backing & Backing.JsonElement) != 0)\r\n        {\r\n " +
                    "           if (this.jsonElementBacking.TryGetProperty(utf8Name, out JsonElement " +
                    "result))\r\n            {\r\n                value = TValue.FromJson(result);\r\n     " +
                    "           return true;\r\n            }\r\n\r\n            value = default;\r\n        " +
                    "    return false;\r\n        }\r\n\r\n        if ((this.backing & Backing.Object) != 0" +
                    ")\r\n        {\r\n            if (this.objectBacking.TryGetValue(utf8Name, out JsonA" +
                    "ny result))\r\n            {\r\n                value = TValue.FromAny(result);\r\n   " +
                    "             return true;\r\n            }\r\n\r\n            value = default;\r\n      " +
                    "      return false;\r\n        }\r\n\r\n        throw new InvalidOperationException();" +
                    "\r\n    }\r\n\r\n    /// <inheritdoc/>\r\n    public ");
            
            #line default
            #line hidden
            
            #line 455 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 455 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(" SetProperty<TValue>(in JsonPropertyName name, TValue value)\r\n        where TValu" +
                    "e : struct, IJsonValue\r\n    {\r\n        return new(this.GetPropertyBackingWith(na" +
                    "me, value.AsAny));\r\n    }\r\n\r\n    /// <inheritdoc/>\r\n    public ");
            
            #line default
            #line hidden
            
            #line 462 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 462 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(" RemoveProperty(in JsonPropertyName name)\r\n    {\r\n        return new(this.GetProp" +
                    "ertyBackingWithout(name));\r\n    }\r\n\r\n    /// <inheritdoc/>\r\n    public ");
            
            #line default
            #line hidden
            
            #line 468 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 468 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(" RemoveProperty(string name)\r\n    {\r\n        return new(this.GetPropertyBackingWi" +
                    "thout(name));\r\n    }\r\n\r\n    /// <inheritdoc/>\r\n    public ");
            
            #line default
            #line hidden
            
            #line 474 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 474 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(" RemoveProperty(ReadOnlySpan<char> name)\r\n    {\r\n        return new(this.GetPrope" +
                    "rtyBackingWithout(name));\r\n    }\r\n\r\n    /// <inheritdoc/>\r\n    public ");
            
            #line default
            #line hidden
            
            #line 480 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 480 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
            this.Write(" RemoveProperty(ReadOnlySpan<byte> utf8Name)\r\n    {\r\n        return new(this.GetP" +
                    "ropertyBackingWithout(utf8Name));\r\n    }\r\n\r\n    /// <summary>\r\n    /// Builds an" +
                    " <see cref=\"ImmutableList{JsonObjectProperty}\"/> from the object.\r\n" +
                    "    /// </summary>\r\n    /// <returns>An immutable list of <see cref=\"JsonAny\"/> " +
                    "built from the array.</returns>\r\n    /// <exception cref=\"InvalidOperationExcept" +
                    "ion\">The value is not an array.</exception>\r\n    private ImmutableList<JsonObjec" +
                    "tProperty> GetPropertyBacking()\r\n    {\r\n        if ((this.backing & Backing.Obje" +
                    "ct) != 0)\r\n        {\r\n            return this.objectBacking;\r\n        }\r\n\r\n     " +
                    "   return PropertyBackingBuilders.GetPropertyBackingBuilder(this.jsonElementBack" +
                    "ing).ToImmutable();\r\n    }\r\n\r\n    /// <summary>\r\n    /// Builds an <see cref=\"Im" +
                    "mutableDictionary{JsonPropertyName, JsonAny}\"/> from the object, without a speci" +
                    "fic property.\r\n    /// </summary>\r\n    /// <returns>An immutable dictionary buil" +
                    "der of <see cref=\"JsonPropertyName\"/> to <see cref=\"JsonAny\"/>, built from the e" +
                    "xisting object, without the given property.</returns>\r\n    /// <exception cref=\"" +
                    "InvalidOperationException\">The value is not an object.</exception>\r\n    private " +
                    "ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in JsonPropertyName " +
                    "name)\r\n    {\r\n        if ((this.backing & Backing.Object) != 0)\r\n        {\r\n    " +
                    "        return this.objectBacking.Remove(name);\r\n        }\r\n\r\n        return Pro" +
                    "pertyBackingBuilders.GetPropertyBackingBuilderWithout(this.jsonElementBacking, n" +
                    "ame).ToImmutable();\r\n    }\r\n\r\n    /// <summary>\r\n    /// Builds an <see cref=\"Im" +
                    "mutableDictionary{JsonPropertyName, JsonAny}\"/> from the object, without a speci" +
                    "fic property.\r\n    /// </summary>\r\n    /// <returns>An immutable dictionary buil" +
                    "der of <see cref=\"JsonPropertyName\"/> to <see cref=\"JsonAny\"/>, built from the e" +
                    "xisting object, without the given property.</returns>\r\n    /// <exception cref=\"" +
                    "InvalidOperationException\">The value is not an object.</exception>\r\n    private " +
                    "ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(ReadOnlySpan<char> n" +
                    "ame)\r\n    {\r\n        if ((this.backing & Backing.Object) != 0)\r\n        {\r\n     " +
                    "       return this.objectBacking.Remove(name);\r\n        }\r\n\r\n        return Prop" +
                    "ertyBackingBuilders.GetPropertyBackingBuilderWithout(this.jsonElementBacking, na" +
                    "me).ToImmutable();\r\n    }\r\n\r\n    /// <summary>\r\n    /// Builds an <see cref=\"Imm" +
                    "utableDictionary{JsonPropertyName, JsonAny}\"/> from the object, without a specif" +
                    "ic property.\r\n    /// </summary>\r\n    /// <returns>An immutable dictionary build" +
                    "er of <see cref=\"JsonPropertyName\"/> to <see cref=\"JsonAny\"/>, built from the ex" +
                    "isting object, without the given property.</returns>\r\n    /// <exception cref=\"I" +
                    "nvalidOperationException\">The value is not an object.</exception>\r\n    private I" +
                    "mmutableList<JsonObjectProperty> GetPropertyBackingWithout(ReadOnlySpan<byte> na" +
                    "me)\r\n    {\r\n        if ((this.backing & Backing.Object) != 0)\r\n        {\r\n      " +
                    "      return this.objectBacking.Remove(name);\r\n        }\r\n\r\n        return Prope" +
                    "rtyBackingBuilders.GetPropertyBackingBuilderWithout(this.jsonElementBacking, nam" +
                    "e).ToImmutable();\r\n    }\r\n\r\n    /// <summary>\r\n    /// Builds an <see cref=\"Immu" +
                    "tableDictionary{JsonPropertyName, JsonAny}\"/> from the object, without a specifi" +
                    "c property.\r\n    /// </summary>\r\n    /// <returns>An immutable dictionary builde" +
                    "r of <see cref=\"JsonPropertyName\"/> to <see cref=\"JsonAny\"/>, built from the exi" +
                    "sting object, without the given property.</returns>\r\n    /// <exception cref=\"In" +
                    "validOperationException\">The value is not an object.</exception>\r\n    private Im" +
                    "mutableList<JsonObjectProperty> GetPropertyBackingWithout(string name)\r\n    {\r\n " +
                    "       if ((this.backing & Backing.Object) != 0)\r\n        {\r\n            return " +
                    "this.objectBacking.Remove(name);\r\n        }\r\n\r\n        return PropertyBackingBui" +
                    "lders.GetPropertyBackingBuilderWithout(this.jsonElementBacking, name).ToImmutabl" +
                    "e();\r\n    }\r\n\r\n    /// <summary>\r\n    /// Builds an <see cref=\"ImmutableDictiona" +
                    "ry{JsonPropertyName, JsonAny}\"/> from the object, without a specific property.\r\n" +
                    "    /// </summary>\r\n    /// <returns>An immutable dictionary builder of <see cre" +
                    "f=\"JsonPropertyName\"/> to <see cref=\"JsonAny\"/>, built from the existing object," +
                    " without the given property.</returns>\r\n    /// <exception cref=\"InvalidOperatio" +
                    "nException\">The value is not an object.</exception>\r\n    private ImmutableList<J" +
                    "sonObjectProperty> GetPropertyBackingWith(in JsonPropertyName name, in JsonAny v" +
                    "alue)\r\n    {\r\n        if ((this.backing & Backing.Object) != 0)\r\n        {\r\n    " +
                    "        return this.objectBacking.SetItem(name, value);\r\n        }\r\n\r\n        Im" +
                    "mutableList<JsonObjectProperty>.Builder result = PropertyBackingBuilders.GetProp" +
                    "ertyBackingBuilderReplacing(this.jsonElementBacking, name, value);\r\n        retu" +
                    "rn result.ToImmutable();\r\n    }\r\n}\r\n");
            
            #line default
            #line hidden
            
            #line 576 "../../Corvus.Json.CodeGeneration.Abstractions/SharedTemplates/CodeGenerator.Object.tt"
 EndNesting(); 
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class CodeGeneratorObjectBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
