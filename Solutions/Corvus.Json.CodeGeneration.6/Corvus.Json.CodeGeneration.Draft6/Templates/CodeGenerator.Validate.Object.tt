<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Corvus.Json" #>
<#
    // This is only emitted if HasDependentRequired || HasLocalProperties || HasRequired || HasMaxProperties || HasMinProperties|| HasDependentSchemas || HasPropertyNames || HasPatternProperties || ((AllowsAdditionalProperties && (HasAdditionalProperties)) || !AllowsAdditionalProperties) is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.Validate.Object should not be emitted if HasDependentRequired || HasLocalProperties || HasRequired || HasMaxProperties || HasMinProperties|| HasDependentSchemas || HasPropertyNames || HasPatternProperties || ((AllowsAdditionalProperties && (HasAdditionalProperties)) || !AllowsAdditionalProperties) is false.");
    } #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;
using Corvus.Json;
using Corvus.Json.Internal;

namespace <#= Namespace #>;

<# BeginNesting(); #>
<#= FormattedTypeDocumentation #>
public readonly partial struct <#= TypeDeclaration.DotnetTypeName #>
{
    private ValidationContext ValidateObject(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
    {
        ValidationContext result = validationContext;

        if (valueKind != JsonValueKind.Object)
        {
            return result;
        }
<#  if (HasMaxProperties || HasMinProperties || HasLocalProperties || HasRequired || HasDependentSchemas || HasPatternProperties || HasAdditionalProperties)
    { #>

        int propertyCount = 0;
<#  }
    if (HasRequired)
    {
        foreach(var property in RequiredProperties)
        { #>
        bool found<#= property.DotnetPropertyName #> = false;
<#      }
    } #>

<#  if (HasDependentRequired)
    { #>
        foreach(var dependentRequired in __CorvusDependentRequired)
        {
            if (this.HasJsonElementBacking)
            {
                if (this.HasProperty(dependentRequired.Utf8Name.Span))
                {
                    foreach (ReadOnlyMemory<byte> dependency in dependentRequired.Utf8Dependency)
                    {
                        ReadOnlySpan<byte> dSpan = dependency.Span;
                        if (!this.HasProperty(dSpan)<#= HasDefaults ? " && !this.HasDefault(dSpan))" : ")" #>
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
#if NET8_0_OR_GREATER
                                result = result.WithResult(isValid: false, $"6.5.4. dependentRequired - dependent property \"{Encoding.UTF8.GetString(dSpan)}\" not found.");
#else
                                result = result.WithResult(isValid: false, $"6.5.4. dependentRequired - dependent property \"{Encoding.UTF8.GetString(dSpan.ToArray())}\" not found.");
#endif
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = result.WithResult(isValid: false, "6.5.4. dependentRequired - dependent property not found.");
                            }
                            else
                            {
                                return result.WithResult(isValid: false);
                            }
                        }
                    }
                }
            }
            else
            {
                if (this.HasProperty(dependentRequired.Name))
                {
                    foreach (string dependency in dependentRequired.Dependency)
                    {
                        if (!this.HasProperty(dependency)<#= HasDefaults ? " && !this.HasDefault(dependency))" : ")" #>
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = result.WithResult(isValid: false, $"6.5.4. dependentRequired - dependent property \"{dependency}\" not found.");
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = result.WithResult(isValid: false, "6.5.4. dependentRequired - dependent property not found.");
                            }
                            else
                            {
                                return result.WithResult(isValid: false);
                            }
                        }
                    }
                }
            }
        }
<#  } #>

        foreach (JsonObjectProperty property in this.EnumerateObject())
        {
<#  if (HasLocalProperties || HasRequired)
    { #>

            if (__TryGetCorvusLocalPropertiesValidator(property, this.HasJsonElementBacking, out ObjectPropertyValidator? propertyValidator))
            {
                result = result.WithLocalProperty(propertyCount);
                if (level > ValidationLevel.Basic)
                {
                    result = result.PushDocumentProperty("properties", property.Name.GetString());
                }

                var propertyResult = propertyValidator(property, result.CreateChildContext(), level);
                result = result.MergeResults(propertyResult.IsValid, level, propertyResult);

                if (level > ValidationLevel.Basic)
                {
                    result = result.PopLocation(); // property name
                }

                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }
<#      if (HasRequired)
        { #>

<#          int requiredIndex = 0 ;
            foreach (var property in RequiredProperties)
            { #>
                <#= requiredIndex != 0 ? "else " : "" #>if ((this.HasJsonElementBacking && property.NameEquals(JsonPropertyNames.<#= property.DotnetPropertyName #>Utf8)) || (!this.HasJsonElementBacking && property.NameEquals(JsonPropertyNames.<#= property.DotnetPropertyName #>)))
                {
                    found<#= property.DotnetPropertyName #> = true;
                }
<#          requiredIndex++;
            }
        } #>
            }
<#  }
    if (HasDependentSchemas)
    { #>
            if (__TryGetCorvusDependentSchemaValidator(property, this.HasJsonElementBacking, out PropertyValidator<<#= TypeDeclaration.DotnetTypeName #>>? dependentSchemaValidator))
            {
                var dependentSchemaResult = dependentSchemaValidator(this, result.CreateChildContext(), level);
                if (level == ValidationLevel.Flag && !dependentSchemaResult.IsValid)
                {
                    return result.WithResult(isValid: false);
                }

                result = result.MergeChildContext(dependentSchemaResult, true);
            }
<#  }
    if (HasPropertyNames || HasPatternProperties)
    { #>
            string propertyName = property.Name.GetString();
<#      if (HasPropertyNames)
        { #>

            result = new <#= PropertyNamesDotnetTypeName #>(propertyName).Validate(result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }
<#      }
        if (HasPatternProperties)
        { #>

            foreach (System.Collections.Generic.KeyValuePair<Regex, PatternPropertyValidator> patternProperty in __CorvusPatternProperties)
            {
                if (patternProperty.Key.IsMatch(propertyName))
                {
                    result = result.WithLocalProperty(propertyCount);
                    result = patternProperty.Value(property, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }
                }
            }
<#      }
    }
    if (AllowsAdditionalProperties && HasAdditionalProperties)
    { #>

            if (!result.HasEvaluatedLocalProperty(propertyCount))
            {
                result = property.ValueAs<<#= AdditionalPropertiesDotnetTypeName #>>().Validate(result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }
                result = result.WithLocalProperty(propertyCount);
            }
<#  }
    if (!AllowsAdditionalProperties)
    { #>

            if (!result.HasEvaluatedLocalProperty(propertyCount))
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = result.WithResult(isValid: false, $"9.3.2.3. additionalProperties - additional property \"{property.Name}\" is not permitted.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "9.3.2.3. additionalProperties - additional properties are not permitted.");
                }
                else
                {
                    return result.WithResult(isValid: false);
                }
            }
<#  }
    if (HasMaxProperties || HasMinProperties || HasLocalProperties || HasRequired || HasDependentSchemas || HasPatternProperties || HasAdditionalProperties)
    { #>

            propertyCount++;
<#  } #>
        }
<#  if (HasRequired)
    {
        foreach (var property in RequiredProperties)
        {
            if (!property.HasDefaultValue)
            { #>

        if (!found<#= property.DotnetPropertyName #>)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, $"6.5.3. required - required property \"<#= Formatting.FormatLiteralOrNull(property.JsonPropertyName, true).Trim('"') #>\" not present.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "6.5.3. required - required property not present.");
            }
            else
            {
                return result.WithResult(isValid: false);
            }
        }
<#          }
        }
    }
    if (HasMaxProperties)
    { #>

        if (propertyCount > <#= MaxProperties #>)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, $"6.5.1. maxProperties - property count of {propertyCount} is greater than <#= MaxProperties #>.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "6.5.1. maxProperties - property count greater than <#= MaxProperties #>.");
            }
            else
            {
                return result.WithResult(isValid: false);
            }
        }
<#  }
    if (HasMinProperties)
    { #>

        if (propertyCount < <#= MinProperties #>)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, $"6.5.2. minProperties - property count of {propertyCount} is lezs than <#= MinProperties #>.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "6.5.2. minProperties - property count less than <#= MinProperties #>.");
            }
            else
            {
                return result.WithResult(isValid: false);
            }
        }
<#  } #>

        return result;
    }
}
<# EndNesting(); #>
<#+
    public bool ShouldGenerate
    {
        get
        {
            return HasDependentRequired || HasLocalProperties || HasRequired || HasMaxProperties || HasMinProperties|| HasDependentSchemas || HasPropertyNames || HasPatternProperties || ((AllowsAdditionalProperties && HasAdditionalProperties) || !AllowsAdditionalProperties);
        }
    }
#>