<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Corvus.Json" #>
<#
    // This is only emitted if HasAnyOf is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.AnyOf should not be emitted if HasAnyOf is false.");
    } #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace <#= Namespace #>;

<# BeginNesting(); #>
<#= FormattedTypeDocumentation #>
public readonly partial struct <#= TypeDeclaration.DotnetTypeName #>
{
    /// <summary>
    /// Matches the value against each of the any of values, and returns the result of calling the provided match function for the first match found.
    /// </summary>
    /// <param name="context">The context to pass to the match function.</param>
<#  int anyOfItemIndex = 0;
    foreach (var anyOf in AnyOf)
    { #>
    /// <param name="match<#= anyOfItemIndex #>">The function to call if the value matches the <see cref="<#= anyOf #>"/> type.</param>
<#      anyOfItemIndex++;
    } #>
    /// <param name="defaultMatch">The fallback match.</param>
    public TOut Match<TIn, TOut>(
        in TIn context<#  anyOfItemIndex = 0;
    foreach (var anyOf in AnyOf)
    { #>,

        Matcher<<#= anyOf #>, TIn, TOut> match<#= anyOfItemIndex #><#      anyOfItemIndex++;
    } #>,
        Matcher<<#= TypeDeclaration.DotnetTypeName #>, TIn, TOut> defaultMatch)
    {
<#  anyOfItemIndex = 0;
    foreach (var anyOf in AnyOf)
    { #>
        var anyOf<#= anyOfItemIndex #> = this.As<<#= anyOf #>>();
        if (anyOf<#= anyOfItemIndex #>.IsValid())
        {
            return match<#= anyOfItemIndex #>(anyOf<#= anyOfItemIndex #>, context);
        }

<#      anyOfItemIndex++;
    } #>
        return defaultMatch(this, context);
    }

    /// <summary>
    /// Matches the value against each of the any of values, and returns the result of calling the provided match function for the first match found.
    /// </summary>
<#  anyOfItemIndex = 0;
    foreach (var anyOf in AnyOf)
    { #>
    /// <param name="match<#= anyOfItemIndex #>">The function to call if the value matches the <see cref="<#= anyOf #>"/> type.</param>
<#      anyOfItemIndex++;
    } #>
    /// <param name="defaultMatch">The fallback match.</param>
    public TOut Match<TOut>(<#  anyOfItemIndex = 0;
    foreach (var anyOf in AnyOf)
    { #>
        Matcher<<#= anyOf #>, TOut> match<#= anyOfItemIndex #>,<#      anyOfItemIndex++;
    } #>
        Matcher<<#= TypeDeclaration.DotnetTypeName #>, TOut> defaultMatch)
    {
<#  anyOfItemIndex = 0;
    foreach (var anyOf in AnyOf)
    { #>
        var anyOf<#= anyOfItemIndex #> = this.As<<#= anyOf #>>();
        if (anyOf<#= anyOfItemIndex #>.IsValid())
        {
            return match<#= anyOfItemIndex #>(anyOf<#= anyOfItemIndex #>);
        }

<#      anyOfItemIndex++;
    } #>
        return defaultMatch(this);
    }
}
<# EndNesting(); #>
<#+
    public bool ShouldGenerate
    {
        get
        {
            return HasAnyOf;
        }
    }
#>