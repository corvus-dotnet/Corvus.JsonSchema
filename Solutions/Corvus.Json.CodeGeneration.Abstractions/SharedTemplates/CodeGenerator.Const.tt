<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Corvus.Json" #>
<#
    // This is only emitted if HasConst is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.Const should not be emitted if HasConst is false.");
    } #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace <#= Namespace #>;

<# BeginNesting(); #>
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct <#= TypeDeclaration.DotnetTypeName #><# if (HasConstNull) { #> : IJsonValue<<#= TypeDeclaration.DotnetTypeName #>><# } #>
{
<#  if(HasConstString)
    { #>
    private static readonly <#= TypeDeclaration.DotnetTypeName #> __CorvusConstValue = JsonAny.Parse(<#= ConstString #>);
<#  }
    else if(HasConstBoolean)
    { #>
    private static readonly <#= TypeDeclaration.DotnetTypeName #> __CorvusConstValue = JsonAny.Parse(<#= ConstBoolean #>);
<#  }
    else if(HasConstNumber)
    { #>
    private static readonly <#= TypeDeclaration.DotnetTypeName #> __CorvusConstValue = JsonAny.Parse(<#= ConstNumber #>);
<#  }
    else if(HasConstObject)
    { #>
    private static readonly <#= TypeDeclaration.DotnetTypeName #> __CorvusConstValue = JsonAny.Parse(<#= ConstObject #>);
<#  }
    else if(HasConstArray)
    { #>
    private static readonly <#= TypeDeclaration.DotnetTypeName #> __CorvusConstValue = JsonAny.Parse(<#= ConstArray #>);
<#  }
    else if(HasConstNull)
    { #>
    private static readonly <#= TypeDeclaration.DotnetTypeName #> __CorvusConstValue = JsonAny.Parse("null");
<#  }   #>

    <# // Note that if this is a const value, it cannot be of more than one type, so it is safe to initialize
       // Only the single backing value. #>
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeDeclaration.DotnetTypeName #>"/> struct.
    /// </summary>
    public <#= TypeDeclaration.DotnetTypeName #>()
    {
        this.jsonElementBacking = __CorvusConstValue.jsonElementBacking;
<#  if(IsImplicitObject)
    {
    #>
        this.objectBacking = __CorvusConstValue.objectBacking;
<#  }

    if(IsImplicitArray)
    { #>
        this.arrayBacking = __CorvusConstValue.arrayBacking;
<#  }

    if(IsImplicitNumber)
    { #>
        this.numberBacking = __CorvusConstValue.numberBacking;
<#  }

    if(IsImplicitString)
    { #>
        this.stringBacking = __CorvusConstValue.stringBacking;
<#  }

    if(IsImplicitBoolean)
    { #>
        this.boolBacking = __CorvusConstValue.boolBacking;
<#  } #>

        this.backing = __CorvusConstValue.backing;
    }

    /// <summary>
    /// Gets the constant value for this instance
    /// </summary>
    public static <#= TypeDeclaration.DotnetTypeName #> ConstInstance => __CorvusConstValue;
}
<# EndNesting(); #>
<#+
    public bool ShouldGenerate
    {
        get
        {
            return HasConst;
        }
    }
#>