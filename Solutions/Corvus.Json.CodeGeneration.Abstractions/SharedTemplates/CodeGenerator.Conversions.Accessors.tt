<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Corvus.Json" #>
<#
    // This is only emitted if HasDirectConversions is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.Conversions.Accessors should not be emitted if HasDirectConversions is false.");
    } #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using Corvus.Json;

namespace <#= Namespace #>;

<# BeginNesting(); #>
<#= FormattedTypeDocumentation #>
public readonly partial struct <#= TypeDeclaration.DotnetTypeName #>
{
<#  // Accessors are only provided
    foreach (Conversion conversion in DirectConversions)
    {
        if (conversion.DotnetTypeName == BuiltInTypes.AnyTypeDeclaration.Type)
        {
            continue;
        } #>

<#      if (!conversion.IsBuiltInType)
        { #>
    /// <summary>
    /// Gets the value as a <see cref="<#= conversion.FullyQualifiedDotnetTypeName #>" />.
    /// </summary>
    public <#= conversion.FullyQualifiedDotnetTypeName #> As<#= conversion.DotnetTypeName #>
    {
        get
        {
            return (<#= conversion.FullyQualifiedDotnetTypeName #>)this;
        }
    }
<#      } #>

    /// <summary>
    /// Gets a value indicating whether this is a valid <see cref="<#= conversion.FullyQualifiedDotnetTypeName #>" />.
    /// </summary>
    public bool Is<#= conversion.DotnetTypeName #>
    {
        get
        {
            return ((<#= conversion.FullyQualifiedDotnetTypeName #>)this).IsValid();
        }
    }

    /// <summary>
    /// Gets the value as a <see cref="<#= conversion.FullyQualifiedDotnetTypeName #>" />.
    /// </summary>
    /// <param name="result">The result of the conversion.</param>
    /// <returns><c>True</c> if the conversion was valid.</returns>
    public bool TryGetAs<#= conversion.DotnetTypeName #>(out <#= conversion.FullyQualifiedDotnetTypeName #> result)
    {
        result = (<#= conversion.FullyQualifiedDotnetTypeName #>)this;
        return result.IsValid();
    }
<#  }  #>
}
<# EndNesting(); #>
<#+
    public bool ShouldGenerate
    {
        get
        {
            return HasConversions;
        }
    }
#>