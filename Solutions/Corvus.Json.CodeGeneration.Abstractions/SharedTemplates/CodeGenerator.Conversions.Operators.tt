<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Corvus.Json" #>
<#
    // This is only emitted if HasConversions is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.Conversions.Operators should not be emitted if HasConversions is false.");
    } #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace <#= Namespace #>;

<# BeginNesting(); #>
<#= FormattedTypeDocumentation #>
public readonly partial struct <#= TypeDeclaration.DotnetTypeName #>
{
<#  foreach(Conversion conversion in Conversions)
    {
        if (conversion.DotnetTypeName == BuiltInTypes.AnyTypeDeclaration.Type)
        {
            // Never emit JsonAny conversions.
            continue;
        } #>

    /// <summary>
    /// Conversion to <see cref="<#= conversion.FullyQualifiedDotnetTypeName #>" />.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static <#= conversion.IsImplicit ? "implicit" : "explicit" #> operator <#= conversion.FullyQualifiedDotnetTypeName #>(<#= TypeDeclaration.DotnetTypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

<#      // If the conversion supports the given type, we know that
        // we must also support the given type (as we derived the conversion from schema)
        // so we do not need to check the IsImplicitObject etc.
        if(conversion.IsObject)
        { #>

        if ((value.backing & Backing.Object) != 0)
        {
            return new(value.objectBacking);
        }
<#      }
        if(conversion.IsArray)
        { #>

        if ((value.backing & Backing.Array) != 0)
        {
            return new(value.arrayBacking);
        }
<#      }
        if(conversion.IsString)
        { #>

        if ((value.backing & Backing.String) != 0)
        {
            return new(value.stringBacking);
        }
<#      }
        if(conversion.IsBoolean)
        { #>
        if ((value.backing & Backing.Bool) != 0)
        {
<#  if (IsImplicitBoolean && !(IsImplicitNumber || IsNotImplicitType))
    { #>
            return new(value.boolBacking);
<#  }
    else
    { #>
            return new(value.numberBacking.GetByteAsBool());
<#  } #>
        }
<#      }
        if(conversion.IsNumber)
        { #>
        if ((value.backing & Backing.Number) != 0)
        {
            return new(value.numberBacking);
        }
<#      } #>

        return <#= conversion.FullyQualifiedDotnetTypeName #>.Undefined;
    }

<#  if (conversion.IsBuiltInPrimitiveType)
    {
        if ((conversion.IsString && IsImplicitString) ||
            (conversion.IsBoolean && IsImplicitBoolean) ||
            (conversion.IsNumber && IsImplicitNumber) ||
            (conversion.IsObject && IsImplicitObject) ||
            (conversion.IsArray && IsImplicitArray))
        {
            // We have already emitted the conversions for this type.
            continue;
        }

    } #>

    /// <summary>
    /// Conversion from <see cref="<#= conversion.FullyQualifiedDotnetTypeName #>" />.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static <#= conversion.IsImplicitDowncast ? "implicit" : "explicit" #> operator <#= TypeDeclaration.DotnetTypeName #>(<#= conversion.FullyQualifiedDotnetTypeName #> value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
<#      // If the conversion supports the given type, we know that
        // we must also support the given type (as we derived the conversion from schema in this case)
        // so we do not need to check the IsImplicitObject etc.
        if(conversion.IsObject)
        { #>
            JsonValueKind.Object => new(value.AsPropertyBacking()),
<#      }
        if(conversion.IsArray)
        { #>
            JsonValueKind.Array => new(value.AsImmutableList()),
<#      }
        if(conversion.IsString)
        { #>
            JsonValueKind.String => new((string)value),
<#      }
        if(conversion.IsBoolean)
        { #>
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
<#      }
        if(conversion.IsNumber)
        { #>
            JsonValueKind.Number => new(value.AsBinaryJsonNumber),
<#      } #>
            _ => Undefined
        };
    }
<#  } #>
}
<# EndNesting(); #>
<#+
    public bool ShouldGenerate
    {
        get
        {
            return HasConversions;
        }
    }
#>