<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Corvus.Json" #>
<#
    // This is only emitted if HasDependentRequired is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.DependentRequired should not be emitted if HasDependentRequired is false.");
    } #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using System.Text.RegularExpressions;
using Corvus.Json;
using Corvus.Json.Internal;

namespace <#= Namespace #>;

<# BeginNesting(); #>
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct <#= TypeDeclaration.DotnetTypeName #>
{
    private static readonly ImmutableList<__CorvusDependency> __CorvusDependentRequired = BuildDependentRequired();

    private static ImmutableList<__CorvusDependency> BuildDependentRequired()
    {
        ImmutableList<__CorvusDependency>.Builder builder =
            ImmutableList.CreateBuilder<__CorvusDependency>();

<#  foreach (var dependentRequired in DependentRequired)
    { #>
        builder.Add(
            new __CorvusDependency(
                new byte[] { <#= GetEncodedBytes(dependentRequired.Name) #> },
                <#= Formatting.FormatLiteralOrNull(dependentRequired.Name, true) #>,
                ImmutableArray.Create<ReadOnlyMemory<byte>>(<#
        bool isFirst = true;
        foreach (var dependentRequiredValue in dependentRequired.RequiredNames)
        {
            if (!isFirst)
            { #>,
<#          }
            else
            {
                isFirst = false;
            } #>
                   new byte[] { <#= GetEncodedBytes(dependentRequiredValue) #> }
<#      } #>),
                ImmutableArray.Create<string>(<#
        isFirst = true;
        foreach (var dependentRequiredValue in dependentRequired.RequiredNames)
        {
            if (!isFirst)
            { #>,
<#          }
            else
            {
                isFirst = false;
            } #>
                   <#= Formatting.FormatLiteralOrNull(dependentRequired.Name, true) #><#      } #>)));
    <#
    }
    #>
        return builder.ToImmutable();
    }

    private readonly record struct __CorvusDependency(ReadOnlyMemory<byte> Utf8Name, string Name, ImmutableArray<ReadOnlyMemory<byte>> Utf8Dependency, ImmutableArray<string> Dependency);
}
<# EndNesting(); #>
<#+
    public bool ShouldGenerate
    {
        get
        {
            return HasDependentRequired;
        }
    }
#>