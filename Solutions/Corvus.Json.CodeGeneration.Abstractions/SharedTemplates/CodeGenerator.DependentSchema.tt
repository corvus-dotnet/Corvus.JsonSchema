<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Corvus.Json" #>
<#
    // This is only emitted if HasDependentSchemas is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.DependentSchema should not be emitted if HasDependentSchemas is false.");
    } #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using System.Text.RegularExpressions;
using Corvus.Json;
using Corvus.Json.Internal;

namespace <#= Namespace #>;

<# BeginNesting(); #>
<#= FormattedTypeDocumentation #>
public readonly partial struct <#= TypeDeclaration.DotnetTypeName #>
{
<#  int dsIndexV = 0;
    foreach( var dependentSchema in DependentSchemas)
    {
        ++dsIndexV; #>
    private static ReadOnlySpan<byte> __DependentSchema<#= dsIndexV #>Utf8JsonPropertyName => <#= Formatting.FormatLiteralOrNull(dependentSchema.Name, true)#>u8;
    private const string __DependentSchema<#= dsIndexV #>JsonPropertyName = <#= Formatting.FormatLiteralOrNull(dependentSchema.Name, true)#>;
<#  }
    dsIndexV = 0;
    foreach (var dependentSchema in DependentSchemas)
    {
        ++dsIndexV; #>

    /// <summary>
    /// Try to match the instance with the dependent schema for property <#= dependentSchema.Name #>, and get it as a <see cref="<#= dependentSchema.DotnetTypeName #>" /> if the property is present.
    /// </summary>
    /// <param name="result">The value as a <see cref="<#= dependentSchema.DotnetTypeName #>" />.</param>.
    /// <returns><c>True</c> if the property was present.</returns>
    public bool TryAsDependentSchemaFor<#= Formatting.ToPascalCaseWithReservedWords(dependentSchema.Name).ToString() #>(out <#= dependentSchema.DotnetTypeName #> result)
    {
        if ((this.HasJsonElementBacking && this.HasProperty(__DependentSchema<#= dsIndexV #>Utf8JsonPropertyName) || (!this.HasJsonElementBacking && this.HasProperty(__DependentSchema<#= dsIndexV #>JsonPropertyName))))
        {
            result = this.As<<#= dependentSchema.DotnetTypeName #>>();
            return true;
        }

        result = <#= dependentSchema.DotnetTypeName #>.Undefined;
        return false;
    }
<#  } #>

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name="property">The property for which to get the validator.</param>
    /// <param name="hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name="propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    public bool __TryGetCorvusDependentSchemaValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)]out PropertyValidator<<#= TypeDeclaration.DotnetTypeName #>>? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
<#  dsIndexV = 0;
    foreach (var dependentSchema in DependentSchemas)
    {
        dsIndexV++; #>
            <#= dsIndexV == 1 ? string.Empty : "else " #>if (property.NameEquals(__DependentSchema<#= dsIndexV #>Utf8JsonPropertyName))
            {
                propertyValidator = __CorvusValidateDependentSchema<#= dsIndexV #>;
                return true;
            }
<#  } #>
        }
        else
        {
<#  dsIndexV = 0;
    foreach (var dependentSchema in DependentSchemas)
    {
        ++dsIndexV; #>
            <#= dsIndexV == 1 ? string.Empty : "else " #>if (property.NameEquals(__DependentSchema<#= dsIndexV #>JsonPropertyName))
            {
                propertyValidator = __CorvusValidateDependentSchema<#= dsIndexV #>;
                return true;
            }
<#
    } #>
        }

        propertyValidator = null;
        return false;
    }

<#  dsIndexV = 0;
    foreach (var dependentSchema in DependentSchemas)
    {
        dsIndexV++; #>

    private static ValidationContext __CorvusValidateDependentSchema<#= dsIndexV #>(in <#= TypeDeclaration.DotnetTypeName #> that, in ValidationContext validationContext, ValidationLevel level)
    {
        return that.As<<#= dependentSchema.DotnetTypeName #>>().Validate(validationContext, level);
    }
<#  } #>
}
<# EndNesting(); #>
<#+
    public bool ShouldGenerate
    {
        get
        {
            return HasDependentSchemas;
        }
    }
#>