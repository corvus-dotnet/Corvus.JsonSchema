<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Corvus.Json" #>
<#
    // This is only emitted if HasEnum is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.Enum should not be emitted if IsEnum is false.");
    } #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace <#= Namespace #>;

<# BeginNesting(); #>
<#= FormattedTypeDocumentation #>
public readonly partial struct <#= TypeDeclaration.DotnetTypeName #>
{
    /// <summary>
    /// Permitted values.
    /// </summary>
    public static class EnumValues
    {
<#  int enumItemIndex = 0;
    foreach (var enumValue in EnumValues)
    {
        if (enumValue.IsString)
        { #>
        /// <summary>
        /// Gets <#= enumValue.RawStringValue #> as a JSON value.
        /// </summary>
        public static readonly <#= TypeDeclaration.DotnetTypeName #> <#= enumValue.AsPropertyName #> = <#= TypeDeclaration.DotnetTypeName #>.Parse(<#= enumValue.SerializedValue #>);
        /// <summary>
        /// Gets <#= enumValue.RawStringValue #> as a UTF8 string.
        /// </summary>
        public static ReadOnlySpan<byte> <#= enumValue.AsPropertyName #>Utf8 => <#= enumValue.RawStringValue #>u8;
<#      }
        else if (enumValue.IsBoolean)
        { #>
        /// <summary>
        /// Gets <#= enumValue.SerializedValue #> as a JSON value.
        /// </summary>
        public static readonly <#= TypeDeclaration.DotnetTypeName #> Item<#= enumItemIndex #> = <#= TypeDeclaration.DotnetTypeName #>.Parse(<#= enumValue.SerializedValue #>);
<#      }
        else if (enumValue.IsNumber)
        { #>
        /// <summary>
        /// Gets <#= enumValue.SerializedValue #> as a JSON value.
        /// </summary>
        public static readonly <#= TypeDeclaration.DotnetTypeName #> Item<#= enumItemIndex #> = <#= TypeDeclaration.DotnetTypeName #>.Parse(<#= enumValue.SerializedValue #>);
<#      }
        else if (enumValue.IsObject)
        { #>
        /// <summary>
        /// Gets <#= enumValue.SerializedValue #> as a JSON value.
        /// </summary>
        public static readonly <#= TypeDeclaration.DotnetTypeName #> Item<#= enumItemIndex#> = <#= TypeDeclaration.DotnetTypeName #>.Parse(<#= enumValue.SerializedValue #>);
<#      }
        else if (enumValue.IsArray)
        { #>
        /// <summary>
        /// Gets <#= enumValue.SerializedValue #> as a JSON value.
        /// </summary>
        public static readonly <#= TypeDeclaration.DotnetTypeName #> Item<#= enumItemIndex #> = <#= TypeDeclaration.DotnetTypeName #>.Parse(<#= enumValue.SerializedValue #>);
<#      }
        else if (enumValue.IsNull)
        { #>
        /// <summary>
        /// Gets "null" as a JSON value.
        /// </summary>
        public static readonly <#= TypeDeclaration.DotnetTypeName #> Item<#= enumItemIndex#> = <#= TypeDeclaration.DotnetTypeName #>.Parse("null");
<#      }
        ++enumItemIndex;
    }

    enumItemIndex = 0;
    foreach (var enumValue in EnumValues)
    {
        if (enumValue.IsString)
        { #>
        /// <summary>
        /// Gets <#= enumValue.RawStringValue #> as a JSON value.
        /// </summary>
        internal static readonly <#= TypeDeclaration.DotnetTypeName #> Item<#= enumItemIndex #> = <#= TypeDeclaration.DotnetTypeName #>.Parse(<#= enumValue.SerializedValue #>);
<#      }
            enumItemIndex++;
    } #>
    }
}
<# EndNesting(); #>
<#+
    public bool ShouldGenerate
    {
        get
        {
            return HasEnum;
        }
    }
#>