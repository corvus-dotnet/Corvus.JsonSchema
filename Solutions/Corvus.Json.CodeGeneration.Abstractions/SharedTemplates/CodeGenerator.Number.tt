<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Corvus.Json" #>
<#
    // This is only emitted if IsImplicitNumber is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.Number should not be emitted if IsImplicitString is false.");
    } #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Numerics;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace <#= Namespace #>;

<# BeginNesting(); #>
<#= FormattedTypeDocumentation #>
public readonly partial struct <#= TypeDeclaration.DotnetTypeName #>
#if NET8_0_OR_GREATER
: IJsonNumber<<#= TypeDeclaration.DotnetTypeName #>>,
  IAdditionOperators<<#= TypeDeclaration.DotnetTypeName #>, <#= TypeDeclaration.DotnetTypeName #>, <#= TypeDeclaration.DotnetTypeName #>>,
  ISubtractionOperators<<#= TypeDeclaration.DotnetTypeName #>, <#= TypeDeclaration.DotnetTypeName #>, <#= TypeDeclaration.DotnetTypeName #>>,
  IMultiplyOperators<<#= TypeDeclaration.DotnetTypeName #>, <#= TypeDeclaration.DotnetTypeName #>, <#= TypeDeclaration.DotnetTypeName #>>,
  IDivisionOperators<<#= TypeDeclaration.DotnetTypeName #>, <#= TypeDeclaration.DotnetTypeName #>, <#= TypeDeclaration.DotnetTypeName #>>,
  IIncrementOperators<<#= TypeDeclaration.DotnetTypeName #>>,
  IDecrementOperators<<#= TypeDeclaration.DotnetTypeName #>>
#else
: IJsonNumber<<#= TypeDeclaration.DotnetTypeName #>>
#endif
{
   /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeDeclaration.DotnetTypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to construct the instance.</param>
    public <#= TypeDeclaration.DotnetTypeName #>(in BinaryJsonNumber value)
    {
        this.jsonElementBacking = default;
        this.backing = Backing.Number;
        this.numberBacking = value;
<#  if(IsImplicitString || IsNotImplicitType)
    { #>
        this.stringBacking = string.Empty;
<#  }
    if(IsImplicitArray || IsNotImplicitType)
    { #>
        this.arrayBacking = ImmutableList<JsonAny>.Empty;
<#  }
    if(IsImplicitObject || IsNotImplicitType)
    { #>
        this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
<#  } #>
    }

<# if(ConversionOperatorToDecimal == "implicit")
   { #>
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeDeclaration.DotnetTypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeDeclaration.DotnetTypeName #>(decimal value)
        : this(new BinaryJsonNumber(value))
    {
    }

<# }
   else if(ConversionOperatorToDouble == "implicit" || (!IsJsonInteger && !HasFormat))
   { #>
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeDeclaration.DotnetTypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeDeclaration.DotnetTypeName #>(double value)
        : this(new BinaryJsonNumber(value))
    {
    }

<# }
   else if(ConversionOperatorToHalf == "implicit")
   { #>
#if NET8_0_OR_GREATER
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeDeclaration.DotnetTypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeDeclaration.DotnetTypeName #>(Half value)
        : this(new BinaryJsonNumber(value))
    {
    }
#endif

<# }
   else if(ConversionOperatorToSingle == "implicit")
   { #>
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeDeclaration.DotnetTypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeDeclaration.DotnetTypeName #>(float value)
        : this(new BinaryJsonNumber(value))
    {
    }

<# }
   else if(ConversionOperatorToByte == "implicit")
   { #>
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeDeclaration.DotnetTypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeDeclaration.DotnetTypeName #>(byte value)
        : this(new BinaryJsonNumber(value))
    {
    }

<# }
   else if(ConversionOperatorToInt16 == "implicit")
   { #>
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeDeclaration.DotnetTypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeDeclaration.DotnetTypeName #>(short value)
        : this(new BinaryJsonNumber(value))
    {
    }

<# }
   else if(ConversionOperatorToInt32 == "implicit")
   { #>
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeDeclaration.DotnetTypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeDeclaration.DotnetTypeName #>(int value)
        : this(new BinaryJsonNumber(value))
    {
    }

<# }
   else if(ConversionOperatorToInt64 == "implicit" || (IsJsonInteger && !HasFormat))
   { #>
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeDeclaration.DotnetTypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeDeclaration.DotnetTypeName #>(long value)
        : this(new BinaryJsonNumber(value))
    {
    }

<# }
   else if(ConversionOperatorToInt128 == "implicit")
   { #>
#if NET8_0_OR_GREATER
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeDeclaration.DotnetTypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeDeclaration.DotnetTypeName #>(Int128 value)
        : this(new BinaryJsonNumber(value))
    {
    }
#endif

<# }
   else if(ConversionOperatorToSByte == "implicit")
   { #>
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeDeclaration.DotnetTypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeDeclaration.DotnetTypeName #>(sbyte value)
        : this(new BinaryJsonNumber(value))
    {
    }

<# }
   else if(ConversionOperatorToUInt16 == "implicit")
   { #>
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeDeclaration.DotnetTypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeDeclaration.DotnetTypeName #>(ushort value)
        : this(new BinaryJsonNumber(value))
    {
    }

<# }
   else if(ConversionOperatorToUInt32 == "implicit")
   { #>
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeDeclaration.DotnetTypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeDeclaration.DotnetTypeName #>(uint value)
        : this(new BinaryJsonNumber(value))
    {
    }

<# }
   else if(ConversionOperatorToUInt64 == "implicit")
   { #>
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeDeclaration.DotnetTypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeDeclaration.DotnetTypeName #>(ulong value)
        : this(new BinaryJsonNumber(value))
    {
    }

<# }
   else if(ConversionOperatorToUInt128 == "implicit")
   { #>
#if NET8_0_OR_GREATER
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeDeclaration.DotnetTypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeDeclaration.DotnetTypeName #>(UInt128 value)
        : this(new BinaryJsonNumber(value))
    {
    }
#endif

<# }#>
    /// <summary>
    /// Conversion from JsonNumber.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator <#= TypeDeclaration.DotnetTypeName #>(JsonNumber value)
    {
        if (value.HasDotnetBacking && value.ValueKind == JsonValueKind.Number)
        {
            return new(value.AsBinaryJsonNumber);
        }

        return new(value.AsJsonElement);
    }

    /// <summary>
    /// Conversion to byte.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as a byte.</exception>
    public static <#= ConversionOperatorToByte #> operator byte(<#= TypeDeclaration.DotnetTypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetByte();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<byte>();
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Conversion to decimal.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as a decimal.</exception>
    public static <#= ConversionOperatorToDecimal #> operator decimal(<#= TypeDeclaration.DotnetTypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetDecimal();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<decimal>();
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Conversion to double.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as a double.</exception>
    public static <#= ConversionOperatorToDouble #> operator double(<#= TypeDeclaration.DotnetTypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetDouble();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<double>();
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Conversion to Int16.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as an Int16.</exception>
    public static <#= ConversionOperatorToInt16 #> operator short(<#= TypeDeclaration.DotnetTypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetInt16();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<short>();
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Conversion to Int32.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as an Int32.</exception>
    public static <#= ConversionOperatorToInt32 #> operator int(<#= TypeDeclaration.DotnetTypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetInt32();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<int>();
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Conversion to Int64.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as an Int64.</exception>
    public static <#= ConversionOperatorToInt64 #> operator long(<#= TypeDeclaration.DotnetTypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetInt64();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<long>();
        }

        throw new InvalidOperationException();
    }

#if NET8_0_OR_GREATER
    /// <summary>
    /// Conversion to Int128.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as an Int64.</exception>
    public static <#= ConversionOperatorToInt128 #> operator Int128(<#= TypeDeclaration.DotnetTypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetInt128();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<Int128>();
        }

        throw new InvalidOperationException();
    }
#endif

    /// <summary>
    /// Conversion to SByte.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as an SByte.</exception>
    public static <#= ConversionOperatorToSByte #> operator sbyte(<#= TypeDeclaration.DotnetTypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetSByte();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<sbyte>();
        }

        throw new InvalidOperationException();
    }

#if NET8_0_OR_GREATER
    /// <summary>
    /// Conversion to Half.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as a Single.</exception>
    public static <#= ConversionOperatorToHalf #> operator Half(<#= TypeDeclaration.DotnetTypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetHalf();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<Half>();
        }

        throw new InvalidOperationException();
    }
#endif

    /// <summary>
    /// Conversion to Single.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as a Single.</exception>
    public static <#= ConversionOperatorToSingle #> operator float(<#= TypeDeclaration.DotnetTypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetSingle();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<float>();
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Conversion to UInt16.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as an UInt16.</exception>
    public static <#= ConversionOperatorToUInt16 #> operator ushort(<#= TypeDeclaration.DotnetTypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetUInt16();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<ushort>();
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Conversion to UInt32.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as an UInt32.</exception>
    public static <#= ConversionOperatorToUInt32 #> operator uint(<#= TypeDeclaration.DotnetTypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetUInt32();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<uint>();
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Conversion to UInt64.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as an UInt64.</exception>
    public static <#= ConversionOperatorToUInt64 #> operator ulong(<#= TypeDeclaration.DotnetTypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetUInt64();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<ulong>();
        }

        throw new InvalidOperationException();
    }

#if NET8_0_OR_GREATER
    /// <summary>
    /// Conversion to UInt128.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as an UInt64.</exception>
    public static <#= ConversionOperatorToUInt128 #> operator UInt128(<#= TypeDeclaration.DotnetTypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetUInt128();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<UInt128>();
        }

        throw new InvalidOperationException();
    }
#endif

    /// <summary>
    /// Conversion from decimal.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToDecimal #> operator <#= TypeDeclaration.DotnetTypeName #>(decimal value)
    {
        return new(new BinaryJsonNumber(value));
    }

    /// <summary>
    /// Conversion from double.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToDouble #> operator <#= TypeDeclaration.DotnetTypeName #>(double value)
    {
        return new(new BinaryJsonNumber(value));
    }

#if NET8_0_OR_GREATER
    /// <summary>
    /// Conversion from Half.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToHalf #> operator <#= TypeDeclaration.DotnetTypeName #>(Half value)
    {
        return new(new BinaryJsonNumber(value));
    }
#endif

    /// <summary>
    /// Conversion from float.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToSingle #> operator <#= TypeDeclaration.DotnetTypeName #>(float value)
    {
        return new(new BinaryJsonNumber(value));
    }

    /// <summary>
    /// Conversion from byte.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToByte #> operator <#= TypeDeclaration.DotnetTypeName #>(byte value)
    {
        return new(new BinaryJsonNumber(value));
    }

    /// <summary>
    /// Conversion from short.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToInt16 #> operator <#= TypeDeclaration.DotnetTypeName #>(short value)
    {
        return new(new BinaryJsonNumber(value));
    }

    /// <summary>
    /// Conversion from int.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToInt32 #> operator <#= TypeDeclaration.DotnetTypeName #>(int value)
    {
        return new(new BinaryJsonNumber(value));
    }

    /// <summary>
    /// Conversion from long.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToInt64 #> operator <#= TypeDeclaration.DotnetTypeName #>(long value)
    {
        return new(new BinaryJsonNumber(value));
    }

    /// <summary>
    /// Conversion from sbyte.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToSByte #> operator <#= TypeDeclaration.DotnetTypeName #>(sbyte value)
    {
        return new(new BinaryJsonNumber(value));
    }

    /// <summary>
    /// Conversion from ushort.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToUInt16 #> operator <#= TypeDeclaration.DotnetTypeName #>(ushort value)
    {
        return new(new BinaryJsonNumber(value));
    }

    /// <summary>
    /// Conversion from uint.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToUInt32 #> operator <#= TypeDeclaration.DotnetTypeName #>(uint value)
    {
        return new(new BinaryJsonNumber(value));
    }

    /// <summary>
    /// Conversion from ulong.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToUInt64 #> operator <#= TypeDeclaration.DotnetTypeName #>(ulong value)
    {
        return new(new BinaryJsonNumber(value));
    }

#if NET8_0_OR_GREATER
    /// <summary>
    /// Conversion from Int128.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToInt128 #> operator <#= TypeDeclaration.DotnetTypeName #>(Int128 value)
    {
        return new(new BinaryJsonNumber(value));
    }

    /// <summary>
    /// Conversion from UInt128.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToUInt128 #> operator <#= TypeDeclaration.DotnetTypeName #>(UInt128 value)
    {
        return new(new BinaryJsonNumber(value));
    }
#endif

    /// <summary>
    /// Less than operator.
    /// </summary>
    /// <param name="left">The LHS of the comparison.</param>
    /// <param name="right">The RHS of the comparison.</param>
    /// <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
    public static bool operator <(in <#= TypeDeclaration.DotnetTypeName #> left, in <#= TypeDeclaration.DotnetTypeName #> right)
    {
        return left.IsNotNullOrUndefined() && right.IsNotNullOrUndefined() && Compare(left, right) < 0;
    }

    /// <summary>
    /// Greater than operator.
    /// </summary>
    /// <param name="left">The LHS of the comparison.</param>
    /// <param name="right">The RHS of the comparison.</param>
    /// <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
    public static bool operator >(in <#= TypeDeclaration.DotnetTypeName #> left, in <#= TypeDeclaration.DotnetTypeName #> right)
    {
        return left.IsNotNullOrUndefined() && right.IsNotNullOrUndefined() && Compare(left, right) > 0;
    }

    /// <summary>
    /// Less than operator.
    /// </summary>
    /// <param name="left">The LHS of the comparison.</param>
    /// <param name="right">The RHS of the comparison.</param>
    /// <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
    public static bool operator <=(in <#= TypeDeclaration.DotnetTypeName #> left, in <#= TypeDeclaration.DotnetTypeName #> right)
    {
        return left.IsNotNullOrUndefined() && right.IsNotNullOrUndefined() && Compare(left, right) <= 0;
    }

    /// <summary>
    /// Greater than operator.
    /// </summary>
    /// <param name="left">The LHS of the comparison.</param>
    /// <param name="right">The RHS of the comparison.</param>
    /// <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
    public static bool operator >=(in <#= TypeDeclaration.DotnetTypeName #> left, in <#= TypeDeclaration.DotnetTypeName #> right)
    {
        return left.IsNotNullOrUndefined() && right.IsNotNullOrUndefined() && Compare(left, right) >= 0;
    }

        /// <summary>
    /// Adds two values together to compute their sum.
    /// </summary>
    /// <param name="left">The left hand side.</param>
    /// <param name="right">The right hand side.</param>
    /// <returns>The resulting value.</returns>
    public static <#= TypeDeclaration.DotnetTypeName #> operator +(<#= TypeDeclaration.DotnetTypeName #> left, <#= TypeDeclaration.DotnetTypeName #> right)
    {
        return new(left.AsBinaryJsonNumber + right.AsBinaryJsonNumber);
    }

    /// <summary>
    /// Subtracts two values together to compute their difference.
    /// </summary>
    /// <param name="left">The left hand side.</param>
    /// <param name="right">The right hand side.</param>
    /// <returns>The resulting value.</returns>
    public static <#= TypeDeclaration.DotnetTypeName #> operator -(<#= TypeDeclaration.DotnetTypeName #> left, <#= TypeDeclaration.DotnetTypeName #> right)
    {
        return new(left.AsBinaryJsonNumber - right.AsBinaryJsonNumber);
    }

    /// <summary>
    /// Multiplies two values together.
    /// </summary>
    /// <param name="left">The left hand side.</param>
    /// <param name="right">The right hand side.</param>
    /// <returns>The resulting value.</returns>
    public static <#= TypeDeclaration.DotnetTypeName #> operator *(<#= TypeDeclaration.DotnetTypeName #> left, <#= TypeDeclaration.DotnetTypeName #> right)
    {
        return new(left.AsBinaryJsonNumber * right.AsBinaryJsonNumber);
    }

    /// <summary>
    /// Divides two values.
    /// </summary>
    /// <param name="left">The left hand side.</param>
    /// <param name="right">The right hand side.</param>
    /// <returns>The resulting value.</returns>
    public static <#= TypeDeclaration.DotnetTypeName #> operator /(<#= TypeDeclaration.DotnetTypeName #> left, <#= TypeDeclaration.DotnetTypeName #> right)
    {
        return new(left.AsBinaryJsonNumber / right.AsBinaryJsonNumber);
    }

    /// <summary>
    /// Increments the value.
    /// </summary>
    /// <param name="value">The value.</param>
    /// <returns>The resulting value.</returns>
    public static <#= TypeDeclaration.DotnetTypeName #> operator ++(<#= TypeDeclaration.DotnetTypeName #> value)
    {
        BinaryJsonNumber num = value.AsBinaryJsonNumber;
        return new(num++);
    }

    /// <summary>
    /// Decrements the value.
    /// </summary>
    /// <param name="value">The value.</param>
    /// <returns>The resulting value.</returns>
    public static <#= TypeDeclaration.DotnetTypeName #> operator --(<#= TypeDeclaration.DotnetTypeName #> value)
    {
        BinaryJsonNumber num = value.AsBinaryJsonNumber;
        return new(num--);
    }

    /// <summary>
    /// Compare with another number.
    /// </summary>
    /// <param name="lhs">The lhs of the comparison.</param>
    /// <param name="rhs">The rhs of the comparison.</param>
    /// <returns>0 if the numbers are equal, -1 if the lhs is less than the rhs, and 1 if the lhs is greater than the rhs.</returns>
    public static int Compare(in <#= TypeDeclaration.DotnetTypeName #> lhs, in <#= TypeDeclaration.DotnetTypeName #> rhs)
    {
        if (lhs.ValueKind != rhs.ValueKind)
        {
            // We can't be equal if we are not the same underlying type
            return lhs.IsNullOrUndefined() ? 1 : -1;
        }

        if (lhs.IsNull())
        {
            // Nulls are always equal
            return 0;
        }

        if (lhs.backing == Backing.Number &&
            rhs.backing == Backing.Number)
        {
            return BinaryJsonNumber.Compare(lhs.numberBacking, rhs.numberBacking);
        }

        // After this point there is no need to check both value kinds because our first quick test verified that they were the same.
        // If either one is a Backing.Number or a JsonValueKind.Number then we know the rhs is compatible.
        if (lhs.backing == Backing.Number &&
            rhs.backing == Backing.Number)
        {
            return BinaryJsonNumber.Compare(lhs.numberBacking, rhs.numberBacking);
        }

        if (lhs.backing == Backing.Number &&
            rhs.backing == Backing.JsonElement)
        {
            return BinaryJsonNumber.Compare(lhs.numberBacking, rhs.jsonElementBacking);
        }

        if (lhs.backing == Backing.JsonElement && rhs.backing == Backing.Number)
        {
            return BinaryJsonNumber.Compare(lhs.jsonElementBacking, rhs.numberBacking);
        }

        if (lhs.backing == Backing.JsonElement && rhs.backing == Backing.JsonElement && rhs.jsonElementBacking.ValueKind == JsonValueKind.Number)
        {
            return JsonValueHelpers.NumericCompare(lhs.jsonElementBacking, rhs.jsonElementBacking);
        }

        throw new InvalidOperationException();
    }
<# if(ConversionOperatorToByte == "implicit")
   { #>

   /// <summary>
   /// Gets the value as a byte.
   /// </summary>
   /// <returns>The value as a byte.</returns>
    public byte AsByte() => (byte)this;
<# }
   if(ConversionOperatorToSByte == "implicit")
   { #>

   /// <summary>
   /// Gets the value as an sbyte.
   /// </summary>
   /// <returns>The value as an sbyte.</returns>
    public sbyte AsSByte() => (sbyte)this;
<# }
   if(ConversionOperatorToInt16 == "implicit")
   { #>

   /// <summary>
   /// Gets the value as a short.
   /// </summary>
   /// <returns>The value as a short.</returns>
    public short AsInt16() => (short)this;
<# }

   if(ConversionOperatorToUInt16== "implicit")
   { #>

   /// <summary>
   /// Gets the value as a ushort.
   /// </summary>
   /// <returns>The value as a ushort.</returns>
    public ushort AsUInt16() => (ushort)this;
<# }

   if(ConversionOperatorToInt32 == "implicit")
   { #>

   /// <summary>
   /// Gets the value as a int.
   /// </summary>
   /// <returns>The value as an int.</returns>
    public int AsInt32() => (int)this;
<# }

   if(ConversionOperatorToUInt32 == "implicit")
   { #>

   /// <summary>
   /// Gets the value as a uint.
   /// </summary>
   /// <returns>The value as a uint.</returns>
    public uint AsUInt32() => (uint)this;
<# }
 
   if(ConversionOperatorToInt64 == "implicit")
   { #>

   /// <summary>
   /// Gets the value as a long.
   /// </summary>
   /// <returns>The value as a long.</returns>
    public long AsInt64() => (long)this;
<# }

   if(ConversionOperatorToUInt64 == "implicit")
   { #>

   /// <summary>
   /// Gets the value as a ulong.
   /// </summary>
   /// <returns>The value as a ulong.</returns>
    public ulong AsUInt64() => (ulong)this;
<# }

   if(ConversionOperatorToInt128 == "implicit")
   { #>

#if NET8_0_OR_GREATER
   /// <summary>
   /// Gets the value as an Int128.
   /// </summary>
   /// <returns>The value as an Int128.</returns>
    public Int128 AsInt128() => (Int128)this;
#endif
<# }

   if(ConversionOperatorToUInt128 == "implicit")
   { #>

#if NET8_0_OR_GREATER
   /// <summary>
   /// Gets the value as a UInt128.
   /// </summary>
   /// <returns>The value as a UInt128.</returns>
    public UInt128 AsUInt128() => (UInt128)this;
#endif
<# }

   if(ConversionOperatorToHalf == "implicit")
   { #>

#if NET8_0_OR_GREATER
   /// <summary>
   /// Gets the value as a Half.
   /// </summary>
   /// <returns>The value as a Half.</returns>
    public Half AsHalf() => (Half)this;
#endif
<# }

   if(ConversionOperatorToSingle == "implicit")
   { #>

   /// <summary>
   /// Gets the value as a float.
   /// </summary>
   /// <returns>The value as a float.</returns>
    public float AsSingle() => (float)this;
<# }

   if(ConversionOperatorToDouble == "implicit")
   { #>

   /// <summary>
   /// Gets the value as a double.
   /// </summary>
   /// <returns>The value as a double.</returns>
    public double AsDouble() => (double)this;
<# }

   if(ConversionOperatorToDecimal == "implicit")
   { #>

   /// <summary>
   /// Gets the value as a decimal.
   /// </summary>
   /// <returns>The value as a decimal.</returns>
    public decimal AsDecimal() => (decimal)this;
<# } #>

    /// <inheritdoc/>
    public BinaryJsonNumber AsBinaryJsonNumber => this.HasDotnetBacking ? this.numberBacking : BinaryJsonNumber.FromJson(this.jsonElementBacking);
}
<# EndNesting(); #>
<#+
    public bool ShouldGenerate
    {
        get
        {
            return IsImplicitNumber || IsNotImplicitType;
        }
    }
#>