<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Corvus.Json" #>
<#
    // This is only emitted if IsImplicitNumber is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.Number should not be emitted if IsImplicitString is false.");
    } #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace <#= Namespace #>;

<# BeginNesting(); #>
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct <#= TypeDeclaration.DotnetTypeName #> : IJsonNumber<<#= TypeDeclaration.DotnetTypeName #>>
{
   /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeDeclaration.DotnetTypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to construct the instance.</param>
    public <#= TypeDeclaration.DotnetTypeName #>(double value)
    {
        this.jsonElementBacking = default;
        this.backing = Backing.Number;
        this.numberBacking = value;
<#  if(IsImplicitBoolean || IsNotImplicitType)
    { #>
        this.boolBacking = default;
<#  }
    if(IsImplicitString || IsNotImplicitType)
    { #>
        this.stringBacking = string.Empty;
<#  }
    if(IsImplicitArray || IsNotImplicitType)
    { #>
        this.arrayBacking = ImmutableList<JsonAny>.Empty;
<#  }
    if(IsImplicitObject || IsNotImplicitType)
    { #>
        this.objectBacking = ImmutableDictionary<JsonPropertyName, JsonAny>.Empty;
<#  } #>
    }

    /// <summary>
    /// Conversion from JsonNumber.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator JsonNumber(<#= TypeDeclaration.DotnetTypeName #> value)
    {
        return JsonNumber.FromNumber(value);
    }

    /// <summary>
    /// Conversion to JsonNumber.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator <#= TypeDeclaration.DotnetTypeName #>(JsonNumber value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return new((double)value);
    }

    /// <summary>
    /// Conversion from double.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static implicit operator <#= TypeDeclaration.DotnetTypeName #>(double value)
    {
        return new(value);
    }

    /// <summary>
    /// Conversion to double.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as a double.</exception>
    public static implicit operator double(<#= TypeDeclaration.DotnetTypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.GetDouble();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking;
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Conversion to double.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as a double.</exception>
    public static explicit operator float(<#= TypeDeclaration.DotnetTypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.GetSingle();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return (float)value.numberBacking;
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Conversion from long.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static implicit operator <#= TypeDeclaration.DotnetTypeName #>(long value)
    {
        return new(value);
    }

    /// <summary>
    /// Conversion to double.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as a double.</exception>
    public static implicit operator long(<#= TypeDeclaration.DotnetTypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetInt64();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return (long)value.numberBacking;
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Less than operator.
    /// </summary>
    /// <param name="left">The LHS of the comparison.</param>
    /// <param name="right">The RHS of the comparison.</param>
    /// <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
    public static bool operator <(in <#= TypeDeclaration.DotnetTypeName #> left, in <#= TypeDeclaration.DotnetTypeName #> right)
    {
        return left.IsNotNullOrUndefined() && right.IsNotNullOrUndefined() && (double)left < (double)right;
    }

    /// <summary>
    /// Greater than operator.
    /// </summary>
    /// <param name="left">The LHS of the comparison.</param>
    /// <param name="right">The RHS of the comparison.</param>
    /// <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
    public static bool operator >(in <#= TypeDeclaration.DotnetTypeName #> left, in <#= TypeDeclaration.DotnetTypeName #> right)
    {
        return left.IsNotNullOrUndefined() && right.IsNotNullOrUndefined() && (double)left > (double)right;
    }
}
<# EndNesting(); #>
<#+
    public bool ShouldGenerate
    {
        get
        {
            return IsImplicitNumber || IsNotImplicitType;
        }
    }
#>