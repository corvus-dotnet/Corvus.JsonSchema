<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Corvus.Json" #>
<#
    // This is only emitted if HasOneOf is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.OneOf should not be emitted if HasOneOf is false.");
    } #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace <#= Namespace #>;

<# BeginNesting(); #>
<#= FormattedTypeDocumentation #>
public readonly partial struct <#= TypeDeclaration.DotnetTypeName #>
{
    /// <summary>
    /// Matches the value against each of the any of values, and returns the result of calling the provided match function for the first match found.
    /// </summary>
    /// <param name="context">The context to pass to the match function.</param>
<#  int oneOfItemIndex = 0;
    foreach (var oneOf in OneOf)
    { #>
    /// <param name="match<#= oneOfItemIndex #>">The function to call if the value matches the <see cref="<#= oneOf #>"/> type.</param>
<#      oneOfItemIndex++;
    } #>
    /// <param name="defaultMatch">The fallback match.</param>
    public TOut Match<TIn, TOut>(
        in TIn context<#  oneOfItemIndex = 0;
    foreach (var oneOf in OneOf)
    { #>,

        Matcher<<#= oneOf #>, TIn, TOut> match<#= oneOfItemIndex #><#      oneOfItemIndex++;
    } #>,
        Matcher<<#= TypeDeclaration.DotnetTypeName #>, TIn, TOut> defaultMatch)
    {
<#  oneOfItemIndex = 0;
    foreach (var oneOf in OneOf)
    { #>
        var oneOf<#= oneOfItemIndex #> = this.As<<#= oneOf #>>();
        if (oneOf<#= oneOfItemIndex #>.IsValid())
        {
            return match<#= oneOfItemIndex #>(oneOf<#= oneOfItemIndex #>, context);
        }

<#      oneOfItemIndex++;
    } #>
        return defaultMatch(this, context);
    }

    /// <summary>
    /// Matches the value against each of the any of values, and returns the result of calling the provided match function for the first match found.
    /// </summary>
<#  oneOfItemIndex = 0;
    foreach (var oneOf in OneOf)
    { #>
    /// <param name="match<#= oneOfItemIndex #>">The function to call if the value matches the <see cref="<#= oneOf #>"/> type.</param>
<#      oneOfItemIndex++;
    } #>
    /// <param name="defaultMatch">The fallback match.</param>
    public TOut Match<TOut>(<#  oneOfItemIndex = 0;
    foreach (var oneOf in OneOf)
    { #>
        Matcher<<#= oneOf #>, TOut> match<#= oneOfItemIndex #>,<#      oneOfItemIndex++;
    } #>
        Matcher<<#= TypeDeclaration.DotnetTypeName #>, TOut> defaultMatch)
    {
<#  oneOfItemIndex = 0;
    foreach (var oneOf in OneOf)
    { #>
        var oneOf<#= oneOfItemIndex #> = this.As<<#= oneOf #>>();
        if (oneOf<#= oneOfItemIndex #>.IsValid())
        {
            return match<#= oneOfItemIndex #>(oneOf<#= oneOfItemIndex #>);
        }

<#      oneOfItemIndex++;
    } #>
        return defaultMatch(this);
    }
}
<# EndNesting(); #>
<#+
    public bool ShouldGenerate
    {
        get
        {
            return HasOneOf;
        }
    }
#>