<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Corvus.Json" #>
<#
    // This is only emitted if HasPatternProperties is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.PatternProperties should not be emitted if HasPatternProperties is false.");
    } #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using System.Text.RegularExpressions;
using Corvus.Json;
using Corvus.Json.Internal;

namespace <#= Namespace #>;

<# BeginNesting(); #>
<#= FormattedTypeDocumentation #>
public readonly partial struct <#= TypeDeclaration.DotnetTypeName #>
{
<#  foreach(var patternProperty in PatternProperties)
    {#>
    /// <summary>
    /// A pattern property matching <#= Formatting.FormatLiteralOrNull(patternProperty.Pattern, true).Trim('"')#> producing a <see cref="<#= patternProperty.DotnetTypeName #>" />.
    /// </summary>
    public static Regex PatternProperty<#= PatternPropertySuffix(patternProperty) #> => new(<#= Formatting.FormatLiteralOrNull(patternProperty.Pattern, true) #>, RegexOptions.Compiled, TimeSpan.FromSeconds(1));
<#  } #>

    private static readonly ImmutableDictionary<Regex, PatternPropertyValidator> __CorvusPatternProperties = CreatePatternPropertiesValidators();

<#  foreach(var patternProperty in PatternProperties)
    { #>
    /// <summary>
    /// Determines if a property matches <#= Formatting.FormatLiteralOrNull(patternProperty.Pattern, true).Trim('"')#> producing a <see cref="<#= patternProperty.DotnetTypeName #>" />.
    /// </summary>
    public bool MatchesPattern<#= PatternPropertySuffix(patternProperty) #>(in JsonObjectProperty property)
    {
        return property.Name.IsMatch(PatternProperty<#= PatternPropertySuffix(patternProperty) #>);
    }

    /// <summary>
    /// Get a property value as the type matching the given pattern property <#= Formatting.FormatLiteralOrNull(patternProperty.Pattern, true).Trim('"')#> as a <see cref="<#= patternProperty.DotnetTypeName #>" />.
    /// </summary>
    public bool TryAsPattern<#= PatternPropertySuffix(patternProperty) #>(in JsonObjectProperty property, out  <#= patternProperty.DotnetTypeName #> result)
    {
        if (property.Name.IsMatch(PatternProperty<#= PatternPropertySuffix(patternProperty) #>))
        {
            result = property.ValueAs<<#= patternProperty.DotnetTypeName #>>();
            return true;
        }
        else
        {
            result = <#= patternProperty.DotnetTypeName #>.Undefined;
            return false;
        }
    }

    /// <summary>
    /// Try to get a property value as the type matching the given pattern property <#= Formatting.FormatLiteralOrNull(patternProperty.Pattern, true).Trim('"')#> as a <see cref="<#= patternProperty.DotnetTypeName #>" />.
    /// </summary>
    public <#= patternProperty.DotnetTypeName #> AsPattern<#= PatternPropertySuffix(patternProperty) #>(in JsonObjectProperty property)
    {
        return property.ValueAs<<#= patternProperty.DotnetTypeName #>>();
    }

<#  } #>

    private static ImmutableDictionary<Regex, PatternPropertyValidator> CreatePatternPropertiesValidators()
    {
        ImmutableDictionary<Regex, PatternPropertyValidator>.Builder builder =
            ImmutableDictionary.CreateBuilder<Regex, PatternPropertyValidator>();

<#  foreach (var patternProperty in PatternProperties)
    { #>
        builder.Add(
            PatternProperty<#= PatternPropertySuffix(patternProperty) #>,__CorvusValidatePatternProperty<#= PatternPropertySuffix(patternProperty) #>);
<#  } #>

        return builder.ToImmutable();
    }

<#  foreach (var patternProperty in PatternProperties)
    { #>
    private static ValidationContext __CorvusValidatePatternProperty<#= PatternPropertySuffix(patternProperty) #>(in JsonObjectProperty that, in ValidationContext validationContext, ValidationLevel level)
    {
        return that.ValueAs<<#= patternProperty.DotnetTypeName #>>().Validate(validationContext, level);
    }
<#  } #>
}
<# EndNesting(); #>
<#+
    public bool ShouldGenerate
    {
        get
        {
            return HasPatternProperties;
        }
    }
#>