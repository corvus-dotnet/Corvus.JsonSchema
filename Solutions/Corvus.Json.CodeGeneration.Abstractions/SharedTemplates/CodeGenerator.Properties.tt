<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Corvus.Json" #>
<#
    // This is only emitted if HasProperties is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.Properties should not be emitted if HasProperties is false.");
    } #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace <#= Namespace #>;

<# BeginNesting(); #>
<#= FormattedTypeDocumentation #>
public readonly partial struct <#= TypeDeclaration.DotnetTypeName #>
{
    /// <summary>
    /// The well-known property names in the JSON object.
    /// </summary>
    public static class JsonPropertyNames
    {
<#  foreach(var property in Properties)
    { #>
        /// <summary>
        /// JSON property name for <see cref="<#= property.DotnetPropertyName #>"/>.
        /// </summary>
        public static ReadOnlySpan<byte> <#= property.DotnetPropertyName #>Utf8 => <#= Formatting.FormatLiteralOrNull(property.JsonPropertyName, true)#>u8;

        /// <summary>
        /// JSON property name for <see cref="<#= property.DotnetPropertyName #>"/>.
        /// </summary>
        public const string <#= property.DotnetPropertyName #> = <#= Formatting.FormatLiteralOrNull(property.JsonPropertyName, true)#>;
<#  } #>
    }
<#  foreach(var property in Properties)
    { #>

    /// <summary>
    /// Gets the <#= property.IsRequired ? "" : "(optional) " #><c><#= Formatting.FormatLiteralOrNull(property.JsonPropertyName, false) #></c> property.<#= property.IsRequired ? " If the instance is valid, this property will be not be <c>undefined</c>." : "" #>
    /// </summary>
<#      if (property.HasXmlDocumentationRemarks)
        { #>
    /// <remarks>
    <#= property.XmlDocumentationRemarks #>/// </remarks>
<#      }

        if (property.IsDeprecated)
        { #>
    [Obsolete("This property is defined as deprecated in the JSON schema")]

<#      } #>
    public <#= property.Type.FullyQualifiedDotnetTypeName #> <#= property.DotnetPropertyName #>
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.<#= property.DotnetPropertyName #>Utf8, out JsonElement result))
                {
                    return new  <#= property.Type.FullyQualifiedDotnetTypeName #>(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if(this.objectBacking.TryGetValue(JsonPropertyNames.<#= property.DotnetPropertyName #>, out JsonAny result))
                {
                    return result.As<<#= property.Type.FullyQualifiedDotnetTypeName #>>();
                }
            }

            return default;
        }
    }
<#  } #>

    /// <summary>
    /// Creates an instance of a <see cref="<#= TypeDeclaration.DotnetTypeName #>"/>.
    /// </summary>
    public static <#= TypeDeclaration.DotnetTypeName #> Create(
<#  bool isFirstCreateParameter = true;
    foreach(var property in RequiredAllOfAndRefProperties)
    {
        if (!IsConst(property.Type))
        {
            if (isFirstCreateParameter)
            {
                isFirstCreateParameter = false;
            }
            else
            {
    #>, <#
            }
    #>
        <#= property.Type.FullyQualifiedDotnetTypeName #> <#= property.DotnetParameterName #>
<#      }
    }

    foreach(var property in OptionalAllOfAndRefProperties)
    {
        if (isFirstCreateParameter)
        {
            isFirstCreateParameter = false;
        }
        else
        {
    #>,<#
        }
    #>
        <#= property.Type.FullyQualifiedDotnetTypeName #>? <#= property.DotnetParameterName #> = null <#
    }
    #>)
    {
        var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
<#  foreach(var property in RequiredAllOfAndRefProperties)
    {
        if (IsConst(property.Type))
        { #>
        builder.Add(JsonPropertyNames.<#= property.DotnetPropertyName#>, new <#= property.Type.FullyQualifiedDotnetTypeName #>().AsAny);
<#      }
        else
        { #>
        builder.Add(JsonPropertyNames.<#= property.DotnetPropertyName#>, <#= property.DotnetParameterName #>.AsAny);
<#      }
    }

    foreach(var property in OptionalAllOfAndRefProperties)
    { #>

        if (<#= property.DotnetParameterName #> is <#= property.Type.FullyQualifiedDotnetTypeName #> <#= property.DotnetParameterName #>__)
        {
            builder.Add(JsonPropertyNames.<#= property.DotnetPropertyName#>, <#= property.DotnetParameterName #>__.AsAny);
        }
<#  } #>
        return new(builder.ToImmutable());
    }
<#  foreach(var property in Properties)
    {
        if (IsConst(property.Type))
        {
            continue;
        } #>

    /// <summary>
    /// Sets <#= Formatting.FormatLiteralOrNull(property.JsonPropertyName, true).Trim('"') #>.
    /// </summary>
    /// <param name="value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public <#= TypeDeclaration.DotnetTypeName #> With<#= property.DotnetPropertyName #>(in <#= property.Type.FullyQualifiedDotnetTypeName #> value)
    {
        return this.SetProperty(JsonPropertyNames.<#= property.DotnetPropertyName #>, value);
    }
<#  } #>

<#  foreach (var property in LocalProperties)
    { #>

    private static ValidationContext __CorvusValidate<#= property.DotnetPropertyName #>(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<<#= property.Type.FullyQualifiedDotnetTypeName #>>().Validate(validationContext, level);
    }
<#  } #>

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name="property">The property for which to get the validator.</param>
    /// <param name="hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name="propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)]out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
<#  bool isFirst = true;
    foreach (var property in LocalProperties)
    { #>
            <#= isFirst ? string.Empty : "else " #>if (property.NameEquals(JsonPropertyNames.<#= property.DotnetPropertyName #>Utf8))
            {
                propertyValidator = __CorvusValidate<#= property.DotnetPropertyName #>;
                return true;
            }
<#      isFirst = false;
    } #>
        }
        else
        {
<#  isFirst = true;
    foreach (var property in LocalProperties)
    { #>
            <#= isFirst ? string.Empty : "else " #>if (property.NameEquals(JsonPropertyNames.<#= property.DotnetPropertyName #>))
            {
                propertyValidator = __CorvusValidate<#= property.DotnetPropertyName #>;
                return true;
            }
<#      isFirst = false;
    } #>
        }

        propertyValidator = null;
        return false;
    }
}
<# EndNesting(); #>
<#+
    public bool ShouldGenerate
    {
        get
        {
            return HasProperties;
        }
    }
#>