<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Corvus.Json" #>
<#
    // This is only emitted if HasAllOf is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.Validate.AllOf should not be emitted if HasAllOf is false.");
    } #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace <#= Namespace #>;

<# BeginNesting(); #>
<#= FormattedTypeDocumentation #>
public readonly partial struct <#= TypeDeclaration.DotnetTypeName #>
{
    private ValidationContext ValidateAllOf(in ValidationContext validationContext, ValidationLevel level)
    {
        ValidationContext result = validationContext;

        if (level > ValidationLevel.Basic)
        {
            result = result.PushValidationLocationProperty("allOf");
        }

        ValidationContext childContextBase = result;

<#  int allOfIndex = 0;
    foreach (var allOf in AllOf)
    { #>

        ValidationContext childContext<#= allOfIndex #> = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext<#= allOfIndex #> = childContext<#= allOfIndex #>.PushValidationLocationArrayIndex(<#= allOfIndex #>);
        }

        ValidationContext allOfResult<#= allOfIndex #> = this.As<<#= allOf #>>().Validate(childContext<#= allOfIndex #>.CreateChildContext(), level);

        if (!allOfResult<#= allOfIndex #>.IsValid)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.MergeChildContext(allOfResult<#= allOfIndex #>, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.MergeChildContext(allOfResult<#= allOfIndex #>, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
            }
            else
            {
                result = result.MergeChildContext(allOfResult<#= allOfIndex #>, false).WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            result = result.MergeChildContext(allOfResult<#= allOfIndex #>, level >= ValidationLevel.Detailed);
        }

<#      allOfIndex++;
    } #>

        if (level > ValidationLevel.Basic)
        {
            result = result.PopLocation(); // allOf
        }

        return result;
    }
}
<# EndNesting(); #>
<#+
    public bool ShouldGenerate
    {
        get
        {
            return HasAllOf;
        }
    }
#>