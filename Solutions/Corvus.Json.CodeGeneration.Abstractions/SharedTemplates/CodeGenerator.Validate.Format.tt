<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Corvus.Json" #>
<#
    // This is only emitted if HasFormat is true
    if(!HasFormat)
    {
        throw new InvalidOperationException("CodeGenerator.Validate.Format should not be emitted if HasFormat is false.");
    } #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Text.Json;
using Corvus.Json;

namespace <#= Namespace #>;

<# BeginNesting(); #>
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct <#= TypeDeclaration.DotnetTypeName #>
{
    private ValidationContext ValidateFormat(JsonValueKind valueKind, in ValidationContext result, ValidationLevel level)
    {
        if (valueKind != JsonValueKind.String)
        {
            return result;
        }
<#  if (IsJsonRelativePointer)
    { #>
        return Corvus.Json.Validate.TypeRelativePointer(this, result, level);
<#  }
    else if (IsJsonDate)
    { #>
        return Corvus.Json.Validate.TypeDate(this, result, level);
<#  }
    else if (IsJsonDateTime)
    { #>
        return Corvus.Json.Validate.TypeDateTime(this, result, level);
<#  }
    else if (IsJsonDuration)
    { #>
        return Corvus.Json.Validate.TypeDuration(this, result, level);
<#  }
    else if (IsJsonTime)
    { #>
        return Corvus.Json.Validate.TypeTime(this, result, level);
<#  }
    else if (IsJsonEmail)
    { #>
        return Corvus.Json.Validate.TypeEmail(this, result, level);
<#  }
    else if (IsJsonHostname)
    { #>
        return Corvus.Json.Validate.TypeHostname(this, result, level);
<#  }
    else if (IsJsonIdnEmail)
    { #>
        return Corvus.Json.Validate.TypeIdnEmail(this, result, level);
<#  }
    else if (IsJsonIdnHostname)
    { #>
        return Corvus.Json.Validate.TypeIdnHostName(this, result, level);
<#  }
    else if (IsJsonInteger)
    { #>
        return Corvus.Json.Validate.TypeInteger(this, result, level);
<#  }
    else if (IsJsonIpV4)
    { #>
        return Corvus.Json.Validate.TypeIpV4(this, result, level);
<#  }
    else if (IsJsonIpV6)
    { #>
        return Corvus.Json.Validate.TypeIpV6(this, result, level);
<#  }
    else if (IsJsonIri)
    { #>
        return Corvus.Json.Validate.TypeIri(this, result, level);
<#  }
    else if (IsJsonIriReference)
    { #>
        return Corvus.Json.Validate.TypeIriReference(this, result, level);
<#  }
    else if (IsJsonPointer)
    { #>
        return Corvus.Json.Validate.TypePointer(this, result, level);
<#  }
    else if (IsJsonRegex)
    { #>
        return Corvus.Json.Validate.TypeRegex(this, result, level);
<#  }
    else if (IsJsonTime)
    { #>
        return Corvus.Json.Validate.TypeTime(this, result, level);
<#  }
    else if (IsJsonUri)
    { #>
        return Corvus.Json.Validate.TypeUri(this, result, level);
<#  }
    else if (IsJsonUriReference)
    { #>
        return Corvus.Json.Validate.TypeUriReference(this, result, level);
<#  }
    else if (IsJsonUriTemplate)
    { #>
        return Corvus.Json.Validate.TypeUriTemplate(this, result, level);
<#  }
    else if (IsJsonBase64Content)
    { #>
        return Corvus.Json.Validate.TypeBase64Content(this, result, level);
<#  }
    else if (IsJsonBase64String)
    { #>
        return Corvus.Json.Validate.TypeBase64String(this, result, level);
<#  }
    else if (IsJsonContent)
    { #>
        return Corvus.Json.Validate.TypeContent(this, result, level);
<#  }
    else if (IsJsonUuid)
    { #>
        return Corvus.Json.Validate.TypeUuid(this, result, level);
<#  }
    else
    { #>
        return result;
<#  } #>
    }
}
<# EndNesting(); #>
<#+
    public bool ShouldGenerate
    {
        get
        {
            return HasFormat;
        }
    }
#>