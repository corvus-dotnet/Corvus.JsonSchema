<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Corvus.Json" #>
<#
    // This is only emitted if HasIfThenElse is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.Validate.IfThenElse should not be emitted if HasIfThenElse is false.");
    } #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using Corvus.Json;

namespace <#= Namespace #>;

<# BeginNesting(); #>
<#= FormattedTypeDocumentation #>
public readonly partial struct <#= TypeDeclaration.DotnetTypeName #>
{
    private ValidationContext ValidateIfThenElse(in ValidationContext validationContext, ValidationLevel level)
    {
        ValidationContext result = validationContext;

        if (level > ValidationLevel.Basic)
        {
            result = result.PushValidationLocationProperty("if");
        }

        ValidationContext ifResult = this.As<<#= IfFullyQualifiedDotnetTypeName #>>().Validate(validationContext.CreateChildContext(), level);

        if (!ifResult.IsValid)
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = validationContext.MergeResults(false, level, ifResult, ifResult);
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeChildContext(ifResult, true);
            }
            else
            {
                result = result.MergeChildContext(ifResult, false);
            }
        }

        if (level > ValidationLevel.Basic)
        {
            result = result.PopLocation(); // if
        }
<#  if (HasThen)
    { #>

        if (ifResult.IsValid)
        {
            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationProperty("then");
            }

            ValidationContext thenResult = this.As<<#= ThenFullyQualifiedDotnetTypeName #>>().Validate(validationContext.CreateChildContext(), level);

            if (!thenResult.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = validationContext.MergeResults(false, level, ifResult, thenResult).WithResult(isValid: false, "Validation 9.2.2.2. then - failed to validate against the then schema.");
                }
                else
                {
                    result = validationContext.WithResult(isValid: false);
                }
            }
            else
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(thenResult, true);
                }

                result = result.MergeChildContext(thenResult, false);
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation(); // then
            }
        }
<#  }
    if (HasElse)
    { #>

        if (!ifResult.IsValid)
        {
            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationProperty("else");
            }

            ValidationContext elseResult = this.As<<#= ElseFullyQualifiedDotnetTypeName #>>().Validate(validationContext.CreateChildContext(), level);

            if (!elseResult.IsValid)
            {
                if (level >= ValidationLevel.Detailed)
                {
                    result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, "Validation 9.2.2.3. else - failed to validate against the else schema.");
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = validationContext.MergeResults(false, level, ifResult, elseResult).WithResult(isValid: false, "Validation 9.2.2.2. else - failed to validate against the else schema.");
                }
                else
                {
                    result = validationContext.WithResult(isValid: false);
                }
            }
            else
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(elseResult, true);
                }

                result = result.MergeChildContext(elseResult, false);
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation(); // else
            }
        }
<#  } #>

        return result;
    }
}
<# EndNesting(); #>
<#+
    public bool ShouldGenerate
    {
        get
        {
            return HasIfThenElse;
        }
    }
#>