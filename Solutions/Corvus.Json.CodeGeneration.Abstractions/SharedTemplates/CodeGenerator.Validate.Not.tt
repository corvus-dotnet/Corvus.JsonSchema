<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Corvus.Json" #>
<#
    // This is only emitted if HasNot is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.Validate.Not should not be emitted if HasNot is false.");
    } #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using Corvus.Json;
using Corvus.Json.Internal;

namespace <#= Namespace #>;

<# BeginNesting(); #>
<#= FormattedTypeDocumentation #>
public readonly partial struct <#= TypeDeclaration.DotnetTypeName #>
{
    private ValidationContext ValidateNot(ValidationContext validationContext, ValidationLevel level)
    {
        ValidationContext result = validationContext;

        if (level > ValidationLevel.Basic)
        {
            result = result.PushValidationLocationProperty("not");
        }

        ValidationContext notResult = this.As<<#= NotDotnetTypeName #>>().Validate(validationContext.CreateChildContext(), level);
        if (notResult.IsValid)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = validationContext.MergeResults(false, level, notResult).WithResult(isValid: false, "Validation 9.2.1.4. not - incorrectly validated successfully against the not schema.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = validationContext.MergeResults(false, level, notResult).WithResult(isValid: false, "Validation 9.2.1.4. not - incorrectly validated succesfully against the not schema.");
            }
            else
            {
                result = validationContext.WithResult(isValid: false);
            }
        }
        else if (level >= ValidationLevel.Basic)
        {
            result = result.MergeResults(result.IsValid, level, notResult);
        }

        if (level > ValidationLevel.Basic)
        {
            result = result.PopLocation(); // not
        }

        return result;
    }
}
<# EndNesting(); #>
<#+
    public bool ShouldGenerate
    {
        get
        {
            return HasNot;
        }
    }
#>