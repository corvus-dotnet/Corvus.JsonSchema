<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Corvus.Json" #>
<#
    // This is only emitted if HasOneOf is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.Validate.OneOf should not be emitted if HasOneOf is false.");
    } #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using Corvus.Json;

namespace <#= Namespace #>;

<# BeginNesting(); #>
<#= FormattedTypeDocumentation #>
public readonly partial struct <#= TypeDeclaration.DotnetTypeName #>
{
    private ValidationContext ValidateOneOf(in ValidationContext validationContext, ValidationLevel level)
    {
        ValidationContext result = validationContext;

        if (level > ValidationLevel.Basic)
        {
            result = result.PushValidationLocationProperty("oneOf");
        }

        ValidationContext childContextBase = result;

        int oneOfCount = 0;
<#  int oneOfIndex = 0;
    foreach (var oneOf in OneOf)
    { #>

        ValidationContext childContext<#= oneOfIndex #> = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext<#= oneOfIndex #> = childContext<#= oneOfIndex #>.PushValidationLocationArrayIndex(<#= oneOfIndex #>);
        }

        ValidationContext oneOfResult<#= oneOfIndex#> = this.As<<#= oneOf #>>().Validate(childContext<#= oneOfIndex #>.CreateChildContext(), level);

        if (oneOfResult<#= oneOfIndex #>.IsValid)
        {
            result = result.MergeChildContext(oneOfResult<#= oneOfIndex #>, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
<#      if (!HasUnevaluatedItems && !HasUnevaluatedProperties)
        { #>
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
<#      } #>
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult<#= oneOfIndex #>);
            }
        }

<#      oneOfIndex++;
    } #>

        if (oneOfCount == 1)
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation 10.2.1.3. onef - validated against the oneOf schema.");
            }
        }
        else if (oneOfCount == 0)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - failed to validate against any of the oneOf schema.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - failed to validate against any of the oneOf schema.");
            }
            else
            {
                result = result.WithResult(isValid: false);
            }
        }
        else
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - validated against more than one of the oneOf schema.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - failed to validate against more than one of the oneOf schema.");
            }
            else
            {
                result = result.WithResult(isValid: false);
            }
        }

        if (level > ValidationLevel.Basic)
        {
            result = result.PopLocation(); // oneOf
        }

        return result;
    }
}
<# EndNesting(); #>
<#+
    public bool ShouldGenerate
    {
        get
        {
            return HasOneOf;
        }
    }
#>