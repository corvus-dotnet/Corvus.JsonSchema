<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Corvus.Json" #>
<#
    // This is only emitted if HasRef is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.Validate.Ref should not be emitted if HasRef is false.");
    } #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using Corvus.Json;

namespace <#= Namespace #>;

<# BeginNesting(); #>
<#= FormattedTypeDocumentation #>
public readonly partial struct <#= TypeDeclaration.DotnetTypeName #>
{
    private ValidationContext ValidateRef(in ValidationContext validationContext, ValidationLevel level)
    {        
        ValidationContext result = validationContext;

        if (level > ValidationLevel.Basic)
        {
            result = result.PushValidationLocationProperty("$ref");
        }

        ValidationContext refResult = this.As<<#= RefDotnetTypeName #>>().Validate(validationContext.CreateChildContext(), level);

        if (!refResult.IsValid)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = validationContext.MergeResults(false, level, refResult);
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = validationContext.MergeResults(false, level, refResult);
            }
            else
            {
                result = validationContext.WithResult(isValid: false);
            }
        }
        else
        {
            if (level >= ValidationLevel.Basic)
            {
                result = result.MergeResults(result.IsValid, level, refResult);
            }

            result = result.MergeChildContext(refResult, false);
        }

        if (level > ValidationLevel.Basic)
        {
            result = result.PopLocation();
        }

        return result;
    }
}
<# EndNesting(); #>
<#+
    public bool ShouldGenerate
    {
        get
        {
            return HasRef;
        }
    }
#>