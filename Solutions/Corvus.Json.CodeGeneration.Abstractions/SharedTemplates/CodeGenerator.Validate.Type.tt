<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Corvus.Json" #>
<#
    // This is only emitted if HasType is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.Validate.Type should not be emitted if HasType is false.");
    } #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Text.Json;
using Corvus.Json;

namespace <#= Namespace #>;

<# BeginNesting(); #>
<#= FormattedTypeDocumentation #>
public readonly partial struct <#= TypeDeclaration.DotnetTypeName #>
{
    private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
    {
        ValidationContext result = validationContext;
        bool isValid = false;
<#  if (HasStringType)
    { #>

        ValidationContext localResultString = Corvus.Json.Validate.TypeString(valueKind, result.CreateChildContext(), level);
        if (level == ValidationLevel.Flag && localResultString.IsValid)
        {
            return validationContext;
        }

        if (localResultString.IsValid)
        {
            isValid = true;
        }
<#  }
    if (HasObjectType)
    { #>

        ValidationContext localResultObject = Corvus.Json.Validate.TypeObject(valueKind, result.CreateChildContext(), level);
        if (level == ValidationLevel.Flag && localResultObject.IsValid)
        {
            return validationContext;
        }

        if (localResultObject.IsValid)
        {
            isValid = true;
        }
<#  }
    if (HasArrayType)
    { #>

        ValidationContext localResultArray = Corvus.Json.Validate.TypeArray(valueKind, result.CreateChildContext(), level);
        if (level == ValidationLevel.Flag && localResultArray.IsValid)
        {
            return validationContext;
        }

        if (localResultArray.IsValid)
        {
            isValid = true;
        }
<#  }
    if (HasNumberType)
    { #>

        ValidationContext localResultNumber = Corvus.Json.Validate.TypeNumber(valueKind, result.CreateChildContext(), level);
        if (level == ValidationLevel.Flag && localResultNumber.IsValid)
        {
            return validationContext;
        }

        if (localResultNumber.IsValid)
        {
            isValid = true;
        }
<#  }
    if (HasIntegerType)
    { #>

        ValidationContext localResultInteger = Corvus.Json.Validate.TypeInteger(this, result.CreateChildContext(), level);
        if (level == ValidationLevel.Flag && localResultInteger.IsValid)
        {
            return validationContext;
        }

        if (localResultInteger.IsValid)
        {
            isValid = true;
        }
<#  }
    if (HasBooleanType)
    { #>

        ValidationContext localResultBoolean = Corvus.Json.Validate.TypeBoolean(valueKind, result.CreateChildContext(), level);
        if (level == ValidationLevel.Flag && localResultBoolean.IsValid)
        {
            return validationContext;
        }

        if (localResultBoolean.IsValid)
        {
            isValid = true;
        }
<#  }
    if (HasNullType)
    { #>

        ValidationContext localResultNull = Corvus.Json.Validate.TypeNull(valueKind, result.CreateChildContext(), level);
        if (level == ValidationLevel.Flag && localResultNull.IsValid)
        {
            return validationContext;
        }

        if (localResultNull.IsValid)
        {
            isValid = true;
        }
<#  } #>

        result = result.MergeResults(
            isValid,
            level,
<#= HasStringType ? "           localResultString" : "" #><#= HasStringType ? (HasObjectType || HasArrayType || HasNumberType || HasIntegerType || HasBooleanType || HasNullType ? "," : ");") : "" #>
<#= HasObjectType ? "           localResultObject" : "" #><#= HasObjectType ? (HasArrayType || HasNumberType || HasIntegerType || HasBooleanType || HasNullType ? "," : ");") : "" #>
<#= HasArrayType ? "            localResultArray" : "" #><#= HasArrayType ? (HasNumberType || HasIntegerType || HasBooleanType || HasNullType ? "," : ");") : "" #>
<#= HasNumberType ? "           localResultNumber" : "" #><#= HasNumberType ? (HasIntegerType || HasBooleanType || HasNullType ? "," : ");") : "" #>
<#= HasIntegerType ? "          localResultInteger" : "" #><#= HasIntegerType ? (HasBooleanType || HasNullType ? "," : ");") : "" #>
<#= HasBooleanType ? "          localResultBoolean" : "" #><#= HasBooleanType ? (HasNullType ? "," : ");") : "" #>
<#= HasNullType ? "         localResultNull);" : "" #>

            return result;
        }
}
<# EndNesting(); #>
<#+
    public bool ShouldGenerate
    {
        get
        {
            return HasType;
        }
    }
#>