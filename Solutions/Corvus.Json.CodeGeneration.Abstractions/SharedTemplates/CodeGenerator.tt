<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Corvus.Json" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

using System.Buffers;
using System.ComponentModel;
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace <#= Namespace #>;

<# BeginNesting(); #>
<#= FormattedTypeDocumentation #>
[System.Text.Json.Serialization.JsonConverter(typeof(Corvus.Json.Internal.JsonValueConverter<<#= TypeDeclaration.DotnetTypeName #>>))]
public readonly partial struct <#= TypeDeclaration.DotnetTypeName #>
{
    private readonly Backing backing;
    private readonly JsonElement jsonElementBacking;
<#  if(IsImplicitString || IsNotImplicitType)
    { #>
    private readonly string stringBacking;
<#  }
    if(IsImplicitBoolean || IsNotImplicitType)
    { #>
    private readonly bool boolBacking;
<#  }
    if(IsImplicitNumber || IsNotImplicitType)
    { #>
    private readonly BinaryJsonNumber numberBacking;
<#  }
    if(IsImplicitArray || IsNotImplicitType)
    { #>
    private readonly ImmutableList<JsonAny> arrayBacking;
<#  }
    if(IsImplicitObject || IsNotImplicitType)
    { #>
    private readonly ImmutableList<JsonObjectProperty> objectBacking;
<#  } #>

<#  if(!HasConst)
    { #>
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeDeclaration.DotnetTypeName #>"/> struct.
    /// </summary>
    public <#= TypeDeclaration.DotnetTypeName #>()
    {
        this.jsonElementBacking = default;
        this.backing = Backing.JsonElement;
<#      if(IsImplicitString || IsNotImplicitType)
        { #>
        this.stringBacking = string.Empty;
<#      }
        if(IsImplicitBoolean || IsNotImplicitType)
        { #>
        this.boolBacking = default;
<#      }
        if(IsImplicitNumber || IsNotImplicitType)
        { #>
        this.numberBacking = default;
<#      }
        if(IsImplicitArray || IsNotImplicitType)
        { #>
        this.arrayBacking = ImmutableList<JsonAny>.Empty;
<#      }
        if(IsImplicitObject || IsNotImplicitType)
        { #>
        this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
<#      } #>
    }
<#  } #>

    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeDeclaration.DotnetTypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to construct the instance.</param>
    public <#= TypeDeclaration.DotnetTypeName #>(in JsonElement value)
    {
        this.jsonElementBacking = value;
        this.backing = Backing.JsonElement;
<#  if(IsImplicitString || IsNotImplicitType)
    { #>
        this.stringBacking = string.Empty;
<#  }
    if(IsImplicitBoolean || IsNotImplicitType)
    { #>
        this.boolBacking = default;
<#  }
    if(IsImplicitNumber || IsNotImplicitType)
    { #>
        this.numberBacking = default;
<#  }
    if(IsImplicitArray || IsNotImplicitType)
    { #>
        this.arrayBacking = ImmutableList<JsonAny>.Empty;
<#  }
    if(IsImplicitObject || IsNotImplicitType)
    { #>
        this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
<#  } #>
    }

    /// <summary>
    /// Gets the schema location from which this type was generated.
    /// </summary>
    public static string SchemaLocation { get; } = <#= Formatting.FormatLiteralOrNull(TypeDeclaration.RelativeSchemaLocation.ToString(), true) #>;

    /// <summary>
    /// Gets a Null instance.
    /// </summary>
    public static <#= TypeDeclaration.DotnetTypeName #> Null { get; } = new(JsonValueHelpers.NullElement);

    /// <summary>
    /// Gets an Undefined instance.
    /// </summary>
    public static <#= TypeDeclaration.DotnetTypeName #> Undefined { get; }

    /// <summary>
    /// Gets the default instance of the type.
    /// </summary>
<#  if (!HasDefault)
    { #>
    public static <#= TypeDeclaration.DotnetTypeName #> DefaultInstance { get; }
<#  }
    else
    {#>
<#      if(HasDefaultString)
        { #>
    public static <#= TypeDeclaration.DotnetTypeName #> DefaultInstance { get; } = <#= TypeDeclaration.DotnetTypeName #>.ParseValue(<#= DefaultString #>u8);
<#      }
        else if(HasDefaultBoolean)
        { #>
    public static <#= TypeDeclaration.DotnetTypeName #> DefaultInstance { get; } = <#= TypeDeclaration.DotnetTypeName #>.ParseValue(<#= DefaultBoolean #>u8);
<#      }
        else if(HasDefaultNumber)
        { #>
    public static <#= TypeDeclaration.DotnetTypeName #> DefaultInstance { get; } = <#= TypeDeclaration.DotnetTypeName #>.ParseValue(<#= DefaultNumber #>u8);
<#      }
        else if(HasDefaultObject)
        { #>
    public static <#= TypeDeclaration.DotnetTypeName #> DefaultInstance { get; } = <#= TypeDeclaration.DotnetTypeName #>.ParseValue(<#= DefaultObject #>u8);
<#      }
        else if(HasDefaultArray)
        { #>
    public static <#= TypeDeclaration.DotnetTypeName #> DefaultInstance { get; } = <#= TypeDeclaration.DotnetTypeName #>.ParseValue(<#= DefaultArray #>u8);
<#      }
        else if(HasDefaultNull)
        { #>
    public static <#= TypeDeclaration.DotnetTypeName #> DefaultInstance { get; } = <#= TypeDeclaration.DotnetTypeName #>.ParseValue("null"u8);
<#      }
    } #>

    /// <inheritdoc/>
    public JsonAny AsAny
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }
<#  if(IsImplicitString || IsNotImplicitType)
    { #>
            if ((this.backing & Backing.String) != 0)
            {
                return new(this.stringBacking);
            }
<#  }
    if(IsImplicitBoolean || IsNotImplicitType)
    { #>
            if ((this.backing & Backing.Bool) != 0)
            {
                return new(this.boolBacking);
            }
<#  }
    if(IsImplicitNumber || IsNotImplicitType)
    { #>
            if ((this.backing & Backing.Number) != 0)
            {
                return new(this.numberBacking);
            }
<#  }
    if(IsImplicitArray || IsNotImplicitType)
    { #>
            if ((this.backing & Backing.Array) != 0)
            {
                return new(this.arrayBacking);
            }
<#  }
    if(IsImplicitObject || IsNotImplicitType)
    { #>
            if ((this.backing & Backing.Object) != 0)
            {
                return new(this.objectBacking);
            }
<#  } #>
            if ((this.backing & Backing.Null) != 0)
            {
                return JsonAny.Null;
            }

            return JsonAny.Undefined;
        }
    }

    /// <inheritdoc/>
    public JsonElement AsJsonElement
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return this.jsonElementBacking;
            }
<#  if(IsImplicitString || IsNotImplicitType)
    { #>

            if ((this.backing & Backing.String) != 0)
            {
                return JsonValueHelpers.StringToJsonElement(this.stringBacking);
            }
<#  }
    if(IsImplicitBoolean || IsNotImplicitType)
    { #>

            if ((this.backing & Backing.Bool) != 0)
            {
                return JsonValueHelpers.BoolToJsonElement(this.boolBacking);
            }
<#  }
    if(IsImplicitNumber || IsNotImplicitType)
    { #>

            if ((this.backing & Backing.Number) != 0)
            {
                return JsonValueHelpers.NumberToJsonElement(this.numberBacking);
            }
<#  }
    if(IsImplicitArray || IsNotImplicitType)
    { #>

            if ((this.backing & Backing.Array) != 0)
            {
                return JsonValueHelpers.ArrayToJsonElement(this.arrayBacking);
            }
<#  }
    if(IsImplicitObject || IsNotImplicitType)
    { #>

            if ((this.backing & Backing.Object) != 0)
            {
                return JsonValueHelpers.ObjectToJsonElement(this.objectBacking);
            }
<#  } #>

            if ((this.backing & Backing.Null) != 0)
            {
                return JsonValueHelpers.NullElement;
            }

            return default;
        }
    }

    /// <inheritdoc/>
<#  if(!IsImplicitString)
    { #>
    JsonString IJsonValue.AsString
<#  } 
    else
    {#>
    public JsonString AsString
<#  }#>
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }
<#  if(IsImplicitString || IsNotImplicitType)
    { #>

            if ((this.backing & Backing.String) != 0)
            {
                return new(this.stringBacking);
            }
<#  } #>

            throw new InvalidOperationException();
        }
    }

    /// <inheritdoc/>
<#  if(!IsImplicitBoolean)
    { #>
    JsonBoolean IJsonValue.AsBoolean
<#  } 
    else
    {#>
    public JsonBoolean AsBoolean
<#  }#>
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }
<#  if(IsImplicitBoolean || IsNotImplicitType)
    { #>

            if ((this.backing & Backing.Bool) != 0)
            {
                return new(this.boolBacking);
            }
<#  } #>

            throw new InvalidOperationException();
        }
    }

    /// <inheritdoc/>
<#  if(!IsImplicitNumber)
    { #>
    JsonNumber IJsonValue.AsNumber
<#  } 
    else
    {#>
    public JsonNumber AsNumber
<#  }#>
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }
<#  if(IsImplicitNumber || IsNotImplicitType)
    { #>

            if ((this.backing & Backing.Number) != 0)
            {
                return new(this.numberBacking);
            }
<#  } #>

            throw new InvalidOperationException();
        }
    }

    /// <inheritdoc/>
<#  if(!IsImplicitObject)
    { #>
    JsonObject IJsonValue.AsObject
<#  } 
    else
    {#>
    public JsonObject AsObject
<#  }#>
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }
<#  if(IsImplicitObject || IsNotImplicitType)
    { #>

            if ((this.backing & Backing.Object) != 0)
            {
                return new(this.objectBacking);
            }
<#  } #>

            throw new InvalidOperationException();
        }
    }

    /// <inheritdoc/>
<#  if(!IsImplicitArray)
    { #>
    JsonArray IJsonValue.AsArray
<#  } 
    else
    {#>
    public JsonArray AsArray
<#  }#>
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }
<#  if(IsImplicitArray || IsNotImplicitType)
    { #>

            if ((this.backing & Backing.Array) != 0)
            {
                return new(this.arrayBacking);
            }
<#  } #>

            throw new InvalidOperationException();
        }
    }

    /// <inheritdoc/>
    public bool HasJsonElementBacking
    {
        get
        {
            return (this.backing & Backing.JsonElement) != 0;
        }
    }

    /// <inheritdoc/>
    public bool HasDotnetBacking
    {
        get
        {
            return (this.backing & Backing.Dotnet) != 0;
        }
    }

    /// <inheritdoc/>
    public JsonValueKind ValueKind
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return this.jsonElementBacking.ValueKind;
            }
<#  if(IsImplicitString || IsNotImplicitType)
    { #>

            if ((this.backing & Backing.String) != 0)
            {
                return JsonValueKind.String;
            }
<#  }
    if(IsImplicitBoolean || IsNotImplicitType)
    { #>

            if ((this.backing & Backing.Bool) != 0)
            {
                return this.boolBacking ? JsonValueKind.True : JsonValueKind.False;
            }
<#  }
    if(IsImplicitNumber || IsNotImplicitType)
    { #>

            if ((this.backing & Backing.Number) != 0)
            {
                return JsonValueKind.Number;
            }
<#  }
    if(IsImplicitArray || IsNotImplicitType)
    { #>

            if ((this.backing & Backing.Array) != 0)
            {
                return JsonValueKind.Array;
            }
<#  }
    if(IsImplicitObject || IsNotImplicitType)
    { #>

            if ((this.backing & Backing.Object) != 0)
            {
                return JsonValueKind.Object;
            }
<#  } #>

            if ((this.backing & Backing.Null) != 0)
            {
                return JsonValueKind.Null;
            }

            return JsonValueKind.Undefined;
        }
    }

    /// <summary>
    /// Conversion from JsonAny.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not compatible with this type.</exception>
    public static implicit operator <#= TypeDeclaration.DotnetTypeName #>(in JsonAny value)
    {
        return value.As<<#= TypeDeclaration.DotnetTypeName #>>();
    }

    /// <summary>
    /// Conversion to JsonAny.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not compatible with this type.</exception>
    public static implicit operator JsonAny(in <#= TypeDeclaration.DotnetTypeName #> value)
    {
        return value.AsAny;
    }

    /// <summary>
    /// Equality operator.
    /// </summary>
    /// <param name="left">The lhs.</param>
    /// <param name="right">The rhs.</param>
    /// <returns><c>True</c> if the values are equal.</returns>
    public static bool operator ==(in <#= TypeDeclaration.DotnetTypeName #> left, in <#= TypeDeclaration.DotnetTypeName #> right)
    {
        return left.Equals(right);
    }

    /// <summary>
    /// Inequality operator.
    /// </summary>
    /// <param name="left">The lhs.</param>
    /// <param name="right">The rhs.</param>
    /// <returns><c>True</c> if the values are equal.</returns>
    public static bool operator !=(in <#= TypeDeclaration.DotnetTypeName #> left, in <#= TypeDeclaration.DotnetTypeName #> right)
    {
        return !left.Equals(right);
    }

    /// <summary>
    /// Gets an instance of the JSON value from a JsonAny value.
    /// </summary>
    /// <param name="value">The <see cref="JsonAny"/> value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the <see cref="JsonAny"/>.</returns>
    /// <remarks>The returned value will have a <see cref="IJsonValue.ValueKind"/> of <see cref="JsonValueKind.Undefined"/> if the
    /// value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
    /// </remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= TypeDeclaration.DotnetTypeName #> FromAny(in JsonAny value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        JsonValueKind valueKind = value.ValueKind;
        return valueKind switch
        {
<#  if(IsImplicitString || IsNotImplicitType)
    { #>
            JsonValueKind.String => new((string)value.AsString),
<#  }
    if(IsImplicitBoolean || IsNotImplicitType)
    { #>
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
<#  }
    if(IsImplicitNumber || IsNotImplicitType)
    { #>
            JsonValueKind.Number => new(value.AsNumber.AsBinaryJsonNumber),
<#  }
    if(IsImplicitArray || IsNotImplicitType)
    { #>
            JsonValueKind.Array => new(value.AsArray.AsImmutableList()),
<#  }
    if(IsImplicitObject || IsNotImplicitType)
    { #>
            JsonValueKind.Object => new(value.AsObject.AsPropertyBacking()),

<#  } #>
            JsonValueKind.Null => Null,
            _ => Undefined,
        };
    }

    /// <summary>
    /// Gets an instance of the JSON value from a <see cref="JsonElement"/> value.
    /// </summary>
    /// <param name="value">The <see cref="JsonElement"/> value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the <see cref="JsonElement"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= TypeDeclaration.DotnetTypeName #> FromJson(in JsonElement value)
    {
        return new(value);
    }

<#  if(!IsImplicitBoolean)
    { #>
#if NET8_0_OR_GREATER
    /// <summary>
    /// Gets an instance of the JSON value from a boolean value.
    /// </summary>
    /// <typeparam name = "TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the value.</returns>
    /// <remarks>This will be <#= TypeDeclaration.DotnetTypeName #>.Undefined if the type is not compatible.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static <#= TypeDeclaration.DotnetTypeName #> IJsonValue<<#= TypeDeclaration.DotnetTypeName #>>.FromBoolean<TValue>(in TValue value)
<#  }
    else
    {#>
    /// <summary>
    /// Gets an instance of the JSON value from a boolean value.
    /// </summary>
    /// <typeparam name = "TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the value.</returns>
    /// <remarks>This will be <#= TypeDeclaration.DotnetTypeName #>.Undefined if the type is not compatible.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= TypeDeclaration.DotnetTypeName #> FromBoolean<TValue>(in TValue value)
        where TValue : struct, IJsonBoolean<TValue>
<#  } #>
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }
<#
    if(IsImplicitBoolean || IsNotImplicitType)
    { #>

        if (value.ValueKind == JsonValueKind.True)
        {
            return new(true);
        }

        if (value.ValueKind == JsonValueKind.False)
        {
            return new(false);
        }
<#  } #>

        return Undefined;
    }
<#  if(!IsImplicitBoolean)
    { #>
#endif
<#  } #>

<#  if(!IsImplicitString)
    { #>
#if NET8_0_OR_GREATER
    /// <summary>
    /// Gets an instance of the JSON value from a string value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the value.</returns>
    /// <remarks>This will be <#= TypeDeclaration.DotnetTypeName #>.Undefined if the type is not compatible.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static <#= TypeDeclaration.DotnetTypeName #> IJsonValue<<#= TypeDeclaration.DotnetTypeName #>>.FromString<TValue>(in TValue value)
<#  }
    else
    {#>
    /// <summary>
    /// Gets an instance of the JSON value from a string value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the value.</returns>
    /// <remarks>This will be <#= TypeDeclaration.DotnetTypeName #>.Undefined if the type is not compatible.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= TypeDeclaration.DotnetTypeName #> FromString<TValue>(in TValue value)
        where TValue : struct, IJsonString<TValue>
<#  } #>
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }
<#  if(IsImplicitString || IsNotImplicitType)
    { #>

        if (value.ValueKind == JsonValueKind.String)
        {
#if NET8_0_OR_GREATER
            return new((string)value);
#else
            return new((string)value.AsString);
#endif
        }
<#  } #>

        return Undefined;
    }
<#  if(!IsImplicitString)
    { #>
#endif
<#  } #>

<#  if(!IsImplicitNumber)
    { #>
#if NET8_0_OR_GREATER
    /// <summary>
    /// Gets an instance of the JSON value from a number value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the value.</returns>
    /// <remarks>This will be <#= TypeDeclaration.DotnetTypeName #>.Undefined if the type is not compatible.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static <#= TypeDeclaration.DotnetTypeName #> IJsonValue<<#= TypeDeclaration.DotnetTypeName #>>.FromNumber<TValue>(in TValue value)
<#  }
    else
    {#>
    /// <summary>
    /// Gets an instance of the JSON value from a number value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the value.</returns>
    /// <remarks>This will be <#= TypeDeclaration.DotnetTypeName #>.Undefined if the type is not compatible.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= TypeDeclaration.DotnetTypeName #> FromNumber<TValue>(in TValue value)
        where TValue : struct, IJsonNumber<TValue>
<#  } #>
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }
<#  if(IsImplicitNumber || IsNotImplicitType)
    { #>

        if (value.ValueKind == JsonValueKind.Number)
        {
            return new(value.AsBinaryJsonNumber);
        }
<#  } #>

        return Undefined;
    }
<#  if(!IsImplicitNumber)
    { #>
#endif
<#  } #>

<#  if(!IsImplicitArray)
    { #>
#if NET8_0_OR_GREATER
    /// <summary>
    /// Gets an instance of the JSON value from an array value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the value.</returns>
    /// <remarks>This will be <#= TypeDeclaration.DotnetTypeName #>.Undefined if the type is not compatible.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static <#= TypeDeclaration.DotnetTypeName #> IJsonValue<<#= TypeDeclaration.DotnetTypeName #>>.FromArray<TValue>(in TValue value)
<#  }
    else
    {#>
    /// <summary>
    /// Gets an instance of the JSON value from an array value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the value.</returns>
    /// <remarks>This will be <#= TypeDeclaration.DotnetTypeName #>.Undefined if the type is not compatible.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= TypeDeclaration.DotnetTypeName #> FromArray<TValue>(in TValue value)
        where TValue : struct, IJsonArray<TValue>
<#  } #>
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }
<#  if(IsImplicitArray || IsNotImplicitType)
    { #>

        if (value.ValueKind == JsonValueKind.Array)
        {
            return new(value.AsImmutableList());
        }
<#  } #>

        return Undefined;
    }
<#  if(!IsImplicitArray)
    { #>
#endif
<#  } #>

<#  if(!IsImplicitObject)
    { #>
#if NET8_0_OR_GREATER
    /// <summary>
    /// Gets an instance of the JSON value from an object value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the value.</returns>
    /// <remarks>This will be <#= TypeDeclaration.DotnetTypeName #>.Undefined if the type is not compatible.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static <#= TypeDeclaration.DotnetTypeName #> IJsonValue<<#= TypeDeclaration.DotnetTypeName #>>.FromObject<TValue>(in TValue value)
<#  }
    else
    {#>
    /// <summary>
    /// Gets an instance of the JSON value from an object value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the value.</returns>
    /// <remarks>This will be <#= TypeDeclaration.DotnetTypeName #>.Undefined if the type is not compatible.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static <#= TypeDeclaration.DotnetTypeName #> FromObject<TValue>(in TValue value)
        where TValue : struct, IJsonObject<TValue>
<#  } #>
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }
<#  if(IsImplicitObject || IsNotImplicitType)
    { #>

        if (value.ValueKind == JsonValueKind.Object)
        {
            return new(value.AsPropertyBacking());
        }
<#  } #>

        return Undefined;
    }
<#  if(!IsImplicitObject)
    { #>
#endif
<#  } #>

    /// <summary>
    /// Parses a JSON string into a <#= TypeDeclaration.DotnetTypeName #>.
    /// </summary>
    /// <param name="json">The json string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    /// <returns>A <see cref="<#= TypeDeclaration.DotnetTypeName #>"/> instance built from the JSON string.</returns>
    public static <#= TypeDeclaration.DotnetTypeName #> Parse(string json, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(json, options);
        return new <#= TypeDeclaration.DotnetTypeName #>(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses a JSON string into a <#= TypeDeclaration.DotnetTypeName #>.
    /// </summary>
    /// <param name="utf8Json">The json string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    /// <returns>A <see cref="<#= TypeDeclaration.DotnetTypeName #>"/> instance built from the JSON string.</returns>
    public static <#= TypeDeclaration.DotnetTypeName #> Parse(Stream utf8Json, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(utf8Json, options);
        return new <#= TypeDeclaration.DotnetTypeName #>(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses a JSON string into a <#= TypeDeclaration.DotnetTypeName #>.
    /// </summary>
    /// <param name="utf8Json">The json string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    /// <returns>A <see cref="<#= TypeDeclaration.DotnetTypeName #>"/> instance built from the JSON string.</returns>
    public static <#= TypeDeclaration.DotnetTypeName #> Parse(ReadOnlyMemory<byte> utf8Json, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(utf8Json, options);
        return new <#= TypeDeclaration.DotnetTypeName #>(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses a JSON string into a <#= TypeDeclaration.DotnetTypeName #>.
    /// </summary>
    /// <param name="json">The json string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    /// <returns>A <see cref="<#= TypeDeclaration.DotnetTypeName #>"/> instance built from the JSON string.</returns>
    public static <#= TypeDeclaration.DotnetTypeName #> Parse(ReadOnlyMemory<char> json, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(json, options);
        return new <#= TypeDeclaration.DotnetTypeName #>(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses a JSON string into a <#= TypeDeclaration.DotnetTypeName #>.
    /// </summary>
    /// <param name="utf8Json">The json string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    /// <returns>A <see cref="<#= TypeDeclaration.DotnetTypeName #>"/> instance built from the JSON string.</returns>
    public static <#= TypeDeclaration.DotnetTypeName #> Parse(ReadOnlySequence<byte> utf8Json, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(utf8Json, options);
        return new <#= TypeDeclaration.DotnetTypeName #>(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses a JSON value from a buffer.
    /// </summary>
    /// <param name="buffer">The buffer from which to parse the value.</param>
    /// <returns>The parsed value.</returns>
    static <#= TypeDeclaration.DotnetTypeName #> ParseValue(ReadOnlySpan<char> buffer)
    {
#if NET8_0_OR_GREATER
        return IJsonValue<<#= TypeDeclaration.DotnetTypeName #>>.ParseValue(buffer);
#else
        return JsonValueHelpers.ParseValue<<#= TypeDeclaration.DotnetTypeName #>>(buffer);
#endif
    }

    /// <summary>
    /// Parses a JSON value from a buffer.
    /// </summary>
    /// <param name="buffer">The buffer from which to parse the value.</param>
    /// <returns>The parsed value.</returns>
    static <#= TypeDeclaration.DotnetTypeName #> ParseValue(ReadOnlySpan<byte> buffer)
    {
#if NET8_0_OR_GREATER
        return IJsonValue<<#= TypeDeclaration.DotnetTypeName #>>.ParseValue(buffer);
#else
        return JsonValueHelpers.ParseValue<<#= TypeDeclaration.DotnetTypeName #>>(buffer);
#endif
    }

    /// <summary>
    /// Parses a JSON value from a buffer.
    /// </summary>
    /// <param name="reader">The reader from which to parse the value.</param>
    /// <returns>The parsed value.</returns>
    static <#= TypeDeclaration.DotnetTypeName #> ParseValue(ref Utf8JsonReader reader)
    {
#if NET8_0_OR_GREATER
        return IJsonValue<<#= TypeDeclaration.DotnetTypeName #>>.ParseValue(ref reader);
#else
        return JsonValueHelpers.ParseValue<<#= TypeDeclaration.DotnetTypeName #>>(ref reader);
#endif
    }

    /// <summary>
    /// Gets the value as an instance of the target value.
    /// </summary>
    /// <typeparam name="TTarget">The type of the target.</typeparam>
    /// <returns>An instance of the target type.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public TTarget As<TTarget>()
        where TTarget : struct, IJsonValue<TTarget>
    {
#if NET8_0_OR_GREATER
        if ((this.backing & Backing.JsonElement) != 0)
        {
            return TTarget.FromJson(this.jsonElementBacking);
        }
<#  if(IsImplicitString || IsNotImplicitType)
    { #>

        if ((this.backing & Backing.String) != 0)
        {
            return TTarget.FromString(this);
        }
<#  }
    if(IsImplicitBoolean || IsNotImplicitType)
    { #>

        if ((this.backing & Backing.Bool) != 0)
        {
            return TTarget.FromBoolean(this);
        }
<#  }
    if(IsImplicitNumber || IsNotImplicitType)
    { #>

        if ((this.backing & Backing.Number) != 0)
        {
            return TTarget.FromNumber(this);
        }
<#  }
    if(IsImplicitArray || IsNotImplicitType)
    { #>

        if ((this.backing & Backing.Array) != 0)
        {
            return TTarget.FromArray(this);
        }
<#  }
    if(IsImplicitObject || IsNotImplicitType)
    { #>

        if ((this.backing & Backing.Object) != 0)
        {
            return TTarget.FromObject(this);
        }
<#  } #>

        if ((this.backing & Backing.Null) != 0)
        {
            return TTarget.Null;
        }

        return TTarget.Undefined;
#else
        return this.As<<#= TypeDeclaration.DotnetTypeName #>, TTarget>();
#endif
    }

    /// <inheritdoc/>
    public override bool Equals(object? obj)
    {
        return
            (obj is IJsonValue jv && this.Equals(jv.AsAny)) ||
            (obj is null && this.IsNull());
    }

    /// <inheritdoc/>
    public bool Equals<T>(in T other)
        where T : struct, IJsonValue<T>
    {
        return JsonValueHelpers.CompareValues(this, other);
    }

    /// <summary>
    /// Equality comparison.
    /// </summary>
    /// <param name="other">The other item with which to compare.</param>
    /// <returns><see langword="true"/> if the values were equal.</returns>
    public bool Equals(in <#= TypeDeclaration.DotnetTypeName #> other)
    {
        return JsonValueHelpers.CompareValues(this, other);
    }

    /// <inheritdoc/>
    public void WriteTo(Utf8JsonWriter writer)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
            {
                this.jsonElementBacking.WriteTo(writer);
            }

            return;
        }
<#  if(IsImplicitArray || IsNotImplicitType)
    { #>

        if ((this.backing & Backing.Array) != 0)
        {
            JsonValueHelpers.WriteItems(this.arrayBacking, writer);
            return;
        }
<#  }
    if(IsImplicitBoolean || IsNotImplicitType)
    { #>

        if ((this.backing & Backing.Bool) != 0)
        {
<#      if (IsImplicitNumber || !IsNotImplicitType)
        { #>
            writer.WriteBooleanValue(this.boolBacking);
<#      }
        else
        {#>
            writer.WriteBooleanValue(this.numberBacking.GetByteAsBool());
<#      }#>
            return;
        }
<#  }
    if(IsImplicitNumber || IsNotImplicitType)
    { #>

        if ((this.backing & Backing.Number) != 0)
        {
            this.numberBacking.WriteTo(writer);
            return;
        }
<#  }
    if(IsImplicitObject || IsNotImplicitType)
    { #>

        if ((this.backing & Backing.Object) != 0)
        {
            JsonValueHelpers.WriteProperties(this.objectBacking, writer);
            return;
        }
<#  }
    if(IsImplicitString || IsNotImplicitType)
    { #>

        if ((this.backing & Backing.String) != 0)
        {
            writer.WriteStringValue(this.stringBacking);
            return;
        }
<#  } #>

        if ((this.backing & Backing.Null) != 0)
        {
            writer.WriteNullValue();
            return;
        }
    }

    /// <inheritdoc/>
    public override int GetHashCode()
    {
        return JsonValueHelpers.GetHashCode(this);
    }

    /// <inheritdoc/>
    public override string ToString()
    {
        return this.Serialize();
    }
}
<# EndNesting(); #>