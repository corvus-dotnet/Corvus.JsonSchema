<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Corvus.Json" #>
<#  // THIS FILE IS A TEMPLATE FOR CREATING NEW TEMPLATE PARTIALS FOR THE CODE GENERATOR
    // IF YOU ARE EXTENDING THE GENERATOR, THIS IS A GOOD PLACE TO START FOR YOUR PARTIAL
    //
    // Replacements needed:
    // [ShouldGenerate] => replace with the boolean logic to determine if the file should be generated or not
    // 
    // When you add a new code behind file, you will need to add it to the BuildTemplates.cmd file
    // 1. You need to generate the code behind itself e.g.:
    //
    //   t4 -l -o Generators/CodeGenerator.Array.Add.cs -c Corvus.Json.CodeGeneration.Generators.CodeGeneratorArrayAdd ./Templates/CodeGenerator.Array.Add.tt
    // 
    // 2. You will also need to generate the supporting partial. This provides the type generation context data from the type builder to the main template. e.g.:
    //
    //   t4 -l -o Generators/CodeGenerator.Array.Add.Partial.cs -p=PartialClassName=CodeGeneratorArrayAdd -p"=PartialFileName=CodeGenerator.Array.Add.Partial.cs" ./Templates/CodeGeneratorPartial.tt
    //
    // You will also need to add it to JsonSchemaBuilder.cs, GenerateFileForType().
    // 1. Instantiate the generator e.g.:
    //
    //   var codeGeneratorArrayAdd = new CodeGeneratorArrayAdd(this, typeForGeneration.TypeDeclaration);
    //
    // 2. Add the code to run the generator, and accumulate the output e.g.:
    //
    //   if (codeGeneratorArrayAdd.ShouldGenerate)
    //   {
    //       files.Add(new(codeGeneratorArrayAdd.TransformText(), $"{fileName}.Array.Add.cs"));
    //   }
#>
<#  // This is only emitted if [ShouldGenerate] is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.String should not be emitted if [ShouldGenerate] is false.");
    } #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace <#= Namespace #>;

<# BeginNesting(); #>
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct <#= TypeDeclaration.DotnetTypeName #>
{
}
<# EndNesting(); #>
<#+
    public bool ShouldGenerate
    {
        get
        {
            return [ShouldGenerate];
        }
    }
#>