// <copyright file="BooleanPartial.cs" company="Endjin Limited">
// Copyright (c) Endjin Limited. All rights reserved.
// </copyright>

using System.Text.Json;

namespace Corvus.Json.CodeGeneration.CSharp;

/// <summary>
/// Provides the Boolean file for a type declaration.
/// </summary>
public sealed class BooleanPartial : ICodeFileBuilder
{
    private BooleanPartial()
    {
    }

    /// <summary>
    /// Gets a singleton instance of the <see cref="BooleanPartial"/> builder.
    /// </summary>
    public static BooleanPartial Instance { get; } = new();

    /// <inheritdoc/>
    public CodeGenerator EmitFile(CodeGenerator generator, TypeDeclaration typeDeclaration)
    {
        if ((typeDeclaration.LocallyImpliedCoreTypes() & CoreTypes.Boolean) != 0)
        {
            generator
                .BeginFile(typeDeclaration, "Boolean")
                    .AppendAutoGeneratedHeader()
                    .AppendLine()
                    .AppendLine("#nullable enable")
                    .AppendLine()
                    .AppendUsings(
                        new("System.Collections.Immutable", EmitIfIsObjectOrArray(typeDeclaration)),
                        "System.Diagnostics.CodeAnalysis",
                        "System.Text.Json",
                        "Corvus.Json",
                        "Corvus.Json.Internal")
                    .AppendLine()
                    .BeginNamespace(typeDeclaration.DotnetNamespace())
                    .AppendLine()
                    .BeginTypeDeclarationNesting(typeDeclaration)
                        .AppendDocumentation(typeDeclaration)
                        .BeginPublicReadonlyPartialStructDeclaration(
                            typeDeclaration.DotnetTypeName(),
                            interfaces:
                                [
                                    new(g => g.GenericTypeOf("IJsonBoolean", typeDeclaration))
                                ])
                                .AppendImplicitConversionFromTypeUsingConstructor(typeDeclaration, "bool")
                                .AppendImplicitConversionFromJsonValueTypeUsingConstructor(typeDeclaration, "JsonBoolean", [JsonValueKind.False, JsonValueKind.True], "(bool)value")
                                .AppendImplicitConversionToJsonValueType(typeDeclaration, "JsonBoolean", CoreTypes.Boolean, "value.AsBoolean")
                                .AppendImplicitConversionToBoolean(typeDeclaration)
                                .AppendTryGetBoolean()
                                .AppendGetBoolean()
                        .EndClassOrStructDeclaration()
                    .EndTypeDeclarationNesting(typeDeclaration)
                    .EndNamespace()
                .EndFile(typeDeclaration, "Boolean");
        }

        return generator;

        static FrameworkType EmitIfIsObjectOrArray(TypeDeclaration typeDeclaration)
        {
            return (typeDeclaration.ImpliedCoreTypesOrAny() & (CoreTypes.Object | CoreTypes.Array)) != 0
                 ? FrameworkType.All
                 : FrameworkType.NotEmitted;
        }
    }
}