// <copyright file="NumberPartial.cs" company="Endjin Limited">
// Copyright (c) Endjin Limited. All rights reserved.
// </copyright>

using System.Text.Json;

namespace Corvus.Json.CodeGeneration.CSharp;

/// <summary>
/// Provides the Number file for a type declaration.
/// </summary>
public sealed class NumberPartial : ICodeFileBuilder
{
    private NumberPartial()
    {
    }

    /// <summary>
    /// Gets a singleton instance of the <see cref="NumberPartial"/> builder.
    /// </summary>
    public static NumberPartial Instance { get; } = new();

    /// <inheritdoc/>
    public CodeGenerator EmitFile(CodeGenerator generator, TypeDeclaration typeDeclaration)
    {
        if ((typeDeclaration.ImpliedCoreTypes() & (CoreTypes.Number | CoreTypes.Integer)) != 0)
        {
            generator
                .BeginFile(typeDeclaration, "Number")
                    .AppendAutoGeneratedHeader()
                    .AppendLine()
                    .AppendLine("#nullable enable")
                    .AppendLine()
                    .AppendUsings(
                        new("System.Collections.Immutable", EmitIfIsObjectOrArray(typeDeclaration)),
                        "System.Diagnostics.CodeAnalysis",
                        new("System.Numerics", FrameworkType.Net80OrGreater),
                        "System.Text.Json",
                        new("Corvus.Json", EmitIfNotCorvusJsonExtendedType(typeDeclaration)),
                        "Corvus.Json.Internal")
                    .AppendLine()
                    .BeginTypeDeclarationNesting(typeDeclaration)
                        .AppendDocumentation(typeDeclaration)
                        .BeginPublicReadonlyPartialStructDeclaration(
                            typeDeclaration.DotnetTypeName(),
                            interfaces:
                                [
                                    new(g => g.GenericTypeOf("IJsonNumber", typeDeclaration)),
                                    new(g => g.GenericTypeOf("IAdditionOperators", typeDeclaration, typeDeclaration, typeDeclaration), FrameworkType.Net80OrGreater),
                                    new(g => g.GenericTypeOf("ISubtractionOperators", typeDeclaration, typeDeclaration, typeDeclaration), FrameworkType.Net80OrGreater),
                                    new(g => g.GenericTypeOf("IMultiplyOperators", typeDeclaration, typeDeclaration, typeDeclaration), FrameworkType.Net80OrGreater),
                                    new(g => g.GenericTypeOf("IDivisionOperators", typeDeclaration, typeDeclaration, typeDeclaration), FrameworkType.Net80OrGreater),
                                    new(g => g.GenericTypeOf("IIncrementOperators", typeDeclaration), FrameworkType.Net80OrGreater),
                                    new(g => g.GenericTypeOf("IDecrementOperators", typeDeclaration), FrameworkType.Net80OrGreater),
                                ])
                            .AppendPublicNumericConstructor(typeDeclaration)
                            .AppendNumberFormatConstructors(typeDeclaration)
                            .AppendNumberFormatPublicStaticProperties(typeDeclaration)
                            .AppendNumberFormatPublicProperties(typeDeclaration)
                            .AppendNumberFormatConversionOperators(typeDeclaration)
                            .AppendImplicitConversionFromJsonValueTypeUsingConstructor(typeDeclaration, "JsonNumber", JsonValueKind.Number, "value.AsBinaryJsonNumber")
                            .AppendImplicitConversionToJsonValueType(typeDeclaration, "JsonNumber", CoreTypes.Number | CoreTypes.Integer, "value.AsNumber")
                            .AppendImplicitConversionToJsonValueType(typeDeclaration, "JsonInteger", CoreTypes.Integer, "value.As<JsonInteger>()")
                            .AppendNumericConversions(typeDeclaration)
                            .AppendNumericOperators(typeDeclaration)
                            .AppendAsBinaryJsonNumber(typeDeclaration)
                            .AppendAsDotnetNumericValue(typeDeclaration)
                            .AppendNumericEquals(typeDeclaration)
                            .AppendEqualsBinaryJsonNumber()
                            .AppendNumberFormatPublicStaticMethods(typeDeclaration)
                            .AppendNumberFormatPublicMethods(typeDeclaration)
                            .AppendNumberFormatPrivateStaticMethods(typeDeclaration)
                            .AppendNumberFormatPrivateMethods(typeDeclaration)
                        .EndClassOrStructDeclaration()
                    .EndTypeDeclarationNesting(typeDeclaration)
                    .EndNamespace()
                .EndFile(typeDeclaration, "Number");
        }

        return generator;

        static FrameworkType EmitIfNotCorvusJsonExtendedType(TypeDeclaration typeDeclaration)
        {
            return typeDeclaration.IsCorvusJsonExtendedType()
                 ? FrameworkType.NotEmitted
                 : FrameworkType.All;
        }

        static FrameworkType EmitIfIsObjectOrArray(TypeDeclaration typeDeclaration)
        {
            return (typeDeclaration.ImpliedCoreTypesOrAny() & (CoreTypes.Object | CoreTypes.Array)) != 0
                 ? FrameworkType.All
                 : FrameworkType.NotEmitted;
        }
    }
}