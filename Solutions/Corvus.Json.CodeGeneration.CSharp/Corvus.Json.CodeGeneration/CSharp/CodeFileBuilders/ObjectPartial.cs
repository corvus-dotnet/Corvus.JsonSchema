// <copyright file="ObjectPartial.cs" company="Endjin Limited">
// Copyright (c) Endjin Limited. All rights reserved.
// </copyright>

using System.Text.Json;

namespace Corvus.Json.CodeGeneration.CSharp;

/// <summary>
/// Provides the Object file for a type declaration.
/// </summary>
public sealed class ObjectPartial : ICodeFileBuilder
{
    private ObjectPartial()
    {
    }

    /// <summary>
    /// Gets a singleton instance of the <see cref="ObjectPartial"/> builder.
    /// </summary>
    public static ObjectPartial Instance { get; } = new();

    /// <inheritdoc/>
    public CodeGenerator EmitFile(CodeGenerator generator, TypeDeclaration typeDeclaration)
    {
        if ((typeDeclaration.ImpliedCoreTypes() & CoreTypes.Object) != 0)
        {
            generator
                .BeginFile(typeDeclaration, "Object")
                    .AppendAutoGeneratedHeader()
                    .AppendLine()
                    .AppendLine("#nullable enable")
                    .AppendLine()
                    .AppendUsings(
                        new("System.Buffers", FrameworkType.Net80OrGreater),
                        new("System.Collections", EmitIfIsMapObject(typeDeclaration)),
                        new("System.Collections.Generic", EmitIfIsMapObject(typeDeclaration)),
                        "System.Collections.Immutable",
                        new("System.Diagnostics.CodeAnalysis", EmitIfIsMapObject(typeDeclaration)),
                        "System.Runtime.CompilerServices",
                        "System.Text.Json",
                        "Corvus.Json",
                        "Corvus.Json.Internal")
                    .AppendLine()
                    .BeginNamespace(typeDeclaration.DotnetNamespace())
                    .AppendLine()
                    .BeginTypeDeclarationNesting(typeDeclaration)
                        .AppendDocumentation(typeDeclaration)
                        .BeginPublicReadonlyPartialStructDeclaration(
                            typeDeclaration.DotnetTypeName(),
                            interfaces:
                            [
                                JsonObjectType(typeDeclaration),
                                ReadOnlyDictionaryType(typeDeclaration),
                            ])
                            .AppendPublicValueConstructor(typeDeclaration, "ImmutableList<JsonObjectProperty>", CoreTypes.Object)
                            .AppendImplicitConversionFromTypeUsingConstructor(typeDeclaration, "ImmutableList<JsonObjectProperty>")
                            .AppendImplicitConversionToType(typeDeclaration, "ImmutableList<JsonObject>", "__CorvusObjectHelpers.GetImmutableList(value)")
                            .AppendImplicitConversionFromJsonValueTypeUsingConstructor(typeDeclaration, "JsonObject", JsonValueKind.Object, "value.AsPropertyBacking()")
                            .AppendImplicitConversionToJsonValueType(typeDeclaration, "JsonObject", CoreTypes.Object, "value.AsObject")
                            .AppendObjectIndexerProperties(typeDeclaration)
                            .AppendReadOnlyDictionaryProperties(typeDeclaration)
                            .AppendFromPropertiesFactoryMethods(typeDeclaration)
                            .AppendAsPropertyBackingMethod()
                            .AppendEnumerateObjectMethods(typeDeclaration)
                            .AppendHasPropertiesMethod(typeDeclaration)
                            .AppendHasPropertyMethods(typeDeclaration)
                            .AppendTryGetPropertyMethods(typeDeclaration)
                        .EndClassOrStructDeclaration()
                    .EndTypeDeclarationNesting(typeDeclaration)
                    .EndNamespace()
                .EndFile(typeDeclaration, "Object");
        }

        return generator;

        static FrameworkType EmitIfIsMapObject(TypeDeclaration typeDeclaration)
        {
           return typeDeclaration.IsMapObject()
                ? FrameworkType.NotEmitted
                : FrameworkType.All;
        }

        static ConditionalCodeSpecification JsonObjectType(TypeDeclaration typeDeclaration)
        {
            return new(g => g.GenericTypeOf("IJsonObject", typeDeclaration));
        }

        static ConditionalCodeSpecification ReadOnlyDictionaryType(TypeDeclaration typeDeclaration)
        {
            return
                typeDeclaration.ObjectPropertyType() is ObjectPropertyTypeDeclaration objectPropertyType
                ? new(g =>
                    {
                        g
                        .Append("IReadOnlyDictionary<JsonPropertyName, ")
                        .Append(objectPropertyType.ReducedType.FullyQualifiedDotnetTypeName())
                        .Append(">");
                    })
                : ConditionalCodeSpecification.DoNotEmit;
        }
    }
}