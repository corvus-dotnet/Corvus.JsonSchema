// <copyright file="StringPartial.cs" company="Endjin Limited">
// Copyright (c) Endjin Limited. All rights reserved.
// </copyright>

using System.Text.Json;

namespace Corvus.Json.CodeGeneration.CSharp;

/// <summary>
/// Provides the String file for a type declaration.
/// </summary>
public sealed class StringPartial : ICodeFileBuilder
{
    private StringPartial()
    {
    }

    /// <summary>
    /// Gets a singleton instance of the <see cref="StringPartial"/> builder.
    /// </summary>
    public static StringPartial Instance { get; } = new();

    /// <inheritdoc/>
    public CodeGenerator EmitFile(CodeGenerator generator, TypeDeclaration typeDeclaration)
    {
        if ((typeDeclaration.ImpliedCoreTypes() & CoreTypes.String) != 0)
        {
            generator
                .BeginFile(typeDeclaration, "String")
                    .AppendAutoGeneratedHeader()
                    .AppendLine()
                    .AppendLine("#nullable enable")
                    .AppendLine()
                    .AppendUsings(
                        "System.Buffers",
                        new("System.Collections.Immutable", EmitIfIsObjectOrArray(typeDeclaration)),
                        "System.Diagnostics.CodeAnalysis",
                        "System.Text.Json",
                        new("Corvus.Json", EmitIfNotCorvusJsonExtendedType(typeDeclaration)),
                        "Corvus.Json.Internal")
                    .AppendLine()
                    .BeginTypeDeclarationNesting(typeDeclaration)
                        .AppendDocumentation(typeDeclaration)
                        .BeginPublicReadonlyPartialStructDeclaration(
                            typeDeclaration.DotnetTypeName(),
                            interfaces:
                                [
                                    new(g => g.GenericTypeOf("IJsonString", typeDeclaration)),
                                    new("ISpanFormattable", FrameworkType.Net80OrGreater),
                                ])
                                .AppendPublicStringConstructors(typeDeclaration)
                                .AppendStringFormatConstructors(typeDeclaration)
                                .AppendStringFormatPublicStaticProperties(typeDeclaration)
                                .AppendStringFormatPublicProperties(typeDeclaration)
                                .AppendStringFormatConversionOperators(typeDeclaration)
                                .AppendImplicitConversionFromTypeUsingConstructor(typeDeclaration, "string")
                                .AppendImplicitConversionFromJsonValueTypeUsingConstructor(typeDeclaration, "JsonString", JsonValueKind.String, "(string)value")
                                .AppendImplicitConversionToJsonValueType(typeDeclaration, "JsonString", CoreTypes.String, "value.AsString")
                                .AppendExplicitConversionToString(typeDeclaration)
                                .AppendImplicitConversionToStringFormat(typeDeclaration)
                                .AppendStringConcatenation(typeDeclaration)
                                .AppendTryGetString()
                                .AppendGetString()
                                .AppendEqualsUtf8Bytes()
                                .AppendEqualsString()
                                .AppendStringFormatPublicStaticMethods(typeDeclaration)
                                .AppendStringFormatPublicMethods(typeDeclaration)
                                .AppendNet80Formatting()
                                .AppendStringFormatPrivateStaticMethods(typeDeclaration)
                                .AppendStringFormatPrivateMethods(typeDeclaration)
                        .EndClassOrStructDeclaration()
                    .EndTypeDeclarationNesting(typeDeclaration)
                    .EndNamespace()
                .EndFile(typeDeclaration, "String");
        }

        return generator;

        static FrameworkType EmitIfIsObjectOrArray(TypeDeclaration typeDeclaration)
        {
            return (typeDeclaration.ImpliedCoreTypesOrAny() & (CoreTypes.Object | CoreTypes.Array)) != 0
                 ? FrameworkType.All
                 : FrameworkType.NotEmitted;
        }

        static FrameworkType EmitIfNotCorvusJsonExtendedType(TypeDeclaration typeDeclaration)
        {
            return typeDeclaration.IsCorvusJsonExtendedType()
                 ? FrameworkType.NotEmitted
                 : FrameworkType.All;
        }
    }
}