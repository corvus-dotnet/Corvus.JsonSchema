// <copyright file="ValidatePartial.cs" company="Endjin Limited">
// Copyright (c) Endjin Limited. All rights reserved.
// </copyright>

namespace Corvus.Json.CodeGeneration.CSharp;

/// <summary>
/// Provides a Validate partial class for a type declaration.
/// </summary>
public sealed class ValidatePartial : ICodeFileBuilder
{
    private ValidatePartial()
    {
    }

    /// <summary>
    /// Gets a singleton instance of the <see cref="ValidatePartial"/> builder.
    /// </summary>
    public static ValidatePartial Instance { get; } = new();

    /// <inheritdoc/>
    public CodeGenerator EmitFile(CodeGenerator generator, TypeDeclaration typeDeclaration)
    {
        // If we have any validation keywords, emit the validation file.
        if (typeDeclaration.ValidationKeywords().Count != 0)
        {
            generator
                .BeginFile(typeDeclaration, "Validate")
                    .AppendAutoGeneratedHeader()
                    .AppendLine()
                    .AppendLine("#nullable enable")
                    .AppendLine()
                    .AppendUsings(
                        "System.Runtime.CompilerServices",
                        "System.Text.Json",
                        RequiresRegularExressions(typeDeclaration) ? "System.Text.RegularExpressions" : ConditionalCodeSpecification.DoNotEmit,
                        "Corvus.Json")
                    .AppendLine()
                    .BeginNamespace(typeDeclaration.DotnetNamespace())
                    .AppendLine()
                    .BeginTypeDeclarationNesting(typeDeclaration)
                        .AppendDocumentation(typeDeclaration)
                        .BeginPublicReadonlyPartialStructDeclaration(typeDeclaration.DotnetTypeName())
                            .PushValidationClassNameAndScope()
                            .PushValidationHandlerMethodNames(typeDeclaration)
                            .AppendConstInstanceStaticProperty(typeDeclaration)
                            .AppendValidateMethod(typeDeclaration)
                            .AppendAnyOfConstantValuesClasses(typeDeclaration)
                            .AppendValidationClass(typeDeclaration)
                            .PopValidationHandlerMethodNames(typeDeclaration)
                            .PopValidationClassNameAndScope()
                        .EndClassOrStructDeclaration()
                    .EndTypeDeclarationNesting(typeDeclaration)
                    .EndNamespace()
                .EndFile(typeDeclaration, "Validate");
        }

        return generator;
    }

    private static bool RequiresRegularExressions(TypeDeclaration typeDeclaration)
    {
        return typeDeclaration.ValidationRegularExpressions() is IReadOnlyDictionary<IValidationRegexProviderKeyword, IReadOnlyList<string>> regexes && regexes.Count != 0;
    }
}