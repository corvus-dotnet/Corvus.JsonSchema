// <copyright file="ArrayPartial.cs" company="Endjin Limited">
// Copyright (c) Endjin Limited. All rights reserved.
// </copyright>

using System.Text.Json;

namespace Corvus.Json.CodeGeneration.CSharp;

/// <summary>
/// Provides the Array file for a type declaration.
/// </summary>
public sealed class ArrayPartial : ICodeFileBuilder
{
    private ArrayPartial()
    {
    }

    /// <summary>
    /// Gets a singleton instance of the <see cref="ArrayPartial"/> builder.
    /// </summary>
    public static ArrayPartial Instance { get; } = new();

    /// <inheritdoc/>
    public CodeGenerator EmitFile(CodeGenerator generator, TypeDeclaration typeDeclaration)
    {
        if ((typeDeclaration.ImpliedCoreTypes() & CoreTypes.Array) != 0)
        {
            generator
                .BeginFile(typeDeclaration, "Array")
                    .AppendAutoGeneratedHeader()
                    .AppendLine()
                    .AppendLine("#nullable enable")
                    .AppendLine()
                    .AppendUsings(
                        new("System.Buffers", FrameworkType.Net80OrGreater),
                        "System.Collections",
                        "System.Collections.Immutable",
                        "System.Runtime.CompilerServices",
                        "System.Text.Json",
                        "Corvus.Json",
                        "Corvus.Json.Internal")
                    .AppendLine()
                    .BeginNamespace(typeDeclaration.DotnetNamespace())
                    .AppendLine()
                    .BeginTypeDeclarationNesting(typeDeclaration)
                        .AppendDocumentation(typeDeclaration)
                        .AppendDotnet80OrGreaterCollectionBuilderAttribute(typeDeclaration)
                        .BeginPublicReadonlyPartialStructDeclaration(
                            typeDeclaration.DotnetTypeName(),
                            interfaces:
                            [
                                JsonArrayType(typeDeclaration),
                                ReadOnlyCollectionType(typeDeclaration),
                            ])
                            .AppendEmptyArrayInstanceStaticProperty(typeDeclaration)
                            .AppendPublicValueConstructor(typeDeclaration, "ImmutableList<JsonAny>", CoreTypes.Array)
                            .AppendArrayRankStaticProperty(typeDeclaration)
                            .AppendArrayDimensionStaticProperty(typeDeclaration)
                            .AppendArrayValueBufferSizeStaticProperty(typeDeclaration)
                            .AppendArrayIndexerProperties(typeDeclaration)
                            .AppendTupleItemProperties(typeDeclaration)
                            .AppendTupleConversions(typeDeclaration)
                            .AppendImplicitConversionFromTypeUsingConstructor(typeDeclaration, "ImmutableList<JsonAny>")
                            .AppendImplicitConversionToType(typeDeclaration, "ImmutableList<JsonAny>", "__CorvusArrayHelpers.GetImmutableList(value)")
                            .AppendImplicitConversionFromJsonValueTypeUsingConstructor(typeDeclaration, "JsonArray", JsonValueKind.Array, "value.AsImmutableList()")
                            .AppendFromImmutableListOfJsonAnyFactoryMethod(typeDeclaration)
                            .AppendCreateFromSpanFactoryMethod(typeDeclaration)
                            .AppendFromItemsFactoryMethods(typeDeclaration)
                            .AppendFromRangeFactoryMethods(typeDeclaration)
                            .AppendFromSerializedItemsMethod(typeDeclaration)
                            .AppendFromValuesFactoryMethod(typeDeclaration)
                            .AppendCreateTupleFactoryMethod(typeDeclaration)
                            .AppendCollectionEnumerableMethods(typeDeclaration)
                            .AppendAsImmutableListMethods()
                            .AppendGetArrayLengthMethod()
                            .AppendEnumerateArrayMethods(typeDeclaration)
                            .AppendArrayAddMethods(typeDeclaration)
                            .AppendArrayRemoveMethods(typeDeclaration)
                            .AppendCorvusArrayHelpers(typeDeclaration)
                        .EndClassOrStructDeclaration()
                    .EndTypeDeclarationNesting(typeDeclaration)
                    .EndNamespace()
                .EndFile(typeDeclaration, "Array");
        }

        return generator;

        static ConditionalCodeSpecification JsonArrayType(TypeDeclaration typeDeclaration)
        {
            return new(g => g.GenericTypeOf("IJsonArray", typeDeclaration));
        }

        static ConditionalCodeSpecification ReadOnlyCollectionType(TypeDeclaration typeDeclaration)
        {
            return typeDeclaration.TupleType() is null
                ? new(g => g.GenericTypeOf("IReadOnlyCollection", ArrayItemsType(typeDeclaration)))
                : ConditionalCodeSpecification.DoNotEmit;

            static TypeDeclaration ArrayItemsType(TypeDeclaration typeDeclaration)
            {
                return typeDeclaration.ArrayItemsType()?.ReducedType ?? WellKnownTypeDeclarations.JsonAny;
            }
        }
    }
}