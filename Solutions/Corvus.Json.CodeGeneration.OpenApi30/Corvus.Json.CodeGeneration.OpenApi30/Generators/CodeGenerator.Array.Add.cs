//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Corvus.Json.CodeGeneration.Generators.OpenApi30 {
    using System.Collections.Generic;
    using Corvus.Json;
    using System;
    
    
    public partial class CodeGeneratorArrayAdd : CodeGeneratorArrayAddBase {
        
        
        #line 317 "CodeGenerator.Array.Add.tt"

    public bool ShouldGenerate
    {
        get
        {
            return IsImplicitArray || IsNotImplicitType;
        }
    }

        #line default
        #line hidden
        
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 4 "CodeGenerator.Array.Add.tt"

    // This is only emitted if IsImplicitArray is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.Array.Add should not be emitted if IsImplicitArray is false.");
    } 
            
            #line default
            #line hidden
            
            #line 10 "CodeGenerator.Array.Add.tt"
            this.Write(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using Corvus.Json;

namespace ");
            
            #line default
            #line hidden
            
            #line 25 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( Namespace ));
            
            #line default
            #line hidden
            
            #line 25 "CodeGenerator.Array.Add.tt"
            this.Write(";\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 27 "CodeGenerator.Array.Add.tt"
 BeginNesting(); 
            
            #line default
            #line hidden
            
            #line 28 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( FormattedTypeDocumentation ));
            
            #line default
            #line hidden
            
            #line 28 "CodeGenerator.Array.Add.tt"
            this.Write("\r\npublic readonly partial struct ");
            
            #line default
            #line hidden
            
            #line 29 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 29 "CodeGenerator.Array.Add.tt"
            this.Write("\r\n{\r\n    /// <inheritdoc/>\r\n");
            
            #line default
            #line hidden
            
            #line 32 "CodeGenerator.Array.Add.tt"
  if (IsTuple || CanEnumerateAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 34 "CodeGenerator.Array.Add.tt"
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 34 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 34 "CodeGenerator.Array.Add.tt"
            this.Write(" IJsonArray<");
            
            #line default
            #line hidden
            
            #line 34 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 34 "CodeGenerator.Array.Add.tt"
            this.Write(">.Add(in JsonAny item1)\r\n");
            
            #line default
            #line hidden
            
            #line 35 "CodeGenerator.Array.Add.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 38 "CodeGenerator.Array.Add.tt"
            this.Write("    public ");
            
            #line default
            #line hidden
            
            #line 38 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 38 "CodeGenerator.Array.Add.tt"
            this.Write(" Add(in JsonAny item1)\r\n");
            
            #line default
            #line hidden
            
            #line 39 "CodeGenerator.Array.Add.tt"
  } 
            
            #line default
            #line hidden
            
            #line 40 "CodeGenerator.Array.Add.tt"
            this.Write("    {\r\n        ImmutableList<JsonAny>.Builder builder = this.GetImmutableListBuil" +
                    "der();\r\n        builder.Add(item1);\r\n        return new(builder.ToImmutable());\r" +
                    "\n    }\r\n\r\n    /// <inheritdoc/>\r\n");
            
            #line default
            #line hidden
            
            #line 47 "CodeGenerator.Array.Add.tt"
  if (IsTuple || CanEnumerateAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 49 "CodeGenerator.Array.Add.tt"
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 49 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 49 "CodeGenerator.Array.Add.tt"
            this.Write(" IJsonArray<");
            
            #line default
            #line hidden
            
            #line 49 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 49 "CodeGenerator.Array.Add.tt"
            this.Write(">.Add(params JsonAny[] items)\r\n");
            
            #line default
            #line hidden
            
            #line 50 "CodeGenerator.Array.Add.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 53 "CodeGenerator.Array.Add.tt"
            this.Write("    public ");
            
            #line default
            #line hidden
            
            #line 53 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 53 "CodeGenerator.Array.Add.tt"
            this.Write(" Add(params JsonAny[] items)\r\n");
            
            #line default
            #line hidden
            
            #line 54 "CodeGenerator.Array.Add.tt"
  } 
            
            #line default
            #line hidden
            
            #line 55 "CodeGenerator.Array.Add.tt"
            this.Write("    {\r\n        ImmutableList<JsonAny>.Builder builder = this.GetImmutableListBuil" +
                    "der();\r\n        builder.AddRange(items);\r\n        return new(builder.ToImmutable" +
                    "());\r\n    }\r\n\r\n    /// <inheritdoc/>\r\n");
            
            #line default
            #line hidden
            
            #line 62 "CodeGenerator.Array.Add.tt"
  if (IsTuple)
    { 
            
            #line default
            #line hidden
            
            #line 64 "CodeGenerator.Array.Add.tt"
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 64 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 64 "CodeGenerator.Array.Add.tt"
            this.Write(" IJsonArray<");
            
            #line default
            #line hidden
            
            #line 64 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 64 "CodeGenerator.Array.Add.tt"
            this.Write(">.AddRange<TArray>(in TArray items)\r\n");
            
            #line default
            #line hidden
            
            #line 65 "CodeGenerator.Array.Add.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 68 "CodeGenerator.Array.Add.tt"
            this.Write("    public ");
            
            #line default
            #line hidden
            
            #line 68 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 68 "CodeGenerator.Array.Add.tt"
            this.Write(" AddRange<TArray>(in TArray items)\r\n        where TArray : struct, IJsonArray<TAr" +
                    "ray>\r\n");
            
            #line default
            #line hidden
            
            #line 70 "CodeGenerator.Array.Add.tt"
  } 
            
            #line default
            #line hidden
            
            #line 71 "CodeGenerator.Array.Add.tt"
            this.Write(@"    {
        ImmutableList<JsonAny>.Builder builder = this.GetImmutableListBuilder();
        foreach (JsonAny item in items.EnumerateArray())
        {
            builder.Add(item.AsAny);
        }

        return new(builder.ToImmutable());
    }

    /// <inheritdoc/>
");
            
            #line default
            #line hidden
            
            #line 82 "CodeGenerator.Array.Add.tt"
  if (IsTuple || CanEnumerateAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 84 "CodeGenerator.Array.Add.tt"
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 84 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 84 "CodeGenerator.Array.Add.tt"
            this.Write(" IJsonArray<");
            
            #line default
            #line hidden
            
            #line 84 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 84 "CodeGenerator.Array.Add.tt"
            this.Write(">.AddRange<TItem>(IEnumerable<TItem> items)\r\n");
            
            #line default
            #line hidden
            
            #line 85 "CodeGenerator.Array.Add.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 88 "CodeGenerator.Array.Add.tt"
            this.Write("    public ");
            
            #line default
            #line hidden
            
            #line 88 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 88 "CodeGenerator.Array.Add.tt"
            this.Write(" AddRange<TItem>(IEnumerable<TItem> items)\r\n        where TItem : struct, IJsonVa" +
                    "lue<TItem>\r\n");
            
            #line default
            #line hidden
            
            #line 90 "CodeGenerator.Array.Add.tt"
  } 
            
            #line default
            #line hidden
            
            #line 91 "CodeGenerator.Array.Add.tt"
            this.Write(@"    {
        ImmutableList<JsonAny>.Builder builder = this.GetImmutableListBuilder();
        foreach (TItem item in items)
        {
            builder.Add(item.AsAny);
        }

        return new(builder.ToImmutable());
    }

    /// <inheritdoc/>
");
            
            #line default
            #line hidden
            
            #line 102 "CodeGenerator.Array.Add.tt"
  if (IsTuple || CanEnumerateAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 104 "CodeGenerator.Array.Add.tt"
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 104 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 104 "CodeGenerator.Array.Add.tt"
            this.Write(" IJsonArray<");
            
            #line default
            #line hidden
            
            #line 104 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 104 "CodeGenerator.Array.Add.tt"
            this.Write(">.AddRange(IEnumerable<JsonAny> items)\r\n");
            
            #line default
            #line hidden
            
            #line 105 "CodeGenerator.Array.Add.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 108 "CodeGenerator.Array.Add.tt"
            this.Write("    public ");
            
            #line default
            #line hidden
            
            #line 108 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 108 "CodeGenerator.Array.Add.tt"
            this.Write(" AddRange(IEnumerable<JsonAny> items)\r\n");
            
            #line default
            #line hidden
            
            #line 109 "CodeGenerator.Array.Add.tt"
  } 
            
            #line default
            #line hidden
            
            #line 110 "CodeGenerator.Array.Add.tt"
            this.Write("    {\r\n        ImmutableList<JsonAny>.Builder builder = this.GetImmutableListBuil" +
                    "der();\r\n        builder.AddRange(items);\r\n        return new(builder.ToImmutable" +
                    "());\r\n    }\r\n\r\n    /// <inheritdoc/>\r\n");
            
            #line default
            #line hidden
            
            #line 117 "CodeGenerator.Array.Add.tt"
  if (IsTuple || CanEnumerateAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 119 "CodeGenerator.Array.Add.tt"
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 119 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 119 "CodeGenerator.Array.Add.tt"
            this.Write(" IJsonArray<");
            
            #line default
            #line hidden
            
            #line 119 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 119 "CodeGenerator.Array.Add.tt"
            this.Write(">.Insert(int index, in JsonAny item1)\r\n");
            
            #line default
            #line hidden
            
            #line 120 "CodeGenerator.Array.Add.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 123 "CodeGenerator.Array.Add.tt"
            this.Write("    public ");
            
            #line default
            #line hidden
            
            #line 123 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 123 "CodeGenerator.Array.Add.tt"
            this.Write(" Insert(int index, in JsonAny item1)\r\n");
            
            #line default
            #line hidden
            
            #line 124 "CodeGenerator.Array.Add.tt"
  } 
            
            #line default
            #line hidden
            
            #line 125 "CodeGenerator.Array.Add.tt"
            this.Write("    {\r\n        return new(this.GetImmutableListWith(index, item1));\r\n    }\r\n\r\n   " +
                    " /// <inheritdoc/>\r\n");
            
            #line default
            #line hidden
            
            #line 130 "CodeGenerator.Array.Add.tt"
  if (IsTuple)
    { 
            
            #line default
            #line hidden
            
            #line 132 "CodeGenerator.Array.Add.tt"
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 132 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 132 "CodeGenerator.Array.Add.tt"
            this.Write(" IJsonArray<");
            
            #line default
            #line hidden
            
            #line 132 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 132 "CodeGenerator.Array.Add.tt"
            this.Write(">.InsertRange<TArray>(int index, in TArray items)\r\n");
            
            #line default
            #line hidden
            
            #line 133 "CodeGenerator.Array.Add.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 136 "CodeGenerator.Array.Add.tt"
            this.Write("    public ");
            
            #line default
            #line hidden
            
            #line 136 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 136 "CodeGenerator.Array.Add.tt"
            this.Write(" InsertRange<TArray>(int index, in TArray items)\r\n        where TArray : struct, " +
                    "IJsonArray<TArray>\r\n");
            
            #line default
            #line hidden
            
            #line 138 "CodeGenerator.Array.Add.tt"
  } 
            
            #line default
            #line hidden
            
            #line 139 "CodeGenerator.Array.Add.tt"
            this.Write("    {\r\n        return new(this.GetImmutableListWith(index, items.EnumerateArray()" +
                    "));\r\n    }\r\n\r\n    /// <inheritdoc/>\r\n");
            
            #line default
            #line hidden
            
            #line 144 "CodeGenerator.Array.Add.tt"
  if (IsTuple || CanEnumerateAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 146 "CodeGenerator.Array.Add.tt"
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 146 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 146 "CodeGenerator.Array.Add.tt"
            this.Write(" IJsonArray<");
            
            #line default
            #line hidden
            
            #line 146 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 146 "CodeGenerator.Array.Add.tt"
            this.Write(">.InsertRange<TItem>(int index, IEnumerable<TItem> items)\r\n");
            
            #line default
            #line hidden
            
            #line 147 "CodeGenerator.Array.Add.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 150 "CodeGenerator.Array.Add.tt"
            this.Write("    public ");
            
            #line default
            #line hidden
            
            #line 150 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 150 "CodeGenerator.Array.Add.tt"
            this.Write(" InsertRange<TItem>(int index, IEnumerable<TItem> items)\r\n        where TItem : s" +
                    "truct, IJsonValue<TItem>\r\n");
            
            #line default
            #line hidden
            
            #line 152 "CodeGenerator.Array.Add.tt"
  } 
            
            #line default
            #line hidden
            
            #line 153 "CodeGenerator.Array.Add.tt"
            this.Write("    {\r\n        return new(this.GetImmutableListWith(index, items.Select(item => i" +
                    "tem.AsAny)));\r\n    }\r\n\r\n    /// <inheritdoc/>\r\n");
            
            #line default
            #line hidden
            
            #line 158 "CodeGenerator.Array.Add.tt"
  if (IsTuple || CanEnumerateAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 160 "CodeGenerator.Array.Add.tt"
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 160 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 160 "CodeGenerator.Array.Add.tt"
            this.Write(" IJsonArray<");
            
            #line default
            #line hidden
            
            #line 160 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 160 "CodeGenerator.Array.Add.tt"
            this.Write(">.InsertRange(int index, IEnumerable<JsonAny> items)\r\n");
            
            #line default
            #line hidden
            
            #line 161 "CodeGenerator.Array.Add.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 164 "CodeGenerator.Array.Add.tt"
            this.Write("    public ");
            
            #line default
            #line hidden
            
            #line 164 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 164 "CodeGenerator.Array.Add.tt"
            this.Write(" InsertRange(int index, IEnumerable<JsonAny> items)\r\n");
            
            #line default
            #line hidden
            
            #line 165 "CodeGenerator.Array.Add.tt"
  } 
            
            #line default
            #line hidden
            
            #line 166 "CodeGenerator.Array.Add.tt"
            this.Write("    {\r\n        return new(this.GetImmutableListWith(index, items));\r\n    }\r\n\r\n   " +
                    " /// <inheritdoc/>\r\n");
            
            #line default
            #line hidden
            
            #line 171 "CodeGenerator.Array.Add.tt"
  if (IsTuple || CanEnumerateAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 173 "CodeGenerator.Array.Add.tt"
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 173 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 173 "CodeGenerator.Array.Add.tt"
            this.Write(" IJsonArray<");
            
            #line default
            #line hidden
            
            #line 173 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 173 "CodeGenerator.Array.Add.tt"
            this.Write(">.Replace(in JsonAny oldValue, in JsonAny newValue)\r\n");
            
            #line default
            #line hidden
            
            #line 174 "CodeGenerator.Array.Add.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 177 "CodeGenerator.Array.Add.tt"
            this.Write("    public ");
            
            #line default
            #line hidden
            
            #line 177 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 177 "CodeGenerator.Array.Add.tt"
            this.Write(" Replace(in JsonAny oldValue, in JsonAny newValue)\r\n");
            
            #line default
            #line hidden
            
            #line 178 "CodeGenerator.Array.Add.tt"
  } 
            
            #line default
            #line hidden
            
            #line 179 "CodeGenerator.Array.Add.tt"
            this.Write("    {\r\n        return new(this.GetImmutableListReplacing(oldValue.AsAny, newValue" +
                    ".AsAny));\r\n    }\r\n\r\n    /// <inheritdoc/>\r\n");
            
            #line default
            #line hidden
            
            #line 184 "CodeGenerator.Array.Add.tt"
  if (IsTuple || CanEnumerateAsSpecificType)
    { 
            
            #line default
            #line hidden
            
            #line 186 "CodeGenerator.Array.Add.tt"
            this.Write("    ");
            
            #line default
            #line hidden
            
            #line 186 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 186 "CodeGenerator.Array.Add.tt"
            this.Write(" IJsonArray<");
            
            #line default
            #line hidden
            
            #line 186 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 186 "CodeGenerator.Array.Add.tt"
            this.Write(">.SetItem(int index, in JsonAny value)\r\n");
            
            #line default
            #line hidden
            
            #line 187 "CodeGenerator.Array.Add.tt"
  }
    else
    { 
            
            #line default
            #line hidden
            
            #line 190 "CodeGenerator.Array.Add.tt"
            this.Write("    public ");
            
            #line default
            #line hidden
            
            #line 190 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 190 "CodeGenerator.Array.Add.tt"
            this.Write(" SetItem(int index, in JsonAny value)\r\n");
            
            #line default
            #line hidden
            
            #line 191 "CodeGenerator.Array.Add.tt"
  } 
            
            #line default
            #line hidden
            
            #line 192 "CodeGenerator.Array.Add.tt"
            this.Write("    {\r\n        return new(this.GetImmutableListSetting(index, value.AsAny));\r\n   " +
                    " }\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 196 "CodeGenerator.Array.Add.tt"
  if (ArrayRank > 1)
    {
            
            #line default
            #line hidden
            
            #line 198 "CodeGenerator.Array.Add.tt"
            this.Write("    /// <summary>\r\n    /// Set the item at the given location in an array of dime" +
                    "nsion ");
            
            #line default
            #line hidden
            
            #line 199 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ArrayRank ));
            
            #line default
            #line hidden
            
            #line 199 "CodeGenerator.Array.Add.tt"
            this.Write(".\r\n    /// </summary>\r\n");
            
            #line default
            #line hidden
            
            #line 201 "CodeGenerator.Array.Add.tt"
      for(int arrayDim = 1; arrayDim <= ArrayRank; ++arrayDim)
        { 
            
            #line default
            #line hidden
            
            #line 203 "CodeGenerator.Array.Add.tt"
            this.Write("    /// <param name=\"index");
            
            #line default
            #line hidden
            
            #line 203 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( arrayDim ));
            
            #line default
            #line hidden
            
            #line 203 "CodeGenerator.Array.Add.tt"
            this.Write("\">The index for dimension ");
            
            #line default
            #line hidden
            
            #line 203 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( arrayDim ));
            
            #line default
            #line hidden
            
            #line 203 "CodeGenerator.Array.Add.tt"
            this.Write(".</param>\r\n");
            
            #line default
            #line hidden
            
            #line 204 "CodeGenerator.Array.Add.tt"
      } 
            
            #line default
            #line hidden
            
            #line 205 "CodeGenerator.Array.Add.tt"
            this.Write("    /// <returns>The array with the item at the given index set.</returns>\r\n    p" +
                    "ublic ");
            
            #line default
            #line hidden
            
            #line 206 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 206 "CodeGenerator.Array.Add.tt"
            this.Write(" SetItem(");
            
            #line default
            #line hidden
            
            #line 206 "CodeGenerator.Array.Add.tt"
 for(int arrayDim = 1; arrayDim <= ArrayRank; ++arrayDim) {
            
            #line default
            #line hidden
            
            #line 207 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arrayDim > 1 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 207 "CodeGenerator.Array.Add.tt"
            this.Write("int index");
            
            #line default
            #line hidden
            
            #line 207 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arrayDim));
            
            #line default
            #line hidden
            
            #line 207 "CodeGenerator.Array.Add.tt"
 } 
            
            #line default
            #line hidden
            
            #line 208 "CodeGenerator.Array.Add.tt"
            this.Write(", in ");
            
            #line default
            #line hidden
            
            #line 208 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( LeafArrayItemType ));
            
            #line default
            #line hidden
            
            #line 208 "CodeGenerator.Array.Add.tt"
            this.Write(" value)\r\n    {\r\n        return this.SetItem(index1, this[index1].SetItem(");
            
            #line default
            #line hidden
            
            #line 210 "CodeGenerator.Array.Add.tt"
 for(int arrayDim = 2; arrayDim <= ArrayRank; ++arrayDim) {
            
            #line default
            #line hidden
            
            #line 211 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arrayDim > 2 ? ", " : ""));
            
            #line default
            #line hidden
            
            #line 211 "CodeGenerator.Array.Add.tt"
            this.Write("index");
            
            #line default
            #line hidden
            
            #line 211 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arrayDim));
            
            #line default
            #line hidden
            
            #line 211 "CodeGenerator.Array.Add.tt"
 } 
            
            #line default
            #line hidden
            
            #line 212 "CodeGenerator.Array.Add.tt"
            this.Write(", value));\r\n    }\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 215 "CodeGenerator.Array.Add.tt"
  } 
            
            #line default
            #line hidden
            
            #line 216 "CodeGenerator.Array.Add.tt"
  if (CanEnumerateAsSpecificType && !IsTuple)
    { 
            
            #line default
            #line hidden
            
            #line 218 "CodeGenerator.Array.Add.tt"
            this.Write(@"    /// <summary>
    /// Add an item to the array.
    /// </summary>
    /// <param name=""item1"">The item to add.</param>
    /// <returns>An instance of the array with the item added.</returns>
    /// <exception cref=""InvalidOperationException"">The value was not an array.</exception>
    public ");
            
            #line default
            #line hidden
            
            #line 224 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 224 "CodeGenerator.Array.Add.tt"
            this.Write(" Add(in ");
            
            #line default
            #line hidden
            
            #line 224 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 224 "CodeGenerator.Array.Add.tt"
            this.Write(@" item1)
    {
        ImmutableList<JsonAny>.Builder builder = this.GetImmutableListBuilder();
        builder.Add(item1);
        return new(builder.ToImmutable());
    }

    /// <summary>
    /// Add a set of items to the array.
    /// </summary>
    /// <param name=""items"">The items to add.</param>
    /// <returns>An instance of the array with the items added.</returns>
    /// <exception cref=""InvalidOperationException"">The value was not an array.</exception>
    public ");
            
            #line default
            #line hidden
            
            #line 237 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 237 "CodeGenerator.Array.Add.tt"
            this.Write(" Add(params ");
            
            #line default
            #line hidden
            
            #line 237 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 237 "CodeGenerator.Array.Add.tt"
            this.Write("[] items)\r\n    {\r\n        ImmutableList<JsonAny>.Builder builder = this.GetImmuta" +
                    "bleListBuilder();\r\n\r\n        foreach (");
            
            #line default
            #line hidden
            
            #line 241 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 241 "CodeGenerator.Array.Add.tt"
            this.Write(@" item in items)
        {
            builder.Add(item.AsAny);
        }

        return new(builder.ToImmutable());
    }

    /// <summary>
    /// Add a set of items to the array.
    /// </summary>
    /// <param name=""items"">The items to add.</param>
    /// <returns>An instance of the array with the items added.</returns>
    /// <exception cref=""InvalidOperationException"">The value was not an array.</exception>
    public ");
            
            #line default
            #line hidden
            
            #line 255 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 255 "CodeGenerator.Array.Add.tt"
            this.Write(" AddRange(IEnumerable<");
            
            #line default
            #line hidden
            
            #line 255 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 255 "CodeGenerator.Array.Add.tt"
            this.Write("> items)\r\n    {\r\n        ImmutableList<JsonAny>.Builder builder = this.GetImmutab" +
                    "leListBuilder();\r\n        foreach (");
            
            #line default
            #line hidden
            
            #line 258 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 258 "CodeGenerator.Array.Add.tt"
            this.Write(@" item in items)
        {
            builder.Add(item.AsAny);
        }

        return new(builder.ToImmutable());
    }

    /// <summary>
    /// Insert an item into the array at the given index.
    /// </summary>
    /// <param name=""index"">The index at which to add the item.</param>
    /// <param name=""item1"">The item to add.</param>
    /// <returns>An instance of the array with the item added.</returns>
    /// <exception cref=""InvalidOperationException"">The value was not an array.</exception>
    public ");
            
            #line default
            #line hidden
            
            #line 273 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 273 "CodeGenerator.Array.Add.tt"
            this.Write(" Insert(int index, in ");
            
            #line default
            #line hidden
            
            #line 273 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 273 "CodeGenerator.Array.Add.tt"
            this.Write(@" item1)
    {
        return new(this.GetImmutableListWith(index, item1));
    }

    /// <summary>
    /// Insert items into the array at the given index.
    /// </summary>
    /// <param name=""index"">The index at which to add the items.</param>
    /// <param name=""items"">The items to add.</param>
    /// <returns>An instance of the array with the items added.</returns>
    /// <exception cref=""InvalidOperationException"">The value was not an array.</exception>
    /// <exception cref=""IndexOutOfRangeException"">The index was outside the bounds of the array.</exception>
    public ");
            
            #line default
            #line hidden
            
            #line 286 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 286 "CodeGenerator.Array.Add.tt"
            this.Write(" InsertRange(int index, IEnumerable<");
            
            #line default
            #line hidden
            
            #line 286 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 286 "CodeGenerator.Array.Add.tt"
            this.Write(@"> items)
    {
        return new(this.GetImmutableListWith(index, items.Select(item => item.AsAny)));
    }

    /// <summary>
    /// Replace the first instance of the given value with the new value, even if the items are identical.
    /// </summary>
    /// <param name=""oldValue"">The item to remove.</param>
    /// <param name=""newValue"">The item to insert.</param>
    /// <returns>An instance of the array with the item replaced.</returns>
    /// <exception cref=""InvalidOperationException"">The value was not an array.</exception>
    public ");
            
            #line default
            #line hidden
            
            #line 298 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 298 "CodeGenerator.Array.Add.tt"
            this.Write(" Replace(in ");
            
            #line default
            #line hidden
            
            #line 298 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 298 "CodeGenerator.Array.Add.tt"
            this.Write(" oldValue, in ");
            
            #line default
            #line hidden
            
            #line 298 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 298 "CodeGenerator.Array.Add.tt"
            this.Write(@" newValue)
    {
        return new(this.GetImmutableListReplacing(oldValue.AsAny, newValue.AsAny));
    }

    /// <summary>
    /// Set the item at the given index.
    /// </summary>
    /// <param name=""index"">The index at which to set the item.</param>
    /// <param name=""value"">The value to set.</param>
    /// <returns>An instance of the array with the item set to the given value.</returns>
    public ");
            
            #line default
            #line hidden
            
            #line 309 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( TypeDeclaration.DotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 309 "CodeGenerator.Array.Add.tt"
            this.Write(" SetItem(int index, in ");
            
            #line default
            #line hidden
            
            #line 309 "CodeGenerator.Array.Add.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( SingleItemsDotnetTypeName ));
            
            #line default
            #line hidden
            
            #line 309 "CodeGenerator.Array.Add.tt"
            this.Write(" value)\r\n    {\r\n        return new(this.GetImmutableListSetting(index, value.AsAn" +
                    "y));\r\n    }\r\n");
            
            #line default
            #line hidden
            
            #line 313 "CodeGenerator.Array.Add.tt"
  } 
            
            #line default
            #line hidden
            
            #line 314 "CodeGenerator.Array.Add.tt"
            this.Write("}\r\n");
            
            #line default
            #line hidden
            
            #line 315 "CodeGenerator.Array.Add.tt"
 EndNesting(); 
            
            #line default
            #line hidden
            
            #line 316 "CodeGenerator.Array.Add.tt"
            this.Write("\r\n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class CodeGeneratorArrayAddBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
