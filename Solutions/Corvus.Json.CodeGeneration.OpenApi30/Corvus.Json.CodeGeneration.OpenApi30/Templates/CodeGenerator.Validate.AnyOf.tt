<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Corvus.Json" #>
<#
    // This is only emitted if HasAnyOf is true
    if(!ShouldGenerate)
    {
        throw new InvalidOperationException("CodeGenerator.Validate.AnyOf should not be emitted if HasAnyOf is false.");
    } #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using Corvus.Json;

namespace <#= Namespace #>;

<# BeginNesting(); #>
<#= FormattedTypeDocumentation #>
public readonly partial struct <#= TypeDeclaration.DotnetTypeName #>
{
    private ValidationContext ValidateAnyOf(in ValidationContext validationContext, ValidationLevel level)
    {
        ValidationContext result = validationContext;
        if (level > ValidationLevel.Basic)
        {
            result = result.PushValidationLocationProperty("anyOf");
        }

        ValidationContext childContextBase = result;

        bool foundValid = false;
<#  int anyOfIndex = 0;
    foreach (var anyOf in AnyOf)
    { #>

        ValidationContext childContext<#= anyOfIndex #> = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext<#= anyOfIndex #> = childContext<#= anyOfIndex #>.PushValidationLocationArrayIndex(<#= anyOfIndex #>);
        }

        ValidationContext anyOfResult<#= anyOfIndex #> = this.As<<#= anyOf #>>().Validate(childContext<#= anyOfIndex #>.CreateChildContext(), level);

        if (anyOfResult<#= anyOfIndex #>.IsValid)
        {
            result = result.MergeChildContext(anyOfResult<#= anyOfIndex #>, level >= ValidationLevel.Verbose);
            foundValid = true;
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, anyOfResult<#= anyOfIndex #>);
            }
        }

<#      anyOfIndex++;
    } #>

        if (foundValid)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: true, "Validation 10.2.1.2. anyOf - validated against the anyOf schema.");
            }
        }
        else
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, "Validation 10.2.1.2. anyOf - failed to validate against the anyOf schema.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "Validation 10.2.1.2. anyOf - failed to validate against the anyOf schema.");
            }
            else
            {
                result = result.WithResult(isValid: false);
            }
        }

        if (level > ValidationLevel.Basic)
        {
            result = result.PopLocation(); // anyOf
        }

        return result;
    }
}
<# EndNesting(); #>
<#+
    public bool ShouldGenerate
    {
        get
        {
            return HasAnyOf;
        }
    }
#>