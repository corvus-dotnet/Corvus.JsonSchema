//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.CodeGenerator;
/// <summary>
/// JSON Schema for a configuration driver file for the corvus codegenerator.
/// </summary>
public readonly partial struct GeneratorConfig
    : IJsonObject<Corvus.Json.CodeGenerator.GeneratorConfig>
{
    /// <summary>
    /// Conversion from <see cref="ImmutableList{JsonObjectProperty}"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator GeneratorConfig(ImmutableList<JsonObjectProperty> value)
    {
        return new(value);
    }

    /// <summary>
    /// Conversion to <see cref="ImmutableList{JsonObjectProperty}"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator ImmutableList<JsonObjectProperty>(GeneratorConfig value)
    {
        return
            __CorvusObjectHelpers.GetPropertyBacking(value);
    }

    /// <summary>
    /// Conversion from JsonObject.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator GeneratorConfig(JsonObject value)
    {
        if (value.HasDotnetBacking && value.ValueKind == JsonValueKind.Object)
        {
            return new(
                __CorvusObjectHelpers.GetPropertyBacking(value));
        }

        return new(value.AsJsonElement);
    }

    /// <summary>
    /// Conversion to JsonObject.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator JsonObject(GeneratorConfig value)
    {
        return
            value.AsObject;
    }

    /// <inheritdoc/>
    public Corvus.Json.JsonAny this[in JsonPropertyName name]
    {
        get
        {
            if (this.TryGetProperty(name, out Corvus.Json.JsonAny result))
            {
                return result;
            }

            throw new InvalidOperationException();
        }
    }

    /// <summary>
    /// Gets the number of properties in the object.
    /// </summary>
    public int Count
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                int count = 0;
                foreach (var _ in this.jsonElementBacking.EnumerateObject())
                {
                    count++;
                }
                return count;
            }

            if ((this.backing & Backing.Object) != 0)
            {
                return this.objectBacking.Count;
            }

            throw new InvalidOperationException();
        }
    }

    /// <summary>
    /// Gets the (optional) <c>additionalFiles</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If this JSON property is <see cref="JsonValueKind.Undefined"/> then the value returned will be <see langword="null" />.
    /// </para>
    /// <para>
    /// Additional files to add to the generation context.
    /// </para>
    /// </remarks>
    public Corvus.Json.CodeGenerator.GeneratorConfig.FileList? AdditionalFiles
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.AdditionalFilesUtf8, out JsonElement result))
                {
                    if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                    {
                        return default;
                    }

                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.AdditionalFiles, out JsonAny result))
                {
                    if (result.IsNullOrUndefined())
                    {
                        return default;
                    }

                    return result.As<Corvus.Json.CodeGenerator.GeneratorConfig.FileList>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>assertFormat</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If this JSON property is <see cref="JsonValueKind.Undefined"/> then the value returned will be <see langword="null" />.
    /// </para>
    /// <para>
    /// If true, assert format specifications.
    /// </para>
    /// <para>
    /// If true, assert format specifications.
    /// </para>
    /// </remarks>
    public Corvus.Json.JsonBoolean? AssertFormat
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.AssertFormatUtf8, out JsonElement result))
                {
                    if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                    {
                        return default;
                    }

                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.AssertFormat, out JsonAny result))
                {
                    if (result.IsNullOrUndefined())
                    {
                        return default;
                    }

                    return result.As<Corvus.Json.JsonBoolean>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>disabledNamingHeuristics</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If this JSON property is <see cref="JsonValueKind.Undefined"/> then the value returned will be <see langword="null" />.
    /// </para>
    /// <para>
    /// A list of naming heuristics to disable.
    /// </para>
    /// <para>
    /// A list of naming heuristics to disable.
    /// </para>
    /// </remarks>
    public Corvus.Json.CodeGenerator.GeneratorConfig.JsonStringArray? DisabledNamingHeuristics
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DisabledNamingHeuristicsUtf8, out JsonElement result))
                {
                    if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                    {
                        return default;
                    }

                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.DisabledNamingHeuristics, out JsonAny result))
                {
                    if (result.IsNullOrUndefined())
                    {
                        return default;
                    }

                    return result.As<Corvus.Json.CodeGenerator.GeneratorConfig.JsonStringArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>disableOptionalNameHeuristics</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If this JSON property is <see cref="JsonValueKind.Undefined"/> then the value returned will be <see langword="null" />.
    /// </para>
    /// <para>
    /// If true, do not use optional name heuristics.
    /// </para>
    /// <para>
    /// If true, do not use optional name heuristics.
    /// </para>
    /// </remarks>
    public Corvus.Json.CodeGenerator.GeneratorConfig.DisableOptionalNameHeuristicsEntity? DisableOptionalNameHeuristics
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DisableOptionalNameHeuristicsUtf8, out JsonElement result))
                {
                    if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                    {
                        return default;
                    }

                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.DisableOptionalNameHeuristics, out JsonAny result))
                {
                    if (result.IsNullOrUndefined())
                    {
                        return default;
                    }

                    return result.As<Corvus.Json.CodeGenerator.GeneratorConfig.DisableOptionalNameHeuristicsEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>namedTypes</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If this JSON property is <see cref="JsonValueKind.Undefined"/> then the value returned will be <see langword="null" />.
    /// </para>
    /// <para>
    /// A list of schema that are to be named explicitly.
    /// </para>
    /// </remarks>
    public Corvus.Json.CodeGenerator.GeneratorConfig.NamedTypeList? NamedTypes
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.NamedTypesUtf8, out JsonElement result))
                {
                    if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                    {
                        return default;
                    }

                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.NamedTypes, out JsonAny result))
                {
                    if (result.IsNullOrUndefined())
                    {
                        return default;
                    }

                    return result.As<Corvus.Json.CodeGenerator.GeneratorConfig.NamedTypeList>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>namespaces</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If this JSON property is <see cref="JsonValueKind.Undefined"/> then the value returned will be <see langword="null" />.
    /// </para>
    /// <para>
    /// A map of schema base URIs to .NET namespaces.
    /// </para>
    /// <para>
    /// Any schema under the given base URI will be mapped into the target namespace.
    /// </para>
    /// </remarks>
    public Corvus.Json.CodeGenerator.GeneratorConfig.NamespaceMap? Namespaces
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.NamespacesUtf8, out JsonElement result))
                {
                    if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                    {
                        return default;
                    }

                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Namespaces, out JsonAny result))
                {
                    if (result.IsNullOrUndefined())
                    {
                        return default;
                    }

                    return result.As<Corvus.Json.CodeGenerator.GeneratorConfig.NamespaceMap>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>optionalAsNullable</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If this JSON property is <see cref="JsonValueKind.Undefined"/> then the value returned will be <see langword="null" />.
    /// </para>
    /// <para>
    /// If NullOrUndefined, optional properties are emitted as .NET nullable values.
    /// </para>
    /// </remarks>
    public Corvus.Json.CodeGenerator.GeneratorConfig.OptionalAsNullable? OptionalAsNullableValue
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.OptionalAsNullableValueUtf8, out JsonElement result))
                {
                    if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                    {
                        return default;
                    }

                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.OptionalAsNullableValue, out JsonAny result))
                {
                    if (result.IsNullOrUndefined())
                    {
                        return default;
                    }

                    return result.As<Corvus.Json.CodeGenerator.GeneratorConfig.OptionalAsNullable>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>outputMapFile</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If this JSON property is <see cref="JsonValueKind.Undefined"/> then the value returned will be <see langword="null" />.
    /// </para>
    /// <para>
    /// The name to use for a map file which includes details of the files that were written.
    /// </para>
    /// <para>
    /// The name to use for a map file which includes details of the files that were written.
    /// </para>
    /// </remarks>
    public Corvus.Json.JsonString? OutputMapFile
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.OutputMapFileUtf8, out JsonElement result))
                {
                    if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                    {
                        return default;
                    }

                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.OutputMapFile, out JsonAny result))
                {
                    if (result.IsNullOrUndefined())
                    {
                        return default;
                    }

                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>outputPath</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If this JSON property is <see cref="JsonValueKind.Undefined"/> then the value returned will be <see langword="null" />.
    /// </para>
    /// <para>
    /// The path to which to write the generated code.
    /// </para>
    /// <para>
    /// The path to which to write the generated code.
    /// </para>
    /// </remarks>
    public Corvus.Json.JsonString? OutputPath
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.OutputPathUtf8, out JsonElement result))
                {
                    if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                    {
                        return default;
                    }

                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.OutputPath, out JsonAny result))
                {
                    if (result.IsNullOrUndefined())
                    {
                        return default;
                    }

                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>rootNamespace</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// <para>
    /// The default root namespace for generated types.
    /// </para>
    /// <para>
    /// The default root namespace for generated types.
    /// </para>
    /// </remarks>
    public Corvus.Json.JsonString RootNamespace
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.RootNamespaceUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.RootNamespace, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>typesToGenerate</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
    /// </para>
    /// <para>
    /// The generation specification for the code generator.
    /// </para>
    /// </remarks>
    public Corvus.Json.CodeGenerator.GeneratorConfig.GenerationSpecifications TypesToGenerate
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.TypesToGenerateUtf8, out JsonElement result))
                {
                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.TypesToGenerate, out JsonAny result))
                {
                    return result.As<Corvus.Json.CodeGenerator.GeneratorConfig.GenerationSpecifications>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>useImplicitOperatorString</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If this JSON property is <see cref="JsonValueKind.Undefined"/> then the value returned will be <see langword="null" />.
    /// </para>
    /// <para>
    /// If true, then the conversion operator to string will be implicit, rather than explicit.
    /// </para>
    /// <para>
    /// Warning: if this is enabled, it is easy to accidentally allocate strings without being explicit about doing so.
    /// </para>
    /// <para>
    /// If true, then the conversion operator to string will be implicit, rather than explicit.
    /// </para>
    /// <para>
    /// Warning: if this is enabled, it is easy to accidentally allocate strings without being explicit about doing so.
    /// </para>
    /// </remarks>
    public Corvus.Json.JsonBoolean? UseImplicitOperatorString
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.UseImplicitOperatorStringUtf8, out JsonElement result))
                {
                    if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                    {
                        return default;
                    }

                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.UseImplicitOperatorString, out JsonAny result))
                {
                    if (result.IsNullOrUndefined())
                    {
                        return default;
                    }

                    return result.As<Corvus.Json.JsonBoolean>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>useSchema</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If this JSON property is <see cref="JsonValueKind.Undefined"/> then the value returned will be <see langword="null" />.
    /// </para>
    /// <para>
    /// Provides the fallback schema to use if vocabulary analysis fails.
    /// </para>
    /// <para>
    /// Well-known fallback draft schema.
    /// </para>
    /// </remarks>
    public Corvus.Json.CodeGenerator.GeneratorConfig.UseSchema? UseSchemaValue
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.UseSchemaValueUtf8, out JsonElement result))
                {
                    if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                    {
                        return default;
                    }

                    return new(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.UseSchemaValue, out JsonAny result))
                {
                    if (result.IsNullOrUndefined())
                    {
                        return default;
                    }

                    return result.As<Corvus.Json.CodeGenerator.GeneratorConfig.UseSchema>();
                }
            }

            return default;
        }
    }

    /// <inheritdoc/>
    public static GeneratorConfig FromProperties(IDictionary<JsonPropertyName, JsonAny> source)
    {
        return new(source.Select(kvp => new JsonObjectProperty(kvp.Key, kvp.Value)).ToImmutableList());
    }

    /// <inheritdoc/>
    public static GeneratorConfig FromProperties(params (JsonPropertyName Name, JsonAny Value)[] source)
    {
        return new(source.Select(s => new JsonObjectProperty(s.Name, s.Value.AsAny)).ToImmutableList());
    }

    /// <summary>
    /// Creates an instance of the type from the given immutable list of properties.
    /// </summary>
    /// <param name="source">The list of properties.</param>
    /// <returns>An instance of the type initialized from the list of properties.</returns>
    public static GeneratorConfig FromProperties(ImmutableList<JsonObjectProperty> source)
    {
        return new(source);
    }

    /// <summary>
    /// Creates an instance of a <see cref="GeneratorConfig"/>.
    /// </summary>
    public static GeneratorConfig Create(
        in Corvus.Json.JsonString rootNamespace,
        in Corvus.Json.CodeGenerator.GeneratorConfig.GenerationSpecifications typesToGenerate,
        in Corvus.Json.CodeGenerator.GeneratorConfig.FileList? additionalFiles = null,
        in Corvus.Json.JsonBoolean? assertFormat = null,
        in Corvus.Json.CodeGenerator.GeneratorConfig.JsonStringArray? disabledNamingHeuristics = null,
        in Corvus.Json.CodeGenerator.GeneratorConfig.DisableOptionalNameHeuristicsEntity? disableOptionalNameHeuristics = null,
        in Corvus.Json.CodeGenerator.GeneratorConfig.NamedTypeList? namedTypes = null,
        in Corvus.Json.CodeGenerator.GeneratorConfig.NamespaceMap? namespaces = null,
        in Corvus.Json.CodeGenerator.GeneratorConfig.OptionalAsNullable? optionalAsNullableValue = null,
        in Corvus.Json.JsonString? outputMapFile = null,
        in Corvus.Json.JsonString? outputPath = null,
        in Corvus.Json.JsonBoolean? useImplicitOperatorString = null,
        in Corvus.Json.CodeGenerator.GeneratorConfig.UseSchema? useSchemaValue = null)
    {
        var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
        builder.Add(JsonPropertyNames.RootNamespace, rootNamespace.AsAny);
        builder.Add(JsonPropertyNames.TypesToGenerate, typesToGenerate.AsAny);
        if (additionalFiles is not null)
        {
            builder.Add(JsonPropertyNames.AdditionalFiles, additionalFiles.Value.AsAny);
        }

        if (assertFormat is not null)
        {
            builder.Add(JsonPropertyNames.AssertFormat, assertFormat.Value.AsAny);
        }

        if (disabledNamingHeuristics is not null)
        {
            builder.Add(JsonPropertyNames.DisabledNamingHeuristics, disabledNamingHeuristics.Value.AsAny);
        }

        if (disableOptionalNameHeuristics is not null)
        {
            builder.Add(JsonPropertyNames.DisableOptionalNameHeuristics, disableOptionalNameHeuristics.Value.AsAny);
        }

        if (namedTypes is not null)
        {
            builder.Add(JsonPropertyNames.NamedTypes, namedTypes.Value.AsAny);
        }

        if (namespaces is not null)
        {
            builder.Add(JsonPropertyNames.Namespaces, namespaces.Value.AsAny);
        }

        if (optionalAsNullableValue is not null)
        {
            builder.Add(JsonPropertyNames.OptionalAsNullableValue, optionalAsNullableValue.Value.AsAny);
        }

        if (outputMapFile is not null)
        {
            builder.Add(JsonPropertyNames.OutputMapFile, outputMapFile.Value.AsAny);
        }

        if (outputPath is not null)
        {
            builder.Add(JsonPropertyNames.OutputPath, outputPath.Value.AsAny);
        }

        if (useImplicitOperatorString is not null)
        {
            builder.Add(JsonPropertyNames.UseImplicitOperatorString, useImplicitOperatorString.Value.AsAny);
        }

        if (useSchemaValue is not null)
        {
            builder.Add(JsonPropertyNames.UseSchemaValue, useSchemaValue.Value.AsAny);
        }

        return new(builder.ToImmutable());
    }

    /// <inheritdoc/>
    public ImmutableList<JsonObjectProperty> AsPropertyBacking()
    {
        return __CorvusObjectHelpers.GetPropertyBacking(this);
    }
    /// <inheritdoc/>
    public ImmutableList<JsonObjectProperty>.Builder AsPropertyBackingBuilder()
    {
        return __CorvusObjectHelpers.GetPropertyBacking(this).ToBuilder();
    }

    /// <inheritdoc/>
    public JsonObjectEnumerator EnumerateObject()
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            return new(this.jsonElementBacking);
        }

        if ((this.backing & Backing.Object) != 0)
        {
            return new(this.objectBacking);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc/>
    public bool HasProperties()
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.Count > 0;
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            using JsonElement.ObjectEnumerator enumerator = this.jsonElementBacking.EnumerateObject();
            return enumerator.MoveNext();
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool HasProperty(in JsonPropertyName name)
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.ContainsKey(name);
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            return name.TryGetProperty(this.jsonElementBacking, out JsonElement _);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool HasProperty(string name)
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.ContainsKey(name);
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            return this.jsonElementBacking.TryGetProperty(name, out _);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool HasProperty(ReadOnlySpan<char> name)
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.ContainsKey(name);
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            return this.jsonElementBacking.TryGetProperty(name, out _);
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool HasProperty(ReadOnlySpan<byte> name)
    {
        if ((this.backing & Backing.Object) != 0)
        {
            return this.objectBacking.ContainsKey(name);
        }

        if ((this.backing & Backing.JsonElement) != 0)
        {
            return this.jsonElementBacking.TryGetProperty(name, out _);
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name="name">The name of the property.</param>
    /// <param name="value">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref="InvalidOperationException">The value is not an object.</exception>
    public bool TryGetProperty(in JsonPropertyName name, out JsonAny value)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (name.TryGetProperty(this.jsonElementBacking, out JsonElement element))
            {
                value = new(element);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
                value = result;
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name="name">The name of the property.</param>
    /// <param name="value">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref="InvalidOperationException">The value is not an object.</exception>
    public bool TryGetProperty(string name, out JsonAny value)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
                value = new(element);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
                value = result;
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name="name">The name of the property.</param>
    /// <param name="value">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref="InvalidOperationException">The value is not an object.</exception>
    public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
                value = new(element);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
                value = result;
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Get a property.
    /// </summary>
    /// <param name="name">The name of the property.</param>
    /// <param name="value">The value of the property.</param>
    /// <returns><c>True</c> if the property was present.</returns>
    /// <exception cref="InvalidOperationException">The value is not an object.</exception>
    public bool TryGetProperty(ReadOnlySpan<byte> name, out JsonAny value)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
                value = new(element);
                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
                value = result;
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool TryGetProperty<TValue>(in JsonPropertyName name, out TValue value)
        where TValue : struct, IJsonValue<TValue>
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (name.TryGetProperty(this.jsonElementBacking, out JsonElement element))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(element);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool TryGetProperty<TValue>(string name, out TValue value)
        where TValue : struct, IJsonValue<TValue>
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(element);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool TryGetProperty<TValue>(ReadOnlySpan<char> name, out TValue value)
        where TValue : struct, IJsonValue<TValue>
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(element);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public bool TryGetProperty<TValue>(ReadOnlySpan<byte> name, out TValue value)
        where TValue : struct, IJsonValue<TValue>
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
            {
                value = default;
                return false;
            }

            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromJson(element);
#else
                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                return true;
            }

            value = default;
            return false;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            if (this.objectBacking.TryGetValue(name, out JsonAny result))
            {
#if NET8_0_OR_GREATER
                value = TValue.FromAny(result);
#else
                value = result.As<TValue>();
#endif
                return true;
            }

            value = default;
            return false;
        }

        throw new InvalidOperationException();
    }

    /// <inheritdoc />
    public GeneratorConfig SetProperty<TValue>(in JsonPropertyName name, TValue value)
        where TValue : struct, IJsonValue
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWith(this, name, value.AsAny));
    }

    /// <inheritdoc />
    public GeneratorConfig RemoveProperty(in JsonPropertyName name)
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
    }

    /// <inheritdoc />
    public GeneratorConfig RemoveProperty(string name)
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
    }

    /// <inheritdoc />
    public GeneratorConfig RemoveProperty(ReadOnlySpan<char> name)
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
    }

    /// <inheritdoc />
    public GeneratorConfig RemoveProperty(ReadOnlySpan<byte> name)
    {
        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
    }

    /// <summary>
    /// Provides UTF8 and string versions of the JSON property names on the object.
    /// </summary>
    public static class JsonPropertyNames
    {
        /// <summary>
        /// Gets the JSON property name for <see cref="AdditionalFiles"/>.
        /// </summary>
        public const string AdditionalFiles = "additionalFiles";

        /// <summary>
        /// Gets the JSON property name for <see cref="AssertFormat"/>.
        /// </summary>
        public const string AssertFormat = "assertFormat";

        /// <summary>
        /// Gets the JSON property name for <see cref="DisabledNamingHeuristics"/>.
        /// </summary>
        public const string DisabledNamingHeuristics = "disabledNamingHeuristics";

        /// <summary>
        /// Gets the JSON property name for <see cref="DisableOptionalNameHeuristics"/>.
        /// </summary>
        public const string DisableOptionalNameHeuristics = "disableOptionalNameHeuristics";

        /// <summary>
        /// Gets the JSON property name for <see cref="NamedTypes"/>.
        /// </summary>
        public const string NamedTypes = "namedTypes";

        /// <summary>
        /// Gets the JSON property name for <see cref="Namespaces"/>.
        /// </summary>
        public const string Namespaces = "namespaces";

        /// <summary>
        /// Gets the JSON property name for <see cref="OptionalAsNullableValue"/>.
        /// </summary>
        public const string OptionalAsNullableValue = "optionalAsNullable";

        /// <summary>
        /// Gets the JSON property name for <see cref="OutputMapFile"/>.
        /// </summary>
        public const string OutputMapFile = "outputMapFile";

        /// <summary>
        /// Gets the JSON property name for <see cref="OutputPath"/>.
        /// </summary>
        public const string OutputPath = "outputPath";

        /// <summary>
        /// Gets the JSON property name for <see cref="RootNamespace"/>.
        /// </summary>
        public const string RootNamespace = "rootNamespace";

        /// <summary>
        /// Gets the JSON property name for <see cref="TypesToGenerate"/>.
        /// </summary>
        public const string TypesToGenerate = "typesToGenerate";

        /// <summary>
        /// Gets the JSON property name for <see cref="UseImplicitOperatorString"/>.
        /// </summary>
        public const string UseImplicitOperatorString = "useImplicitOperatorString";

        /// <summary>
        /// Gets the JSON property name for <see cref="UseSchemaValue"/>.
        /// </summary>
        public const string UseSchemaValue = "useSchema";

        /// <summary>
        /// Gets the JSON property name for <see cref="AdditionalFiles"/>.
        /// </summary>
        public static ReadOnlySpan<byte> AdditionalFilesUtf8 => "additionalFiles"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="AssertFormat"/>.
        /// </summary>
        public static ReadOnlySpan<byte> AssertFormatUtf8 => "assertFormat"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="DisabledNamingHeuristics"/>.
        /// </summary>
        public static ReadOnlySpan<byte> DisabledNamingHeuristicsUtf8 => "disabledNamingHeuristics"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="DisableOptionalNameHeuristics"/>.
        /// </summary>
        public static ReadOnlySpan<byte> DisableOptionalNameHeuristicsUtf8 => "disableOptionalNameHeuristics"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="NamedTypes"/>.
        /// </summary>
        public static ReadOnlySpan<byte> NamedTypesUtf8 => "namedTypes"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="Namespaces"/>.
        /// </summary>
        public static ReadOnlySpan<byte> NamespacesUtf8 => "namespaces"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="OptionalAsNullableValue"/>.
        /// </summary>
        public static ReadOnlySpan<byte> OptionalAsNullableValueUtf8 => "optionalAsNullable"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="OutputMapFile"/>.
        /// </summary>
        public static ReadOnlySpan<byte> OutputMapFileUtf8 => "outputMapFile"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="OutputPath"/>.
        /// </summary>
        public static ReadOnlySpan<byte> OutputPathUtf8 => "outputPath"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="RootNamespace"/>.
        /// </summary>
        public static ReadOnlySpan<byte> RootNamespaceUtf8 => "rootNamespace"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="TypesToGenerate"/>.
        /// </summary>
        public static ReadOnlySpan<byte> TypesToGenerateUtf8 => "typesToGenerate"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="UseImplicitOperatorString"/>.
        /// </summary>
        public static ReadOnlySpan<byte> UseImplicitOperatorStringUtf8 => "useImplicitOperatorString"u8;

        /// <summary>
        /// Gets the JSON property name for <see cref="UseSchemaValue"/>.
        /// </summary>
        public static ReadOnlySpan<byte> UseSchemaValueUtf8 => "useSchema"u8;
    }

    private static class __CorvusObjectHelpers
    {
        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonAny"/> built from the object.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBacking(in GeneratorConfig that)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking;
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilder(that.jsonElementBacking).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in GeneratorConfig that, in JsonPropertyName name)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.Remove(name);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in GeneratorConfig that, ReadOnlySpan<char> name)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.Remove(name);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in GeneratorConfig that, ReadOnlySpan<byte> name)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.Remove(name);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in GeneratorConfig that, string name)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.Remove(name);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
            }

            throw new InvalidOperationException();
        }

        /// <summary>
        /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
        /// </summary>
        /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, with the given property.</returns>
        /// <exception cref="InvalidOperationException">The value is not an object.</exception>
        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWith(in GeneratorConfig that, in JsonPropertyName name, in JsonAny value)
        {
            if ((that.backing & Backing.Object) != 0)
            {
                return that.objectBacking.SetItem(name, value);
            }

            if ((that.backing & Backing.JsonElement) != 0)
            {
                return PropertyBackingBuilders.GetPropertyBackingBuilderReplacing(that.jsonElementBacking, name, value).ToImmutable();
            }

            throw new InvalidOperationException();
        }
    }
}
