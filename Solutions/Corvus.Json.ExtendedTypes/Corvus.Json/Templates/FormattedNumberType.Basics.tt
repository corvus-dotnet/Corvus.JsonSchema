<#@ template language="C#" #>
<#@ parameter type="System.String" name="TypeName"#>
<#@ parameter type="System.String" name="JsonTypeName"#>
<#@ parameter type="System.String" name="ConversionOperatorToByte" #>
<#@ parameter type="System.String" name="ConversionOperatorToSByte" #>
<#@ parameter type="System.String" name="ConversionOperatorToInt16" #>
<#@ parameter type="System.String" name="ConversionOperatorToUInt16" #>
<#@ parameter type="System.String" name="ConversionOperatorToInt32" #>
<#@ parameter type="System.String" name="ConversionOperatorToUInt32" #>
<#@ parameter type="System.String" name="ConversionOperatorToInt64" #>
<#@ parameter type="System.String" name="ConversionOperatorToUInt64" #>
<#@ parameter type="System.String" name="ConversionOperatorToInt128" #>
<#@ parameter type="System.String" name="ConversionOperatorToUInt128" #>
<#@ parameter type="System.String" name="ConversionOperatorToHalf" #>
<#@ parameter type="System.String" name="ConversionOperatorToSingle" #>
<#@ parameter type="System.String" name="ConversionOperatorToDouble" #>
<#@ parameter type="System.String" name="ConversionOperatorToDecimal" #>
// <copyright file="<#= TypeName #>.Basics.cs" company="Endjin Limited">
// Copyright (c) Endjin Limited. All rights reserved.
// </copyright>

using System.Numerics;
using System.Text.Json;

using Corvus.Json.Internal;

namespace Corvus.Json;

/// <summary>
/// Represents a JSON <#= JsonTypeName #>.
/// </summary>
public readonly partial struct <#= TypeName #>
#if NET8_0_OR_GREATER
 : IAdditionOperators<<#= TypeName #>, <#= TypeName #>, <#= TypeName #>>,
   ISubtractionOperators<<#= TypeName #>, <#= TypeName #>, <#= TypeName #>>,
   IMultiplyOperators<<#= TypeName #>, <#= TypeName #>, <#= TypeName #>>,
   IDivisionOperators<<#= TypeName #>, <#= TypeName #>, <#= TypeName #>>,
   IIncrementOperators<<#= TypeName #>>,
   IDecrementOperators<<#= TypeName #>>
#endif
{
<# if (JsonTypeName == "number" || JsonTypeName == "decimal")
    {#>
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeName #>(decimal value)
    {
        this.jsonElementBacking = default;
        this.backing = Backing.Number;
        this.numberBacking = new(value);
    }

<#  }
    
    if (JsonTypeName == "number" || JsonTypeName == "double")
    {#>
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeName #>(double value)
    {
        this.jsonElementBacking = default;
        this.backing = Backing.Number;
        this.numberBacking = new(value);
    }

<#  }
    
    if (JsonTypeName == "number" || JsonTypeName == "half")
    {#>
#if NET8_0_OR_GREATER
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeName #>(Half value)
    {
        this.jsonElementBacking = default;
        this.backing = Backing.Number;
        this.numberBacking = new(value);
    }
 #endif

<#  }

    if (JsonTypeName == "number" || JsonTypeName == "single")
    {#>
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeName #>(float value)
    {
        this.jsonElementBacking = default;
        this.backing = Backing.Number;
        this.numberBacking = new(value);
    }

<#  }
    
    if (JsonTypeName == "integer" || JsonTypeName == "int16")
    {#>
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeName #>(short value)
    {
        this.jsonElementBacking = default;
        this.backing = Backing.Number;
        this.numberBacking = new(value);
    }

<#  }
    
    if (JsonTypeName == "integer" || JsonTypeName == "int32")
    {#>
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeName #>(int value)
    {
        this.jsonElementBacking = default;
        this.backing = Backing.Number;
        this.numberBacking = new(value);
    }

<#  }
    
    if (JsonTypeName == "integer" || JsonTypeName == "int64")
    {#>
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeName #>(long value)
    {
        this.jsonElementBacking = default;
        this.backing = Backing.Number;
        this.numberBacking = new(value);
    }

<#  }
    
    if (JsonTypeName == "integer" || JsonTypeName == "int128")
    {#>
#if NET8_0_OR_GREATER
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeName #>(Int128 value)
    {
        this.jsonElementBacking = default;
        this.backing = Backing.Number;
        this.numberBacking = new(value);
    }
#endif

<#  }
    
    if (JsonTypeName == "integer" || JsonTypeName == "byte")
    {#>
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeName #>(byte value)
    {
        this.jsonElementBacking = default;
        this.backing = Backing.Number;
        this.numberBacking = new(value);
    }

<#  }
    
    if (JsonTypeName == "integer" || JsonTypeName == "sbyte")
    {#>
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeName #>(sbyte value)
    {
        this.jsonElementBacking = default;
        this.backing = Backing.Number;
        this.numberBacking = new(value);
    }

<#  }
    
    if (JsonTypeName == "integer" || JsonTypeName == "uint16")
    {#>
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeName #>(ushort value)
    {
        this.jsonElementBacking = default;
        this.backing = Backing.Number;
        this.numberBacking = new(value);
    }

<#  }
    
    if (JsonTypeName == "integer" || JsonTypeName == "uint32")
    {#>
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeName #>(uint value)
    {
        this.jsonElementBacking = default;
        this.backing = Backing.Number;
        this.numberBacking = new(value);
    }

<#  }
    
    if (JsonTypeName == "integer" || JsonTypeName == "uint64")
    {#>
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeName #>(ulong value)
    {
        this.jsonElementBacking = default;
        this.backing = Backing.Number;
        this.numberBacking = new(value);
    }

<#  }
    
    if (JsonTypeName == "integer" || JsonTypeName == "uint128")
    {#>
#if NET8_0_OR_GREATER
    /// <summary>
    /// Initializes a new instance of the <see cref="<#= TypeName #>"/> struct.
    /// </summary>
    /// <param name="value">The value from which to initialize the number.</param>
    public <#= TypeName #>(UInt128 value)
    {
        this.jsonElementBacking = default;
        this.backing = Backing.Number;
        this.numberBacking = new(value);
    }
#endif

<#  }#>
    /// <summary>
    /// Conversion from JsonNumber.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator <#= TypeName #>(JsonNumber value)
    {
        if (value.HasDotnetBacking && value.ValueKind == JsonValueKind.Number)
        {
            return new(value.AsBinaryJsonNumber);
        }

        return new(value.AsJsonElement);
    }

    /// <summary>
    /// Conversion to JsonNumber.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator JsonNumber(<#= TypeName #> value)
    {
        return value.AsNumber;
    }

    /// <summary>
    /// Conversion to JsonAny.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator JsonAny(<#= TypeName #> value)
    {
        return value.AsAny;
    }

    /// <summary>
    /// Conversion from JsonAny.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator <#= TypeName #>(JsonAny value)
    {
        return value.As<<#= TypeName #>>();
    }

    /// <summary>
    /// Conversion to byte.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as a byte.</exception>
    public static <#= ConversionOperatorToByte ?? "explicit" #> operator byte(<#= TypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetByte();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<byte>();
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Conversion to decimal.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as a decimal.</exception>
    public static <#= ConversionOperatorToDecimal ?? "explicit" #> operator decimal(<#= TypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetDecimal();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<decimal>();
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Conversion to double.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as a double.</exception>
    public static <#= ConversionOperatorToDouble ?? "explicit" #> operator double(<#= TypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetDouble();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<double>();
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Conversion to Int16.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as an Int16.</exception>
    public static <#= ConversionOperatorToInt16 ?? "explicit" #> operator short(<#= TypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetInt16();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<short>();
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Conversion to Int32.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as an Int32.</exception>
    public static <#= ConversionOperatorToInt32 ?? "explicit" #> operator int(<#= TypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetInt32();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<int>();
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Conversion to Int64.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as an Int64.</exception>
    public static <#= ConversionOperatorToInt64 ?? "explicit" #> operator long(<#= TypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetInt64();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<long>();
        }

        throw new InvalidOperationException();
    }

#if NET8_0_OR_GREATER
    /// <summary>
    /// Conversion to Int128.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as an Int64.</exception>
    public static <#= ConversionOperatorToInt128 ?? "explicit" #> operator Int128(<#= TypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetInt128();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<Int128>();
        }

        throw new InvalidOperationException();
    }
#endif

    /// <summary>
    /// Conversion to SByte.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as an SByte.</exception>
    public static <#= ConversionOperatorToSByte ?? "explicit" #> operator sbyte(<#= TypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetSByte();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<sbyte>();
        }

        throw new InvalidOperationException();
    }

#if NET8_0_OR_GREATER
    /// <summary>
    /// Conversion to Half.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as a Single.</exception>
    public static <#= ConversionOperatorToHalf ?? "explicit" #> operator Half(<#= TypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetHalf();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<Half>();
        }

        throw new InvalidOperationException();
    }
#endif

    /// <summary>
    /// Conversion to Single.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as a Single.</exception>
    public static <#= ConversionOperatorToSingle ?? "explicit" #> operator float(<#= TypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetSingle();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<float>();
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Conversion to UInt16.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as an UInt16.</exception>
    public static <#= ConversionOperatorToUInt16 ?? "explicit" #> operator ushort(<#= TypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetUInt16();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<ushort>();
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Conversion to UInt32.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as an UInt32.</exception>
    public static <#= ConversionOperatorToUInt32 ?? "explicit" #> operator uint(<#= TypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetUInt32();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<uint>();
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Conversion to UInt64.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as an UInt64.</exception>
    public static <#= ConversionOperatorToUInt64 ?? "explicit" #> operator ulong(<#= TypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetUInt64();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<ulong>();
        }

        throw new InvalidOperationException();
    }

#if NET8_0_OR_GREATER
    /// <summary>
    /// Conversion to UInt64.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    /// <exception cref="InvalidOperationException">The value was not a number.</exception>
    /// <exception cref="FormatException">The value was not formatted as an UInt64.</exception>
    public static <#= ConversionOperatorToUInt128 ?? "explicit" #> operator UInt128(<#= TypeName #> value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return value.jsonElementBacking.SafeGetUInt128();
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return value.numberBacking.CreateChecked<UInt128>();
        }

        throw new InvalidOperationException();
    }
#endif

<#  if (JsonTypeName == "number" || JsonTypeName == "integer" || JsonTypeName == "decimal")
    {#>
    /// <summary>
    /// Conversion from decimal.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToDecimal ?? (JsonTypeName == "number" ? "implicit" : "explicit") #> operator <#= TypeName #>(decimal value)
    {
        return new(new BinaryJsonNumber(value));
    }

<#  }

    if (JsonTypeName == "number" || JsonTypeName == "integer" || JsonTypeName == "double")
    {#>
    /// <summary>
    /// Conversion from double.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToDouble ?? (JsonTypeName == "number" ? "implicit" : "explicit") #> operator <#= TypeName #>(double value)
    {
        return new(new BinaryJsonNumber(value));
    }

<#  }

    if (JsonTypeName == "number" || JsonTypeName == "integer" || JsonTypeName == "single")
    {#>
    /// <summary>
    /// Conversion from single.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToSingle ?? "explicit" #> operator <#= TypeName #>(float value)
    {
        return new(new BinaryJsonNumber(value));
    }

<#  }

    if (JsonTypeName == "number" || JsonTypeName == "integer" || JsonTypeName == "half")
    {#>
#if NET8_0_OR_GREATER
    /// <summary>
    /// Conversion from Half.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToHalf ?? (JsonTypeName == "number" ? "implicit" : "explicit") #> operator <#= TypeName #>(Half value)
    {
        return new(new BinaryJsonNumber(value));
    }

#endif

<#  }

    if (JsonTypeName == "number" || JsonTypeName == "integer" || JsonTypeName == "byte")
    {#>
    /// <summary>
    /// Conversion from byte.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToByte ?? "explicit" #> operator <#= TypeName #>(byte value)
    {
        return new(new BinaryJsonNumber(value));
    }

<#  }

    if (JsonTypeName == "number" || JsonTypeName == "integer" || JsonTypeName == "sbyte")
    {#>
    /// <summary>
    /// Conversion from sbyte.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToSByte ?? "explicit" #> operator <#= TypeName #>(sbyte value)
    {
        return new(new BinaryJsonNumber(value));
    }

<#  }

    if (JsonTypeName == "number" || JsonTypeName == "integer" || JsonTypeName == "int16")
    {#>
    /// <summary>
    /// Conversion from int16.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToInt16 ?? "explicit" #> operator <#= TypeName #>(short value)
    {
        return new(new BinaryJsonNumber(value));
    }

<#  }

    if (JsonTypeName == "number" || JsonTypeName == "integer" || JsonTypeName == "uint16")
    {#>
    /// <summary>
    /// Conversion from uint16.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToUInt16 ?? "explicit" #> operator <#= TypeName #>(ushort value)
    {
        return new(new BinaryJsonNumber(value));
    }

<#  }

    if (JsonTypeName == "number" || JsonTypeName == "integer" || JsonTypeName == "int32")
    {#>
    /// <summary>
    /// Conversion from int32.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToInt32 ?? "explicit" #> operator <#= TypeName #>(int value)
    {
        return new(new BinaryJsonNumber(value));
    }

<#  }

    if (JsonTypeName == "number" || JsonTypeName == "integer" || JsonTypeName == "uint32")
    {#>
    /// <summary>
    /// Conversion from uint32.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToUInt32 ?? "explicit" #> operator <#= TypeName #>(uint value)
    {
        return new(new BinaryJsonNumber(value));
    }

<#  }

    if (JsonTypeName == "number" || JsonTypeName == "integer" || JsonTypeName == "int64")
    {#>
    /// <summary>
    /// Conversion from int64.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToInt64 ?? "implicit" #> operator <#= TypeName #>(long value)
    {
        return new(new BinaryJsonNumber(value));
    }

<#  }

    if (JsonTypeName == "number" || JsonTypeName == "integer" || JsonTypeName == "uint64")
    {#>
    /// <summary>
    /// Conversion from ulong.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToUInt64 ?? "explicit" #> operator <#= TypeName #>(ulong value)
    {
        return new(new BinaryJsonNumber(value));
    }

<#  }

    if (JsonTypeName == "number" || JsonTypeName == "integer" || JsonTypeName == "int128")
    {#>
#if NET8_0_OR_GREATER
    /// <summary>
    /// Conversion from int128.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToInt128 ?? "explicit" #> operator <#= TypeName #>(Int128 value)
    {
        return new(new BinaryJsonNumber(value));
    }
#endif

<#  }

    if (JsonTypeName == "number" || JsonTypeName == "integer" || JsonTypeName == "uint128")
    {#>
#if NET8_0_OR_GREATER
    /// <summary>
    /// Conversion from uint128.
    /// </summary>
    /// <param name="value">The value to convert.</param>
    public static <#= ConversionOperatorToUInt128 ?? "explicit" #> operator <#= TypeName #>(UInt128 value)
    {
        return new(new BinaryJsonNumber(value));
    }
#endif

<#  }#>
    /// <summary>
    /// Adds two values together to compute their sum.
    /// </summary>
    /// <param name="left">The left hand side.</param>
    /// <param name="right">The right hand side.</param>
    /// <returns>The resulting value.</returns>
    public static <#= TypeName #> operator +(<#= TypeName #> left, <#= TypeName #> right)
    {
        return new(left.AsBinaryJsonNumber + right.AsBinaryJsonNumber);
    }

    /// <summary>
    /// Subtracts two values together to compute their difference.
    /// </summary>
    /// <param name="left">The left hand side.</param>
    /// <param name="right">The right hand side.</param>
    /// <returns>The resulting value.</returns>
    public static <#= TypeName #> operator -(<#= TypeName #> left, <#= TypeName #> right)
    {
        return new(left.AsBinaryJsonNumber - right.AsBinaryJsonNumber);
    }

    /// <summary>
    /// Multiplies two values together.
    /// </summary>
    /// <param name="left">The left hand side.</param>
    /// <param name="right">The right hand side.</param>
    /// <returns>The resulting value.</returns>
    public static <#= TypeName #> operator *(<#= TypeName #> left, <#= TypeName #> right)
    {
        return new(left.AsBinaryJsonNumber * right.AsBinaryJsonNumber);
    }

    /// <summary>
    /// Divides two values.
    /// </summary>
    /// <param name="left">The left hand side.</param>
    /// <param name="right">The right hand side.</param>
    /// <returns>The resulting value.</returns>
    public static <#= TypeName #> operator /(<#= TypeName #> left, <#= TypeName #> right)
    {
        return new(left.AsBinaryJsonNumber / right.AsBinaryJsonNumber);
    }

    /// <summary>
    /// Increments the value.
    /// </summary>
    /// <param name="value">The value.</param>
    /// <returns>The resulting value.</returns>
    public static <#= TypeName #> operator ++(<#= TypeName #> value)
    {
        BinaryJsonNumber num = value.AsBinaryJsonNumber;
        return new(num++);
    }

    /// <summary>
    /// Decrements the value.
    /// </summary>
    /// <param name="value">The value.</param>
    /// <returns>The resulting value.</returns>
    public static <#= TypeName #> operator --(<#= TypeName #> value)
    {
        BinaryJsonNumber num = value.AsBinaryJsonNumber;
        return new(num--);
    }
}