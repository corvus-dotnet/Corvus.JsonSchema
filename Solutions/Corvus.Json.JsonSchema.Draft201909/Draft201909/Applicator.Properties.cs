//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.Draft201909;
/// <summary>
/// Applicator vocabulary meta-schema
/// </summary>
public readonly partial struct Applicator
{
    /// <summary>
    /// The well-known property names in the JSON object.
    /// </summary>
    public static class JsonPropertyNames
    {
        /// <summary>
        /// JSON property name for <see cref = "AdditionalItems"/>.
        /// </summary>
        public static ReadOnlySpan<byte> AdditionalItemsUtf8 => "additionalItems"u8;

        /// <summary>
        /// JSON property name for <see cref = "AdditionalItems"/>.
        /// </summary>
        public const string AdditionalItems = "additionalItems";
        /// <summary>
        /// JSON property name for <see cref = "AdditionalProperties"/>.
        /// </summary>
        public static ReadOnlySpan<byte> AdditionalPropertiesUtf8 => "additionalProperties"u8;

        /// <summary>
        /// JSON property name for <see cref = "AdditionalProperties"/>.
        /// </summary>
        public const string AdditionalProperties = "additionalProperties";
        /// <summary>
        /// JSON property name for <see cref = "AllOf"/>.
        /// </summary>
        public static ReadOnlySpan<byte> AllOfUtf8 => "allOf"u8;

        /// <summary>
        /// JSON property name for <see cref = "AllOf"/>.
        /// </summary>
        public const string AllOf = "allOf";
        /// <summary>
        /// JSON property name for <see cref = "AnyOf"/>.
        /// </summary>
        public static ReadOnlySpan<byte> AnyOfUtf8 => "anyOf"u8;

        /// <summary>
        /// JSON property name for <see cref = "AnyOf"/>.
        /// </summary>
        public const string AnyOf = "anyOf";
        /// <summary>
        /// JSON property name for <see cref = "Contains"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ContainsUtf8 => "contains"u8;

        /// <summary>
        /// JSON property name for <see cref = "Contains"/>.
        /// </summary>
        public const string Contains = "contains";
        /// <summary>
        /// JSON property name for <see cref = "DependentSchemas"/>.
        /// </summary>
        public static ReadOnlySpan<byte> DependentSchemasUtf8 => "dependentSchemas"u8;

        /// <summary>
        /// JSON property name for <see cref = "DependentSchemas"/>.
        /// </summary>
        public const string DependentSchemas = "dependentSchemas";
        /// <summary>
        /// JSON property name for <see cref = "Else"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ElseUtf8 => "else"u8;

        /// <summary>
        /// JSON property name for <see cref = "Else"/>.
        /// </summary>
        public const string Else = "else";
        /// <summary>
        /// JSON property name for <see cref = "If"/>.
        /// </summary>
        public static ReadOnlySpan<byte> IfUtf8 => "if"u8;

        /// <summary>
        /// JSON property name for <see cref = "If"/>.
        /// </summary>
        public const string If = "if";
        /// <summary>
        /// JSON property name for <see cref = "Items"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ItemsUtf8 => "items"u8;

        /// <summary>
        /// JSON property name for <see cref = "Items"/>.
        /// </summary>
        public const string Items = "items";
        /// <summary>
        /// JSON property name for <see cref = "Not"/>.
        /// </summary>
        public static ReadOnlySpan<byte> NotUtf8 => "not"u8;

        /// <summary>
        /// JSON property name for <see cref = "Not"/>.
        /// </summary>
        public const string Not = "not";
        /// <summary>
        /// JSON property name for <see cref = "OneOf"/>.
        /// </summary>
        public static ReadOnlySpan<byte> OneOfUtf8 => "oneOf"u8;

        /// <summary>
        /// JSON property name for <see cref = "OneOf"/>.
        /// </summary>
        public const string OneOf = "oneOf";
        /// <summary>
        /// JSON property name for <see cref = "PatternProperties"/>.
        /// </summary>
        public static ReadOnlySpan<byte> PatternPropertiesUtf8 => "patternProperties"u8;

        /// <summary>
        /// JSON property name for <see cref = "PatternProperties"/>.
        /// </summary>
        public const string PatternProperties = "patternProperties";
        /// <summary>
        /// JSON property name for <see cref = "Properties"/>.
        /// </summary>
        public static ReadOnlySpan<byte> PropertiesUtf8 => "properties"u8;

        /// <summary>
        /// JSON property name for <see cref = "Properties"/>.
        /// </summary>
        public const string Properties = "properties";
        /// <summary>
        /// JSON property name for <see cref = "PropertyNames"/>.
        /// </summary>
        public static ReadOnlySpan<byte> PropertyNamesUtf8 => "propertyNames"u8;

        /// <summary>
        /// JSON property name for <see cref = "PropertyNames"/>.
        /// </summary>
        public const string PropertyNames = "propertyNames";
        /// <summary>
        /// JSON property name for <see cref = "Then"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ThenUtf8 => "then"u8;

        /// <summary>
        /// JSON property name for <see cref = "Then"/>.
        /// </summary>
        public const string Then = "then";
        /// <summary>
        /// JSON property name for <see cref = "UnevaluatedItems"/>.
        /// </summary>
        public static ReadOnlySpan<byte> UnevaluatedItemsUtf8 => "unevaluatedItems"u8;

        /// <summary>
        /// JSON property name for <see cref = "UnevaluatedItems"/>.
        /// </summary>
        public const string UnevaluatedItems = "unevaluatedItems";
        /// <summary>
        /// JSON property name for <see cref = "UnevaluatedProperties"/>.
        /// </summary>
        public static ReadOnlySpan<byte> UnevaluatedPropertiesUtf8 => "unevaluatedProperties"u8;

        /// <summary>
        /// JSON property name for <see cref = "UnevaluatedProperties"/>.
        /// </summary>
        public const string UnevaluatedProperties = "unevaluatedProperties";
    }

    /// <summary>
    /// Gets the (optional) <c>additionalItems</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Schema AdditionalItems
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.AdditionalItemsUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.AdditionalItems, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>additionalProperties</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Schema AdditionalProperties
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.AdditionalPropertiesUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.AdditionalProperties, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>allOf</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray AllOf
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.AllOfUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.AllOf, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>anyOf</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray AnyOf
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.AnyOfUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.AnyOf, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>contains</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Schema Contains
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ContainsUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Contains, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>dependentSchemas</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Applicator.DependentSchemasEntity DependentSchemas
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DependentSchemasUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Applicator.DependentSchemasEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.DependentSchemas, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Applicator.DependentSchemasEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>else</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Schema Else
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ElseUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Else, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>if</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Schema If
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.IfUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.If, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>items</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Applicator.ItemsEntity Items
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ItemsUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Applicator.ItemsEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Items, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Applicator.ItemsEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>not</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Schema Not
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.NotUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Not, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>oneOf</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray OneOf
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.OneOfUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.OneOf, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>patternProperties</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Applicator.PatternPropertiesEntity PatternProperties
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.PatternPropertiesUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Applicator.PatternPropertiesEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.PatternProperties, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Applicator.PatternPropertiesEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>properties</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Applicator.PropertiesEntity Properties
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.PropertiesUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Applicator.PropertiesEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Properties, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Applicator.PropertiesEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>propertyNames</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Schema PropertyNames
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.PropertyNamesUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.PropertyNames, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>then</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Schema Then
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ThenUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Then, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>unevaluatedItems</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Schema UnevaluatedItems
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.UnevaluatedItemsUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.UnevaluatedItems, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>unevaluatedProperties</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Schema UnevaluatedProperties
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.UnevaluatedPropertiesUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.UnevaluatedProperties, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "Applicator"/>.
    /// </summary>
    public static Applicator Create(Corvus.Json.JsonSchema.Draft201909.Schema? additionalItems = null, Corvus.Json.JsonSchema.Draft201909.Schema? additionalProperties = null, Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray? allOf = null, Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray? anyOf = null, Corvus.Json.JsonSchema.Draft201909.Schema? contains = null, Corvus.Json.JsonSchema.Draft201909.Applicator.DependentSchemasEntity? dependentSchemas = null, Corvus.Json.JsonSchema.Draft201909.Schema? @else = null, Corvus.Json.JsonSchema.Draft201909.Schema? @if = null, Corvus.Json.JsonSchema.Draft201909.Applicator.ItemsEntity? items = null, Corvus.Json.JsonSchema.Draft201909.Schema? not = null, Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray? oneOf = null, Corvus.Json.JsonSchema.Draft201909.Applicator.PatternPropertiesEntity? patternProperties = null, Corvus.Json.JsonSchema.Draft201909.Applicator.PropertiesEntity? properties = null, Corvus.Json.JsonSchema.Draft201909.Schema? propertyNames = null, Corvus.Json.JsonSchema.Draft201909.Schema? then = null, Corvus.Json.JsonSchema.Draft201909.Schema? unevaluatedItems = null, Corvus.Json.JsonSchema.Draft201909.Schema? unevaluatedProperties = null)
    {
        var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
        if (additionalItems is Corvus.Json.JsonSchema.Draft201909.Schema additionalItems__)
        {
            builder.Add(JsonPropertyNames.AdditionalItems, additionalItems__.AsAny);
        }

        if (additionalProperties is Corvus.Json.JsonSchema.Draft201909.Schema additionalProperties__)
        {
            builder.Add(JsonPropertyNames.AdditionalProperties, additionalProperties__.AsAny);
        }

        if (allOf is Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray allOf__)
        {
            builder.Add(JsonPropertyNames.AllOf, allOf__.AsAny);
        }

        if (anyOf is Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray anyOf__)
        {
            builder.Add(JsonPropertyNames.AnyOf, anyOf__.AsAny);
        }

        if (contains is Corvus.Json.JsonSchema.Draft201909.Schema contains__)
        {
            builder.Add(JsonPropertyNames.Contains, contains__.AsAny);
        }

        if (dependentSchemas is Corvus.Json.JsonSchema.Draft201909.Applicator.DependentSchemasEntity dependentSchemas__)
        {
            builder.Add(JsonPropertyNames.DependentSchemas, dependentSchemas__.AsAny);
        }

        if (@else is Corvus.Json.JsonSchema.Draft201909.Schema @else__)
        {
            builder.Add(JsonPropertyNames.Else, @else__.AsAny);
        }

        if (@if is Corvus.Json.JsonSchema.Draft201909.Schema @if__)
        {
            builder.Add(JsonPropertyNames.If, @if__.AsAny);
        }

        if (items is Corvus.Json.JsonSchema.Draft201909.Applicator.ItemsEntity items__)
        {
            builder.Add(JsonPropertyNames.Items, items__.AsAny);
        }

        if (not is Corvus.Json.JsonSchema.Draft201909.Schema not__)
        {
            builder.Add(JsonPropertyNames.Not, not__.AsAny);
        }

        if (oneOf is Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray oneOf__)
        {
            builder.Add(JsonPropertyNames.OneOf, oneOf__.AsAny);
        }

        if (patternProperties is Corvus.Json.JsonSchema.Draft201909.Applicator.PatternPropertiesEntity patternProperties__)
        {
            builder.Add(JsonPropertyNames.PatternProperties, patternProperties__.AsAny);
        }

        if (properties is Corvus.Json.JsonSchema.Draft201909.Applicator.PropertiesEntity properties__)
        {
            builder.Add(JsonPropertyNames.Properties, properties__.AsAny);
        }

        if (propertyNames is Corvus.Json.JsonSchema.Draft201909.Schema propertyNames__)
        {
            builder.Add(JsonPropertyNames.PropertyNames, propertyNames__.AsAny);
        }

        if (then is Corvus.Json.JsonSchema.Draft201909.Schema then__)
        {
            builder.Add(JsonPropertyNames.Then, then__.AsAny);
        }

        if (unevaluatedItems is Corvus.Json.JsonSchema.Draft201909.Schema unevaluatedItems__)
        {
            builder.Add(JsonPropertyNames.UnevaluatedItems, unevaluatedItems__.AsAny);
        }

        if (unevaluatedProperties is Corvus.Json.JsonSchema.Draft201909.Schema unevaluatedProperties__)
        {
            builder.Add(JsonPropertyNames.UnevaluatedProperties, unevaluatedProperties__.AsAny);
        }

        return new(builder.ToImmutable());
    }

    /// <summary>
    /// Sets additionalItems.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithAdditionalItems(in Corvus.Json.JsonSchema.Draft201909.Schema value)
    {
        return this.SetProperty(JsonPropertyNames.AdditionalItems, value);
    }

    /// <summary>
    /// Sets additionalProperties.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithAdditionalProperties(in Corvus.Json.JsonSchema.Draft201909.Schema value)
    {
        return this.SetProperty(JsonPropertyNames.AdditionalProperties, value);
    }

    /// <summary>
    /// Sets allOf.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithAllOf(in Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray value)
    {
        return this.SetProperty(JsonPropertyNames.AllOf, value);
    }

    /// <summary>
    /// Sets anyOf.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithAnyOf(in Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray value)
    {
        return this.SetProperty(JsonPropertyNames.AnyOf, value);
    }

    /// <summary>
    /// Sets contains.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithContains(in Corvus.Json.JsonSchema.Draft201909.Schema value)
    {
        return this.SetProperty(JsonPropertyNames.Contains, value);
    }

    /// <summary>
    /// Sets dependentSchemas.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithDependentSchemas(in Corvus.Json.JsonSchema.Draft201909.Applicator.DependentSchemasEntity value)
    {
        return this.SetProperty(JsonPropertyNames.DependentSchemas, value);
    }

    /// <summary>
    /// Sets else.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithElse(in Corvus.Json.JsonSchema.Draft201909.Schema value)
    {
        return this.SetProperty(JsonPropertyNames.Else, value);
    }

    /// <summary>
    /// Sets if.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithIf(in Corvus.Json.JsonSchema.Draft201909.Schema value)
    {
        return this.SetProperty(JsonPropertyNames.If, value);
    }

    /// <summary>
    /// Sets items.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithItems(in Corvus.Json.JsonSchema.Draft201909.Applicator.ItemsEntity value)
    {
        return this.SetProperty(JsonPropertyNames.Items, value);
    }

    /// <summary>
    /// Sets not.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithNot(in Corvus.Json.JsonSchema.Draft201909.Schema value)
    {
        return this.SetProperty(JsonPropertyNames.Not, value);
    }

    /// <summary>
    /// Sets oneOf.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithOneOf(in Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray value)
    {
        return this.SetProperty(JsonPropertyNames.OneOf, value);
    }

    /// <summary>
    /// Sets patternProperties.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithPatternProperties(in Corvus.Json.JsonSchema.Draft201909.Applicator.PatternPropertiesEntity value)
    {
        return this.SetProperty(JsonPropertyNames.PatternProperties, value);
    }

    /// <summary>
    /// Sets properties.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithProperties(in Corvus.Json.JsonSchema.Draft201909.Applicator.PropertiesEntity value)
    {
        return this.SetProperty(JsonPropertyNames.Properties, value);
    }

    /// <summary>
    /// Sets propertyNames.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithPropertyNames(in Corvus.Json.JsonSchema.Draft201909.Schema value)
    {
        return this.SetProperty(JsonPropertyNames.PropertyNames, value);
    }

    /// <summary>
    /// Sets then.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithThen(in Corvus.Json.JsonSchema.Draft201909.Schema value)
    {
        return this.SetProperty(JsonPropertyNames.Then, value);
    }

    /// <summary>
    /// Sets unevaluatedItems.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithUnevaluatedItems(in Corvus.Json.JsonSchema.Draft201909.Schema value)
    {
        return this.SetProperty(JsonPropertyNames.UnevaluatedItems, value);
    }

    /// <summary>
    /// Sets unevaluatedProperties.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithUnevaluatedProperties(in Corvus.Json.JsonSchema.Draft201909.Schema value)
    {
        return this.SetProperty(JsonPropertyNames.UnevaluatedProperties, value);
    }

    private static ValidationContext __CorvusValidateAdditionalItems(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Schema>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateUnevaluatedItems(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Schema>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateItems(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Applicator.ItemsEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateContains(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Schema>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateAdditionalProperties(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Schema>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateUnevaluatedProperties(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Schema>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateProperties(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Applicator.PropertiesEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePatternProperties(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Applicator.PatternPropertiesEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateDependentSchemas(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Applicator.DependentSchemasEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePropertyNames(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Schema>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateIf(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Schema>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateThen(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Schema>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateElse(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Schema>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateAllOf(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateAnyOf(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateOneOf(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateNot(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Schema>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(JsonPropertyNames.AdditionalItemsUtf8))
            {
                propertyValidator = __CorvusValidateAdditionalItems;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.UnevaluatedItemsUtf8))
            {
                propertyValidator = __CorvusValidateUnevaluatedItems;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.ItemsUtf8))
            {
                propertyValidator = __CorvusValidateItems;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.ContainsUtf8))
            {
                propertyValidator = __CorvusValidateContains;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.AdditionalPropertiesUtf8))
            {
                propertyValidator = __CorvusValidateAdditionalProperties;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.UnevaluatedPropertiesUtf8))
            {
                propertyValidator = __CorvusValidateUnevaluatedProperties;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.PropertiesUtf8))
            {
                propertyValidator = __CorvusValidateProperties;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.PatternPropertiesUtf8))
            {
                propertyValidator = __CorvusValidatePatternProperties;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.DependentSchemasUtf8))
            {
                propertyValidator = __CorvusValidateDependentSchemas;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.PropertyNamesUtf8))
            {
                propertyValidator = __CorvusValidatePropertyNames;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.IfUtf8))
            {
                propertyValidator = __CorvusValidateIf;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.ThenUtf8))
            {
                propertyValidator = __CorvusValidateThen;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.ElseUtf8))
            {
                propertyValidator = __CorvusValidateElse;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.AllOfUtf8))
            {
                propertyValidator = __CorvusValidateAllOf;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.AnyOfUtf8))
            {
                propertyValidator = __CorvusValidateAnyOf;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.OneOfUtf8))
            {
                propertyValidator = __CorvusValidateOneOf;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.NotUtf8))
            {
                propertyValidator = __CorvusValidateNot;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(JsonPropertyNames.AdditionalItems))
            {
                propertyValidator = __CorvusValidateAdditionalItems;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.UnevaluatedItems))
            {
                propertyValidator = __CorvusValidateUnevaluatedItems;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.Items))
            {
                propertyValidator = __CorvusValidateItems;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.Contains))
            {
                propertyValidator = __CorvusValidateContains;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.AdditionalProperties))
            {
                propertyValidator = __CorvusValidateAdditionalProperties;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.UnevaluatedProperties))
            {
                propertyValidator = __CorvusValidateUnevaluatedProperties;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.Properties))
            {
                propertyValidator = __CorvusValidateProperties;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.PatternProperties))
            {
                propertyValidator = __CorvusValidatePatternProperties;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.DependentSchemas))
            {
                propertyValidator = __CorvusValidateDependentSchemas;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.PropertyNames))
            {
                propertyValidator = __CorvusValidatePropertyNames;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.If))
            {
                propertyValidator = __CorvusValidateIf;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.Then))
            {
                propertyValidator = __CorvusValidateThen;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.Else))
            {
                propertyValidator = __CorvusValidateElse;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.AllOf))
            {
                propertyValidator = __CorvusValidateAllOf;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.AnyOf))
            {
                propertyValidator = __CorvusValidateAnyOf;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.OneOf))
            {
                propertyValidator = __CorvusValidateOneOf;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.Not))
            {
                propertyValidator = __CorvusValidateNot;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}