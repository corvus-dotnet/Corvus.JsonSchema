//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.Draft201909;
/// <summary>
/// Core and Validation specifications meta-schema
/// </summary>
public readonly partial struct Schema
{
    /// <summary>
    /// Conversion to <see cref = "Corvus.Json.JsonSchema.Draft201909.Core"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Corvus.Json.JsonSchema.Draft201909.Core(Schema value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Object) != 0)
        {
            return new(value.objectBacking);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.boolBacking);
        }

        return Corvus.Json.JsonSchema.Draft201909.Core.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Corvus.Json.JsonSchema.Draft201909.Core"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Schema(Corvus.Json.JsonSchema.Draft201909.Core value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Object => new(value.AsPropertyBacking()),
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Corvus.Json.JsonSchema.Draft201909.Applicator"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Corvus.Json.JsonSchema.Draft201909.Applicator(Schema value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Object) != 0)
        {
            return new(value.objectBacking);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.boolBacking);
        }

        return Corvus.Json.JsonSchema.Draft201909.Applicator.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Corvus.Json.JsonSchema.Draft201909.Applicator"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Schema(Corvus.Json.JsonSchema.Draft201909.Applicator value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Object => new(value.AsPropertyBacking()),
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Corvus.Json.JsonSchema.Draft201909.Validation"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Corvus.Json.JsonSchema.Draft201909.Validation(Schema value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Object) != 0)
        {
            return new(value.objectBacking);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.boolBacking);
        }

        return Corvus.Json.JsonSchema.Draft201909.Validation.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Corvus.Json.JsonSchema.Draft201909.Validation"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Schema(Corvus.Json.JsonSchema.Draft201909.Validation value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Object => new(value.AsPropertyBacking()),
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Corvus.Json.JsonSchema.Draft201909.MetaData"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Corvus.Json.JsonSchema.Draft201909.MetaData(Schema value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Object) != 0)
        {
            return new(value.objectBacking);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.boolBacking);
        }

        return Corvus.Json.JsonSchema.Draft201909.MetaData.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Corvus.Json.JsonSchema.Draft201909.MetaData"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Schema(Corvus.Json.JsonSchema.Draft201909.MetaData value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Object => new(value.AsPropertyBacking()),
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Corvus.Json.JsonSchema.Draft201909.Format"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Corvus.Json.JsonSchema.Draft201909.Format(Schema value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Object) != 0)
        {
            return new(value.objectBacking);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.boolBacking);
        }

        return Corvus.Json.JsonSchema.Draft201909.Format.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Corvus.Json.JsonSchema.Draft201909.Format"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Schema(Corvus.Json.JsonSchema.Draft201909.Format value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Object => new(value.AsPropertyBacking()),
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Corvus.Json.JsonSchema.Draft201909.Content"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Corvus.Json.JsonSchema.Draft201909.Content(Schema value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Object) != 0)
        {
            return new(value.objectBacking);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.boolBacking);
        }

        return Corvus.Json.JsonSchema.Draft201909.Content.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Corvus.Json.JsonSchema.Draft201909.Content"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Schema(Corvus.Json.JsonSchema.Draft201909.Content value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Object => new(value.AsPropertyBacking()),
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            _ => Undefined
        };
    }
}