//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace Corvus.Json.JsonSchema.Draft201909;

/// <summary>
/// Core and Validation specifications meta-schema
/// </summary>
public readonly partial struct Schema
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct DependenciesEntity
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        public readonly partial struct AdditionalPropertiesEntity
        {
            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext;
                if (level > ValidationLevel.Flag)
                {
                    result = result.UsingResults();
                }

                if (level > ValidationLevel.Basic)
                {
                    result = result.UsingStack();
                    result = result.PushSchemaLocation("https://json-schema.org/draft/2019-09/schema#/properties/dependencies/additionalProperties");
                }

                result = CorvusValidation.CompositionAnyOfValidationHandler(this, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                if (level > ValidationLevel.Basic)
                {
                    result = result.PopLocation();
                }

                return result;
            }

            private static partial class CorvusValidation
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                public static ValidationContext CompositionAnyOfValidationHandler(
                    in AdditionalPropertiesEntity value,
                    in ValidationContext validationContext,
                    ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext;
                    result = ValidateAnyOf(value, result, level);
                    if (!result.IsValid && level == ValidationLevel.Flag)
                    {
                        return result;
                    }

                    static ValidationContext ValidateAnyOf(in AdditionalPropertiesEntity value, in ValidationContext validationContext, ValidationLevel level)
                    {
                        ValidationContext result = validationContext;
                        bool anyOfFoundValid = false;
                        ValidationContext anyOfChildContext0 = validationContext.CreateChildContext();
                        if (level > ValidationLevel.Basic)
                        {
                            anyOfChildContext0 = anyOfChildContext0.PushValidationLocationReducedPathModifier(new("#/anyOf/0/$recursiveRef"));
                        }

                        ValidationContext anyOfResult0 = value.As<Corvus.Json.JsonSchema.Draft201909.Schema>().Validate(anyOfChildContext0, level);
                        if (anyOfResult0.IsValid)
                        {
                            result = result.MergeChildContext(anyOfResult0, level >= ValidationLevel.Verbose);
                            if (level == ValidationLevel.Flag)
                            {
                                return result;
                            }
                            else
                            {
                                anyOfFoundValid = true;
                            }
                        }
                        else
                        {
                            if (level >= ValidationLevel.Verbose)
                            {
                                result = result.MergeResults(result.IsValid, level, anyOfResult0);
                            }
                        }

                        ValidationContext anyOfChildContext1 = validationContext.CreateChildContext();
                        if (level > ValidationLevel.Basic)
                        {
                            anyOfChildContext1 = anyOfChildContext1.PushValidationLocationReducedPathModifier(new("#/anyOf/1/$ref"));
                        }

                        ValidationContext anyOfResult1 = value.As<Corvus.Json.JsonSchema.Draft201909.Validation.StringArray>().Validate(anyOfChildContext1, level);
                        if (anyOfResult1.IsValid)
                        {
                            result = result.MergeChildContext(anyOfResult1, level >= ValidationLevel.Verbose);
                            if (level == ValidationLevel.Flag)
                            {
                                return result;
                            }
                            else
                            {
                                anyOfFoundValid = true;
                            }
                        }
                        else
                        {
                            if (level >= ValidationLevel.Verbose)
                            {
                                result = result.MergeResults(result.IsValid, level, anyOfResult1);
                            }
                        }

                        if (level >= ValidationLevel.Basic)
                        {
                            result.PushValidationLocationProperty("anyOf");
                        }

                        if (anyOfFoundValid)
                        {
                            if (level >= ValidationLevel.Verbose)
                            {
                                result = result.WithResult(isValid: true, "Validation anyOf - validated against the schema.");
                            }
                        }
                        else
                        {
                            if (level >= ValidationLevel.Basic)
                            {
                                result = result.WithResult(isValid: false, "Validation anyOf - did not validate against the schema.");
                            }
                            else
                            {
                                result = result.WithResult(isValid: false);
                            }
                        }

                        if (level >= ValidationLevel.Basic)
                        {
                            result.PopLocation();
                        }

                        return result;
                    }

                    return result;
                }
            }
        }
    }
}
