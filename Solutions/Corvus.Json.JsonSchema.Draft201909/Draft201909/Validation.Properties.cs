//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.Draft201909;
/// <summary>
/// Validation vocabulary meta-schema
/// </summary>
public readonly partial struct Validation
{
    /// <summary>
    /// The well-known property names in the JSON object.
    /// </summary>
    public static class JsonPropertyNames
    {
        /// <summary>
        /// JSON property name for <see cref = "Const"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ConstUtf8 => "const"u8;

        /// <summary>
        /// JSON property name for <see cref = "Const"/>.
        /// </summary>
        public const string Const = "const";
        /// <summary>
        /// JSON property name for <see cref = "DependentRequired"/>.
        /// </summary>
        public static ReadOnlySpan<byte> DependentRequiredUtf8 => "dependentRequired"u8;

        /// <summary>
        /// JSON property name for <see cref = "DependentRequired"/>.
        /// </summary>
        public const string DependentRequired = "dependentRequired";
        /// <summary>
        /// JSON property name for <see cref = "Enum"/>.
        /// </summary>
        public static ReadOnlySpan<byte> EnumUtf8 => "enum"u8;

        /// <summary>
        /// JSON property name for <see cref = "Enum"/>.
        /// </summary>
        public const string Enum = "enum";
        /// <summary>
        /// JSON property name for <see cref = "ExclusiveMaximum"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ExclusiveMaximumUtf8 => "exclusiveMaximum"u8;

        /// <summary>
        /// JSON property name for <see cref = "ExclusiveMaximum"/>.
        /// </summary>
        public const string ExclusiveMaximum = "exclusiveMaximum";
        /// <summary>
        /// JSON property name for <see cref = "ExclusiveMinimum"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ExclusiveMinimumUtf8 => "exclusiveMinimum"u8;

        /// <summary>
        /// JSON property name for <see cref = "ExclusiveMinimum"/>.
        /// </summary>
        public const string ExclusiveMinimum = "exclusiveMinimum";
        /// <summary>
        /// JSON property name for <see cref = "MaxContains"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MaxContainsUtf8 => "maxContains"u8;

        /// <summary>
        /// JSON property name for <see cref = "MaxContains"/>.
        /// </summary>
        public const string MaxContains = "maxContains";
        /// <summary>
        /// JSON property name for <see cref = "Maximum"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MaximumUtf8 => "maximum"u8;

        /// <summary>
        /// JSON property name for <see cref = "Maximum"/>.
        /// </summary>
        public const string Maximum = "maximum";
        /// <summary>
        /// JSON property name for <see cref = "MaxItems"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MaxItemsUtf8 => "maxItems"u8;

        /// <summary>
        /// JSON property name for <see cref = "MaxItems"/>.
        /// </summary>
        public const string MaxItems = "maxItems";
        /// <summary>
        /// JSON property name for <see cref = "MaxLength"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MaxLengthUtf8 => "maxLength"u8;

        /// <summary>
        /// JSON property name for <see cref = "MaxLength"/>.
        /// </summary>
        public const string MaxLength = "maxLength";
        /// <summary>
        /// JSON property name for <see cref = "MaxProperties"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MaxPropertiesUtf8 => "maxProperties"u8;

        /// <summary>
        /// JSON property name for <see cref = "MaxProperties"/>.
        /// </summary>
        public const string MaxProperties = "maxProperties";
        /// <summary>
        /// JSON property name for <see cref = "MinContains"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MinContainsUtf8 => "minContains"u8;

        /// <summary>
        /// JSON property name for <see cref = "MinContains"/>.
        /// </summary>
        public const string MinContains = "minContains";
        /// <summary>
        /// JSON property name for <see cref = "Minimum"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MinimumUtf8 => "minimum"u8;

        /// <summary>
        /// JSON property name for <see cref = "Minimum"/>.
        /// </summary>
        public const string Minimum = "minimum";
        /// <summary>
        /// JSON property name for <see cref = "MinItems"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MinItemsUtf8 => "minItems"u8;

        /// <summary>
        /// JSON property name for <see cref = "MinItems"/>.
        /// </summary>
        public const string MinItems = "minItems";
        /// <summary>
        /// JSON property name for <see cref = "MinLength"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MinLengthUtf8 => "minLength"u8;

        /// <summary>
        /// JSON property name for <see cref = "MinLength"/>.
        /// </summary>
        public const string MinLength = "minLength";
        /// <summary>
        /// JSON property name for <see cref = "MinProperties"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MinPropertiesUtf8 => "minProperties"u8;

        /// <summary>
        /// JSON property name for <see cref = "MinProperties"/>.
        /// </summary>
        public const string MinProperties = "minProperties";
        /// <summary>
        /// JSON property name for <see cref = "MultipleOf"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MultipleOfUtf8 => "multipleOf"u8;

        /// <summary>
        /// JSON property name for <see cref = "MultipleOf"/>.
        /// </summary>
        public const string MultipleOf = "multipleOf";
        /// <summary>
        /// JSON property name for <see cref = "Pattern"/>.
        /// </summary>
        public static ReadOnlySpan<byte> PatternUtf8 => "pattern"u8;

        /// <summary>
        /// JSON property name for <see cref = "Pattern"/>.
        /// </summary>
        public const string Pattern = "pattern";
        /// <summary>
        /// JSON property name for <see cref = "Required"/>.
        /// </summary>
        public static ReadOnlySpan<byte> RequiredUtf8 => "required"u8;

        /// <summary>
        /// JSON property name for <see cref = "Required"/>.
        /// </summary>
        public const string Required = "required";
        /// <summary>
        /// JSON property name for <see cref = "Type"/>.
        /// </summary>
        public static ReadOnlySpan<byte> TypeUtf8 => "type"u8;

        /// <summary>
        /// JSON property name for <see cref = "Type"/>.
        /// </summary>
        public const string Type = "type";
        /// <summary>
        /// JSON property name for <see cref = "UniqueItems"/>.
        /// </summary>
        public static ReadOnlySpan<byte> UniqueItemsUtf8 => "uniqueItems"u8;

        /// <summary>
        /// JSON property name for <see cref = "UniqueItems"/>.
        /// </summary>
        public const string UniqueItems = "uniqueItems";
    }

    /// <summary>
    /// Gets the (optional) <c>const</c> property.
    /// </summary>
    public Corvus.Json.JsonAny Const
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ConstUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonAny(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Const, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonAny>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>dependentRequired</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Validation.DependentRequiredEntity DependentRequired
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DependentRequiredUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Validation.DependentRequiredEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.DependentRequired, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Validation.DependentRequiredEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>enum</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Validation.JsonAnyArray Enum
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.EnumUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Validation.JsonAnyArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Enum, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Validation.JsonAnyArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>exclusiveMaximum</c> property.
    /// </summary>
    public Corvus.Json.JsonNumber ExclusiveMaximum
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ExclusiveMaximumUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonNumber(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.ExclusiveMaximum, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonNumber>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>exclusiveMinimum</c> property.
    /// </summary>
    public Corvus.Json.JsonNumber ExclusiveMinimum
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ExclusiveMinimumUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonNumber(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.ExclusiveMinimum, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonNumber>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>maxContains</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger MaxContains
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MaxContainsUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MaxContains, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>maximum</c> property.
    /// </summary>
    public Corvus.Json.JsonNumber Maximum
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MaximumUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonNumber(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Maximum, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonNumber>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>maxItems</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger MaxItems
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MaxItemsUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MaxItems, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>maxLength</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger MaxLength
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MaxLengthUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MaxLength, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>maxProperties</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger MaxProperties
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MaxPropertiesUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MaxProperties, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>minContains</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Validation.MinContainsEntity MinContains
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MinContainsUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Validation.MinContainsEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MinContains, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Validation.MinContainsEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>minimum</c> property.
    /// </summary>
    public Corvus.Json.JsonNumber Minimum
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MinimumUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonNumber(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Minimum, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonNumber>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>minItems</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeIntegerDefault0 MinItems
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MinItemsUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeIntegerDefault0(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MinItems, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeIntegerDefault0>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>minLength</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeIntegerDefault0 MinLength
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MinLengthUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeIntegerDefault0(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MinLength, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeIntegerDefault0>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>minProperties</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeIntegerDefault0 MinProperties
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MinPropertiesUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeIntegerDefault0(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MinProperties, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeIntegerDefault0>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>multipleOf</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Validation.MultipleOfEntity MultipleOf
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MultipleOfUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Validation.MultipleOfEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MultipleOf, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Validation.MultipleOfEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>pattern</c> property.
    /// </summary>
    public Corvus.Json.JsonRegex Pattern
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.PatternUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonRegex(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Pattern, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonRegex>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>required</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Validation.StringArray Required
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.RequiredUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Validation.StringArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Required, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Validation.StringArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>type</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Validation.TypeEntity Type
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.TypeUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Validation.TypeEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Type, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Validation.TypeEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>uniqueItems</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Validation.UniqueItemsEntity UniqueItems
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.UniqueItemsUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Validation.UniqueItemsEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.UniqueItems, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Validation.UniqueItemsEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "Validation"/>.
    /// </summary>
    public static Validation Create(Corvus.Json.JsonAny? @const = null, Corvus.Json.JsonSchema.Draft201909.Validation.DependentRequiredEntity? dependentRequired = null, Corvus.Json.JsonSchema.Draft201909.Validation.JsonAnyArray? @enum = null, Corvus.Json.JsonNumber? exclusiveMaximum = null, Corvus.Json.JsonNumber? exclusiveMinimum = null, Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger? maxContains = null, Corvus.Json.JsonNumber? maximum = null, Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger? maxItems = null, Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger? maxLength = null, Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger? maxProperties = null, Corvus.Json.JsonSchema.Draft201909.Validation.MinContainsEntity? minContains = null, Corvus.Json.JsonNumber? minimum = null, Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeIntegerDefault0? minItems = null, Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeIntegerDefault0? minLength = null, Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeIntegerDefault0? minProperties = null, Corvus.Json.JsonSchema.Draft201909.Validation.MultipleOfEntity? multipleOf = null, Corvus.Json.JsonRegex? pattern = null, Corvus.Json.JsonSchema.Draft201909.Validation.StringArray? required = null, Corvus.Json.JsonSchema.Draft201909.Validation.TypeEntity? type = null, Corvus.Json.JsonSchema.Draft201909.Validation.UniqueItemsEntity? uniqueItems = null)
    {
        var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
        if (@const is Corvus.Json.JsonAny @const__)
        {
            builder.Add(JsonPropertyNames.Const, @const__.AsAny);
        }

        if (dependentRequired is Corvus.Json.JsonSchema.Draft201909.Validation.DependentRequiredEntity dependentRequired__)
        {
            builder.Add(JsonPropertyNames.DependentRequired, dependentRequired__.AsAny);
        }

        if (@enum is Corvus.Json.JsonSchema.Draft201909.Validation.JsonAnyArray @enum__)
        {
            builder.Add(JsonPropertyNames.Enum, @enum__.AsAny);
        }

        if (exclusiveMaximum is Corvus.Json.JsonNumber exclusiveMaximum__)
        {
            builder.Add(JsonPropertyNames.ExclusiveMaximum, exclusiveMaximum__.AsAny);
        }

        if (exclusiveMinimum is Corvus.Json.JsonNumber exclusiveMinimum__)
        {
            builder.Add(JsonPropertyNames.ExclusiveMinimum, exclusiveMinimum__.AsAny);
        }

        if (maxContains is Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger maxContains__)
        {
            builder.Add(JsonPropertyNames.MaxContains, maxContains__.AsAny);
        }

        if (maximum is Corvus.Json.JsonNumber maximum__)
        {
            builder.Add(JsonPropertyNames.Maximum, maximum__.AsAny);
        }

        if (maxItems is Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger maxItems__)
        {
            builder.Add(JsonPropertyNames.MaxItems, maxItems__.AsAny);
        }

        if (maxLength is Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger maxLength__)
        {
            builder.Add(JsonPropertyNames.MaxLength, maxLength__.AsAny);
        }

        if (maxProperties is Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger maxProperties__)
        {
            builder.Add(JsonPropertyNames.MaxProperties, maxProperties__.AsAny);
        }

        if (minContains is Corvus.Json.JsonSchema.Draft201909.Validation.MinContainsEntity minContains__)
        {
            builder.Add(JsonPropertyNames.MinContains, minContains__.AsAny);
        }

        if (minimum is Corvus.Json.JsonNumber minimum__)
        {
            builder.Add(JsonPropertyNames.Minimum, minimum__.AsAny);
        }

        if (minItems is Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeIntegerDefault0 minItems__)
        {
            builder.Add(JsonPropertyNames.MinItems, minItems__.AsAny);
        }

        if (minLength is Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeIntegerDefault0 minLength__)
        {
            builder.Add(JsonPropertyNames.MinLength, minLength__.AsAny);
        }

        if (minProperties is Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeIntegerDefault0 minProperties__)
        {
            builder.Add(JsonPropertyNames.MinProperties, minProperties__.AsAny);
        }

        if (multipleOf is Corvus.Json.JsonSchema.Draft201909.Validation.MultipleOfEntity multipleOf__)
        {
            builder.Add(JsonPropertyNames.MultipleOf, multipleOf__.AsAny);
        }

        if (pattern is Corvus.Json.JsonRegex pattern__)
        {
            builder.Add(JsonPropertyNames.Pattern, pattern__.AsAny);
        }

        if (required is Corvus.Json.JsonSchema.Draft201909.Validation.StringArray required__)
        {
            builder.Add(JsonPropertyNames.Required, required__.AsAny);
        }

        if (type is Corvus.Json.JsonSchema.Draft201909.Validation.TypeEntity type__)
        {
            builder.Add(JsonPropertyNames.Type, type__.AsAny);
        }

        if (uniqueItems is Corvus.Json.JsonSchema.Draft201909.Validation.UniqueItemsEntity uniqueItems__)
        {
            builder.Add(JsonPropertyNames.UniqueItems, uniqueItems__.AsAny);
        }

        return new(builder.ToImmutable());
    }

    /// <summary>
    /// Sets const.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithConst(in Corvus.Json.JsonAny value)
    {
        return this.SetProperty(JsonPropertyNames.Const, value);
    }

    /// <summary>
    /// Sets dependentRequired.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithDependentRequired(in Corvus.Json.JsonSchema.Draft201909.Validation.DependentRequiredEntity value)
    {
        return this.SetProperty(JsonPropertyNames.DependentRequired, value);
    }

    /// <summary>
    /// Sets enum.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithEnum(in Corvus.Json.JsonSchema.Draft201909.Validation.JsonAnyArray value)
    {
        return this.SetProperty(JsonPropertyNames.Enum, value);
    }

    /// <summary>
    /// Sets exclusiveMaximum.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithExclusiveMaximum(in Corvus.Json.JsonNumber value)
    {
        return this.SetProperty(JsonPropertyNames.ExclusiveMaximum, value);
    }

    /// <summary>
    /// Sets exclusiveMinimum.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithExclusiveMinimum(in Corvus.Json.JsonNumber value)
    {
        return this.SetProperty(JsonPropertyNames.ExclusiveMinimum, value);
    }

    /// <summary>
    /// Sets maxContains.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithMaxContains(in Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger value)
    {
        return this.SetProperty(JsonPropertyNames.MaxContains, value);
    }

    /// <summary>
    /// Sets maximum.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithMaximum(in Corvus.Json.JsonNumber value)
    {
        return this.SetProperty(JsonPropertyNames.Maximum, value);
    }

    /// <summary>
    /// Sets maxItems.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithMaxItems(in Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger value)
    {
        return this.SetProperty(JsonPropertyNames.MaxItems, value);
    }

    /// <summary>
    /// Sets maxLength.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithMaxLength(in Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger value)
    {
        return this.SetProperty(JsonPropertyNames.MaxLength, value);
    }

    /// <summary>
    /// Sets maxProperties.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithMaxProperties(in Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger value)
    {
        return this.SetProperty(JsonPropertyNames.MaxProperties, value);
    }

    /// <summary>
    /// Sets minContains.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithMinContains(in Corvus.Json.JsonSchema.Draft201909.Validation.MinContainsEntity value)
    {
        return this.SetProperty(JsonPropertyNames.MinContains, value);
    }

    /// <summary>
    /// Sets minimum.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithMinimum(in Corvus.Json.JsonNumber value)
    {
        return this.SetProperty(JsonPropertyNames.Minimum, value);
    }

    /// <summary>
    /// Sets minItems.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithMinItems(in Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeIntegerDefault0 value)
    {
        return this.SetProperty(JsonPropertyNames.MinItems, value);
    }

    /// <summary>
    /// Sets minLength.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithMinLength(in Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeIntegerDefault0 value)
    {
        return this.SetProperty(JsonPropertyNames.MinLength, value);
    }

    /// <summary>
    /// Sets minProperties.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithMinProperties(in Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeIntegerDefault0 value)
    {
        return this.SetProperty(JsonPropertyNames.MinProperties, value);
    }

    /// <summary>
    /// Sets multipleOf.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithMultipleOf(in Corvus.Json.JsonSchema.Draft201909.Validation.MultipleOfEntity value)
    {
        return this.SetProperty(JsonPropertyNames.MultipleOf, value);
    }

    /// <summary>
    /// Sets pattern.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithPattern(in Corvus.Json.JsonRegex value)
    {
        return this.SetProperty(JsonPropertyNames.Pattern, value);
    }

    /// <summary>
    /// Sets required.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithRequired(in Corvus.Json.JsonSchema.Draft201909.Validation.StringArray value)
    {
        return this.SetProperty(JsonPropertyNames.Required, value);
    }

    /// <summary>
    /// Sets type.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithType(in Corvus.Json.JsonSchema.Draft201909.Validation.TypeEntity value)
    {
        return this.SetProperty(JsonPropertyNames.Type, value);
    }

    /// <summary>
    /// Sets uniqueItems.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithUniqueItems(in Corvus.Json.JsonSchema.Draft201909.Validation.UniqueItemsEntity value)
    {
        return this.SetProperty(JsonPropertyNames.UniqueItems, value);
    }

    private static ValidationContext __CorvusValidateMultipleOf(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Validation.MultipleOfEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMaximum(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonNumber>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateExclusiveMaximum(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonNumber>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMinimum(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonNumber>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateExclusiveMinimum(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonNumber>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMaxLength(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMinLength(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeIntegerDefault0>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePattern(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonRegex>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMaxItems(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMinItems(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeIntegerDefault0>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateUniqueItems(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Validation.UniqueItemsEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMaxContains(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMinContains(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Validation.MinContainsEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMaxProperties(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeInteger>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMinProperties(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Validation.NonNegativeIntegerDefault0>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateRequired(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Validation.StringArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateDependentRequired(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Validation.DependentRequiredEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateConst(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonAny>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEnum(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Validation.JsonAnyArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateType(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Validation.TypeEntity>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(JsonPropertyNames.MultipleOfUtf8))
            {
                propertyValidator = __CorvusValidateMultipleOf;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.MaximumUtf8))
            {
                propertyValidator = __CorvusValidateMaximum;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.ExclusiveMaximumUtf8))
            {
                propertyValidator = __CorvusValidateExclusiveMaximum;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.MinimumUtf8))
            {
                propertyValidator = __CorvusValidateMinimum;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.ExclusiveMinimumUtf8))
            {
                propertyValidator = __CorvusValidateExclusiveMinimum;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.MaxLengthUtf8))
            {
                propertyValidator = __CorvusValidateMaxLength;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.MinLengthUtf8))
            {
                propertyValidator = __CorvusValidateMinLength;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.PatternUtf8))
            {
                propertyValidator = __CorvusValidatePattern;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.MaxItemsUtf8))
            {
                propertyValidator = __CorvusValidateMaxItems;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.MinItemsUtf8))
            {
                propertyValidator = __CorvusValidateMinItems;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.UniqueItemsUtf8))
            {
                propertyValidator = __CorvusValidateUniqueItems;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.MaxContainsUtf8))
            {
                propertyValidator = __CorvusValidateMaxContains;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.MinContainsUtf8))
            {
                propertyValidator = __CorvusValidateMinContains;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.MaxPropertiesUtf8))
            {
                propertyValidator = __CorvusValidateMaxProperties;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.MinPropertiesUtf8))
            {
                propertyValidator = __CorvusValidateMinProperties;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.RequiredUtf8))
            {
                propertyValidator = __CorvusValidateRequired;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.DependentRequiredUtf8))
            {
                propertyValidator = __CorvusValidateDependentRequired;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.ConstUtf8))
            {
                propertyValidator = __CorvusValidateConst;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.EnumUtf8))
            {
                propertyValidator = __CorvusValidateEnum;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.TypeUtf8))
            {
                propertyValidator = __CorvusValidateType;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(JsonPropertyNames.MultipleOf))
            {
                propertyValidator = __CorvusValidateMultipleOf;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.Maximum))
            {
                propertyValidator = __CorvusValidateMaximum;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.ExclusiveMaximum))
            {
                propertyValidator = __CorvusValidateExclusiveMaximum;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.Minimum))
            {
                propertyValidator = __CorvusValidateMinimum;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.ExclusiveMinimum))
            {
                propertyValidator = __CorvusValidateExclusiveMinimum;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.MaxLength))
            {
                propertyValidator = __CorvusValidateMaxLength;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.MinLength))
            {
                propertyValidator = __CorvusValidateMinLength;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.Pattern))
            {
                propertyValidator = __CorvusValidatePattern;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.MaxItems))
            {
                propertyValidator = __CorvusValidateMaxItems;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.MinItems))
            {
                propertyValidator = __CorvusValidateMinItems;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.UniqueItems))
            {
                propertyValidator = __CorvusValidateUniqueItems;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.MaxContains))
            {
                propertyValidator = __CorvusValidateMaxContains;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.MinContains))
            {
                propertyValidator = __CorvusValidateMinContains;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.MaxProperties))
            {
                propertyValidator = __CorvusValidateMaxProperties;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.MinProperties))
            {
                propertyValidator = __CorvusValidateMinProperties;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.Required))
            {
                propertyValidator = __CorvusValidateRequired;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.DependentRequired))
            {
                propertyValidator = __CorvusValidateDependentRequired;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.Const))
            {
                propertyValidator = __CorvusValidateConst;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.Enum))
            {
                propertyValidator = __CorvusValidateEnum;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.Type))
            {
                propertyValidator = __CorvusValidateType;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}