//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace Corvus.Json.JsonSchema.Draft201909;

/// <summary>
/// Validation vocabulary meta-schema
/// </summary>
public readonly partial struct Validation
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Examples:
    /// <example>
    /// <code>
    /// []
    /// </code>
    /// </example>
    /// </para>
    /// </remarks>
    public readonly partial struct StringArray
    {
        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext;
            if (level > ValidationLevel.Flag)
            {
                result = result.UsingResults();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.UsingStack();
                result = result.PushSchemaLocation("https://json-schema.org/draft/2019-09/meta/validation#/$defs/stringArray");
            }

            JsonValueKind valueKind = this.ValueKind;
            result = CorvusValidation.TypeValidationHandler(valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            result = CorvusValidation.ArrayValidationHandler(this, valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            return result;
        }

        /// <summary>
        /// Validation constants for the type.
        /// </summary>
        public static partial class CorvusValidation
        {
            /// <summary>
            /// Core type validation.
            /// </summary>
            /// <param name="valueKind">The <see cref="JsonValueKind" /> of the value to validate.</param>
            /// <param name="validationContext">The current validation context.</param>
            /// <param name="level">The current validation level.</param>
            /// <returns>The resulting validation context after validation.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            internal static ValidationContext TypeValidationHandler(
                JsonValueKind valueKind,
                in ValidationContext validationContext,
                ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext;
                return Corvus.Json.ValidateWithoutCoreType.TypeArray(valueKind, result, level);
            }

            /// <summary>
            /// Array validation.
            /// </summary>
            /// <param name="value">The value to validate.</param>
            /// <param name="valueKind">The <see cref="JsonValueKind" /> of the value to validate.</param>
            /// <param name="validationContext">The current validation context.</param>
            /// <param name="level">The current validation level.</param>
            /// <returns>The resulting validation context after validation.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            internal static ValidationContext ArrayValidationHandler(
                in StringArray value,
                JsonValueKind valueKind,
                in ValidationContext validationContext,
                ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (valueKind != JsonValueKind.Array)
                {
                    if (level == ValidationLevel.Verbose)
                    {
                        ValidationContext ignoredResult = validationContext;
                        ignoredResult = ignoredResult.PushValidationLocationProperty("items");
                        ignoredResult = ignoredResult.WithResult(isValid: true, "Validation items - ignored because the value is not an array");
                        ignoredResult = ignoredResult.PopLocation();
                        ignoredResult = ignoredResult.PushValidationLocationProperty("uniqueItems");
                        ignoredResult = ignoredResult.WithResult(isValid: true, "Validation uniqueItems - ignored because the value is not an array");
                        ignoredResult = ignoredResult.PopLocation();
                        return ignoredResult;
                    }

                    return validationContext;
                }

                int length = 0;
                using JsonArrayEnumerator<Corvus.Json.JsonString> arrayEnumerator = value.EnumerateArray();
                while (arrayEnumerator.MoveNext())
                {
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushDocumentArrayIndex(length);
                    }

                    using JsonArrayEnumerator<Corvus.Json.JsonString> innerEnumerator = value.EnumerateArray();
                    int innerIndex = -1;
                    while (innerIndex < length && 
innerEnumerator.MoveNext())
                    {
                        innerIndex++;
                    }

                    bool foundDuplicate = false;                    while (innerEnumerator.MoveNext())
                    {
                        if (innerEnumerator.Current.Equals(arrayEnumerator.Current))                        {
                            foundDuplicate = true;
                            if (level >= ValidationLevel.Basic)
                            {
                                result = result.PushValidationLocationProperty("uniqueItems");
                            }

                            if (level >= ValidationLevel.Detailed)
                            {
                                result = result.WithResult(isValid: false, $"Validation uniqueItems - duplicate items were found at indices innerIndex and {length}.");
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = result.WithResult(isValid: false, "Validation uniqueItems - duplicate items were found.");
                            }
                            else
                            {
                                return ValidationContext.InvalidContext;
                            }

                            if (level >= ValidationLevel.Basic)
                            {
                                result = result.PopLocation();
                            }
                        }
                    }

                    if (!foundDuplicate && level == ValidationLevel.Verbose)
                    {
                        result = result.PushValidationLocationProperty("uniqueItems");
                        result = result.WithResult(isValid: true, "Validation uniqueItems - no duplicate items found.");
                        result = result.PopLocation();
                    }
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifier(new("#/items"));
                    }

                    result = arrayEnumerator.Current.Validate(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }

                    result = result.WithLocalItemIndex(length);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }

                    length++;
                }

                return result;
            }
        }
    }
}
