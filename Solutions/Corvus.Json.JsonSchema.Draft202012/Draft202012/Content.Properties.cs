//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.Draft202012;
/// <summary>
/// Content vocabulary meta-schema
/// </summary>
public readonly partial struct Content
{
    /// <summary>
    /// The well-known property names in the JSON object.
    /// </summary>
    public static class JsonPropertyNames
    {
        /// <summary>
        /// JSON property name for <see cref = "ContentEncoding"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ContentEncodingUtf8 => "contentEncoding"u8;

        /// <summary>
        /// JSON property name for <see cref = "ContentEncoding"/>.
        /// </summary>
        public const string ContentEncoding = "contentEncoding";
        /// <summary>
        /// JSON property name for <see cref = "ContentMediaType"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ContentMediaTypeUtf8 => "contentMediaType"u8;

        /// <summary>
        /// JSON property name for <see cref = "ContentMediaType"/>.
        /// </summary>
        public const string ContentMediaType = "contentMediaType";
        /// <summary>
        /// JSON property name for <see cref = "ContentSchema"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ContentSchemaUtf8 => "contentSchema"u8;

        /// <summary>
        /// JSON property name for <see cref = "ContentSchema"/>.
        /// </summary>
        public const string ContentSchema = "contentSchema";
    }

    /// <summary>
    /// Gets the (optional) <c>contentEncoding</c> property.
    /// </summary>
    public Corvus.Json.JsonString ContentEncoding
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ContentEncodingUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.ContentEncoding, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>contentMediaType</c> property.
    /// </summary>
    public Corvus.Json.JsonString ContentMediaType
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ContentMediaTypeUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.ContentMediaType, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>contentSchema</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Schema ContentSchema
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ContentSchemaUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.ContentSchema, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "Content"/>.
    /// </summary>
    public static Content Create(Corvus.Json.JsonString? contentEncoding = null, Corvus.Json.JsonString? contentMediaType = null, Corvus.Json.JsonSchema.Draft202012.Schema? contentSchema = null)
    {
        var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
        if (contentEncoding is Corvus.Json.JsonString contentEncoding__)
        {
            builder.Add(JsonPropertyNames.ContentEncoding, contentEncoding__.AsAny);
        }

        if (contentMediaType is Corvus.Json.JsonString contentMediaType__)
        {
            builder.Add(JsonPropertyNames.ContentMediaType, contentMediaType__.AsAny);
        }

        if (contentSchema is Corvus.Json.JsonSchema.Draft202012.Schema contentSchema__)
        {
            builder.Add(JsonPropertyNames.ContentSchema, contentSchema__.AsAny);
        }

        return new(builder.ToImmutable());
    }

    /// <summary>
    /// Sets contentEncoding.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Content WithContentEncoding(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(JsonPropertyNames.ContentEncoding, value);
    }

    /// <summary>
    /// Sets contentMediaType.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Content WithContentMediaType(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(JsonPropertyNames.ContentMediaType, value);
    }

    /// <summary>
    /// Sets contentSchema.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Content WithContentSchema(in Corvus.Json.JsonSchema.Draft202012.Schema value)
    {
        return this.SetProperty(JsonPropertyNames.ContentSchema, value);
    }

    private static ValidationContext __CorvusValidateContentEncoding(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateContentMediaType(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateContentSchema(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft202012.Schema>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(JsonPropertyNames.ContentEncodingUtf8))
            {
                propertyValidator = __CorvusValidateContentEncoding;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.ContentMediaTypeUtf8))
            {
                propertyValidator = __CorvusValidateContentMediaType;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.ContentSchemaUtf8))
            {
                propertyValidator = __CorvusValidateContentSchema;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(JsonPropertyNames.ContentEncoding))
            {
                propertyValidator = __CorvusValidateContentEncoding;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.ContentMediaType))
            {
                propertyValidator = __CorvusValidateContentMediaType;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.ContentSchema))
            {
                propertyValidator = __CorvusValidateContentSchema;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}