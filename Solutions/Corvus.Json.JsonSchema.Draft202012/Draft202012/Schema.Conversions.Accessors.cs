//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using Corvus.Json;

namespace Corvus.Json.JsonSchema.Draft202012;
/// <summary>
/// Core and Validation specifications meta-schema
/// </summary>
public readonly partial struct Schema
{
    /// <summary>
    /// Gets the value as a <see cref = "Corvus.Json.JsonSchema.Draft202012.Core"/>.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Core AsCore
    {
        get
        {
            return (Corvus.Json.JsonSchema.Draft202012.Core)this;
        }
    }

    /// <summary>
    /// Gets a value indicating whether this is a valid <see cref = "Corvus.Json.JsonSchema.Draft202012.Core"/>.
    /// </summary>
    public bool IsCore
    {
        get
        {
            return ((Corvus.Json.JsonSchema.Draft202012.Core)this).IsValid();
        }
    }

    /// <summary>
    /// Gets the value as a <see cref = "Corvus.Json.JsonSchema.Draft202012.Core"/>.
    /// </summary>
    /// <param name = "result">The result of the conversion.</param>
    /// <returns><c>True</c> if the conversion was valid.</returns>
    public bool TryGetAsCore(out Corvus.Json.JsonSchema.Draft202012.Core result)
    {
        result = (Corvus.Json.JsonSchema.Draft202012.Core)this;
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref = "Corvus.Json.JsonSchema.Draft202012.Applicator"/>.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Applicator AsApplicator
    {
        get
        {
            return (Corvus.Json.JsonSchema.Draft202012.Applicator)this;
        }
    }

    /// <summary>
    /// Gets a value indicating whether this is a valid <see cref = "Corvus.Json.JsonSchema.Draft202012.Applicator"/>.
    /// </summary>
    public bool IsApplicator
    {
        get
        {
            return ((Corvus.Json.JsonSchema.Draft202012.Applicator)this).IsValid();
        }
    }

    /// <summary>
    /// Gets the value as a <see cref = "Corvus.Json.JsonSchema.Draft202012.Applicator"/>.
    /// </summary>
    /// <param name = "result">The result of the conversion.</param>
    /// <returns><c>True</c> if the conversion was valid.</returns>
    public bool TryGetAsApplicator(out Corvus.Json.JsonSchema.Draft202012.Applicator result)
    {
        result = (Corvus.Json.JsonSchema.Draft202012.Applicator)this;
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref = "Corvus.Json.JsonSchema.Draft202012.Unevaluated"/>.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Unevaluated AsUnevaluated
    {
        get
        {
            return (Corvus.Json.JsonSchema.Draft202012.Unevaluated)this;
        }
    }

    /// <summary>
    /// Gets a value indicating whether this is a valid <see cref = "Corvus.Json.JsonSchema.Draft202012.Unevaluated"/>.
    /// </summary>
    public bool IsUnevaluated
    {
        get
        {
            return ((Corvus.Json.JsonSchema.Draft202012.Unevaluated)this).IsValid();
        }
    }

    /// <summary>
    /// Gets the value as a <see cref = "Corvus.Json.JsonSchema.Draft202012.Unevaluated"/>.
    /// </summary>
    /// <param name = "result">The result of the conversion.</param>
    /// <returns><c>True</c> if the conversion was valid.</returns>
    public bool TryGetAsUnevaluated(out Corvus.Json.JsonSchema.Draft202012.Unevaluated result)
    {
        result = (Corvus.Json.JsonSchema.Draft202012.Unevaluated)this;
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref = "Corvus.Json.JsonSchema.Draft202012.Validation"/>.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation AsValidation
    {
        get
        {
            return (Corvus.Json.JsonSchema.Draft202012.Validation)this;
        }
    }

    /// <summary>
    /// Gets a value indicating whether this is a valid <see cref = "Corvus.Json.JsonSchema.Draft202012.Validation"/>.
    /// </summary>
    public bool IsValidation
    {
        get
        {
            return ((Corvus.Json.JsonSchema.Draft202012.Validation)this).IsValid();
        }
    }

    /// <summary>
    /// Gets the value as a <see cref = "Corvus.Json.JsonSchema.Draft202012.Validation"/>.
    /// </summary>
    /// <param name = "result">The result of the conversion.</param>
    /// <returns><c>True</c> if the conversion was valid.</returns>
    public bool TryGetAsValidation(out Corvus.Json.JsonSchema.Draft202012.Validation result)
    {
        result = (Corvus.Json.JsonSchema.Draft202012.Validation)this;
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref = "Corvus.Json.JsonSchema.Draft202012.MetaData"/>.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.MetaData AsMetaData
    {
        get
        {
            return (Corvus.Json.JsonSchema.Draft202012.MetaData)this;
        }
    }

    /// <summary>
    /// Gets a value indicating whether this is a valid <see cref = "Corvus.Json.JsonSchema.Draft202012.MetaData"/>.
    /// </summary>
    public bool IsMetaData
    {
        get
        {
            return ((Corvus.Json.JsonSchema.Draft202012.MetaData)this).IsValid();
        }
    }

    /// <summary>
    /// Gets the value as a <see cref = "Corvus.Json.JsonSchema.Draft202012.MetaData"/>.
    /// </summary>
    /// <param name = "result">The result of the conversion.</param>
    /// <returns><c>True</c> if the conversion was valid.</returns>
    public bool TryGetAsMetaData(out Corvus.Json.JsonSchema.Draft202012.MetaData result)
    {
        result = (Corvus.Json.JsonSchema.Draft202012.MetaData)this;
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref = "Corvus.Json.JsonSchema.Draft202012.FormatAnnotation"/>.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.FormatAnnotation AsFormatAnnotation
    {
        get
        {
            return (Corvus.Json.JsonSchema.Draft202012.FormatAnnotation)this;
        }
    }

    /// <summary>
    /// Gets a value indicating whether this is a valid <see cref = "Corvus.Json.JsonSchema.Draft202012.FormatAnnotation"/>.
    /// </summary>
    public bool IsFormatAnnotation
    {
        get
        {
            return ((Corvus.Json.JsonSchema.Draft202012.FormatAnnotation)this).IsValid();
        }
    }

    /// <summary>
    /// Gets the value as a <see cref = "Corvus.Json.JsonSchema.Draft202012.FormatAnnotation"/>.
    /// </summary>
    /// <param name = "result">The result of the conversion.</param>
    /// <returns><c>True</c> if the conversion was valid.</returns>
    public bool TryGetAsFormatAnnotation(out Corvus.Json.JsonSchema.Draft202012.FormatAnnotation result)
    {
        result = (Corvus.Json.JsonSchema.Draft202012.FormatAnnotation)this;
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref = "Corvus.Json.JsonSchema.Draft202012.Content"/>.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Content AsContent
    {
        get
        {
            return (Corvus.Json.JsonSchema.Draft202012.Content)this;
        }
    }

    /// <summary>
    /// Gets a value indicating whether this is a valid <see cref = "Corvus.Json.JsonSchema.Draft202012.Content"/>.
    /// </summary>
    public bool IsContent
    {
        get
        {
            return ((Corvus.Json.JsonSchema.Draft202012.Content)this).IsValid();
        }
    }

    /// <summary>
    /// Gets the value as a <see cref = "Corvus.Json.JsonSchema.Draft202012.Content"/>.
    /// </summary>
    /// <param name = "result">The result of the conversion.</param>
    /// <returns><c>True</c> if the conversion was valid.</returns>
    public bool TryGetAsContent(out Corvus.Json.JsonSchema.Draft202012.Content result)
    {
        result = (Corvus.Json.JsonSchema.Draft202012.Content)this;
        return result.IsValid();
    }
}