//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.Draft202012;
/// <summary>
/// Core and Validation specifications meta-schema
/// </summary>
public readonly partial struct Schema
{
    /// <summary>
    /// The well-known property names in the JSON object.
    /// </summary>
    public static class JsonPropertyNames
    {
        /// <summary>
        /// JSON property name for <see cref = "AdditionalProperties"/>.
        /// </summary>
        public static ReadOnlySpan<byte> AdditionalPropertiesUtf8 => "additionalProperties"u8;

        /// <summary>
        /// JSON property name for <see cref = "AdditionalProperties"/>.
        /// </summary>
        public const string AdditionalProperties = "additionalProperties";
        /// <summary>
        /// JSON property name for <see cref = "AllOf"/>.
        /// </summary>
        public static ReadOnlySpan<byte> AllOfUtf8 => "allOf"u8;

        /// <summary>
        /// JSON property name for <see cref = "AllOf"/>.
        /// </summary>
        public const string AllOf = "allOf";
        /// <summary>
        /// JSON property name for <see cref = "Anchor"/>.
        /// </summary>
        public static ReadOnlySpan<byte> AnchorUtf8 => "$anchor"u8;

        /// <summary>
        /// JSON property name for <see cref = "Anchor"/>.
        /// </summary>
        public const string Anchor = "$anchor";
        /// <summary>
        /// JSON property name for <see cref = "AnyOf"/>.
        /// </summary>
        public static ReadOnlySpan<byte> AnyOfUtf8 => "anyOf"u8;

        /// <summary>
        /// JSON property name for <see cref = "AnyOf"/>.
        /// </summary>
        public const string AnyOf = "anyOf";
        /// <summary>
        /// JSON property name for <see cref = "Comment"/>.
        /// </summary>
        public static ReadOnlySpan<byte> CommentUtf8 => "$comment"u8;

        /// <summary>
        /// JSON property name for <see cref = "Comment"/>.
        /// </summary>
        public const string Comment = "$comment";
        /// <summary>
        /// JSON property name for <see cref = "Const"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ConstUtf8 => "const"u8;

        /// <summary>
        /// JSON property name for <see cref = "Const"/>.
        /// </summary>
        public const string Const = "const";
        /// <summary>
        /// JSON property name for <see cref = "Contains"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ContainsUtf8 => "contains"u8;

        /// <summary>
        /// JSON property name for <see cref = "Contains"/>.
        /// </summary>
        public const string Contains = "contains";
        /// <summary>
        /// JSON property name for <see cref = "ContentEncoding"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ContentEncodingUtf8 => "contentEncoding"u8;

        /// <summary>
        /// JSON property name for <see cref = "ContentEncoding"/>.
        /// </summary>
        public const string ContentEncoding = "contentEncoding";
        /// <summary>
        /// JSON property name for <see cref = "ContentMediaType"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ContentMediaTypeUtf8 => "contentMediaType"u8;

        /// <summary>
        /// JSON property name for <see cref = "ContentMediaType"/>.
        /// </summary>
        public const string ContentMediaType = "contentMediaType";
        /// <summary>
        /// JSON property name for <see cref = "ContentSchema"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ContentSchemaUtf8 => "contentSchema"u8;

        /// <summary>
        /// JSON property name for <see cref = "ContentSchema"/>.
        /// </summary>
        public const string ContentSchema = "contentSchema";
        /// <summary>
        /// JSON property name for <see cref = "Default"/>.
        /// </summary>
        public static ReadOnlySpan<byte> DefaultUtf8 => "default"u8;

        /// <summary>
        /// JSON property name for <see cref = "Default"/>.
        /// </summary>
        public const string Default = "default";
        /// <summary>
        /// JSON property name for <see cref = "Definitions"/>.
        /// </summary>
        public static ReadOnlySpan<byte> DefinitionsUtf8 => "definitions"u8;

        /// <summary>
        /// JSON property name for <see cref = "Definitions"/>.
        /// </summary>
        public const string Definitions = "definitions";
        /// <summary>
        /// JSON property name for <see cref = "Defs"/>.
        /// </summary>
        public static ReadOnlySpan<byte> DefsUtf8 => "$defs"u8;

        /// <summary>
        /// JSON property name for <see cref = "Defs"/>.
        /// </summary>
        public const string Defs = "$defs";
        /// <summary>
        /// JSON property name for <see cref = "Dependencies"/>.
        /// </summary>
        public static ReadOnlySpan<byte> DependenciesUtf8 => "dependencies"u8;

        /// <summary>
        /// JSON property name for <see cref = "Dependencies"/>.
        /// </summary>
        public const string Dependencies = "dependencies";
        /// <summary>
        /// JSON property name for <see cref = "DependentRequired"/>.
        /// </summary>
        public static ReadOnlySpan<byte> DependentRequiredUtf8 => "dependentRequired"u8;

        /// <summary>
        /// JSON property name for <see cref = "DependentRequired"/>.
        /// </summary>
        public const string DependentRequired = "dependentRequired";
        /// <summary>
        /// JSON property name for <see cref = "DependentSchemas"/>.
        /// </summary>
        public static ReadOnlySpan<byte> DependentSchemasUtf8 => "dependentSchemas"u8;

        /// <summary>
        /// JSON property name for <see cref = "DependentSchemas"/>.
        /// </summary>
        public const string DependentSchemas = "dependentSchemas";
        /// <summary>
        /// JSON property name for <see cref = "Deprecated"/>.
        /// </summary>
        public static ReadOnlySpan<byte> DeprecatedUtf8 => "deprecated"u8;

        /// <summary>
        /// JSON property name for <see cref = "Deprecated"/>.
        /// </summary>
        public const string Deprecated = "deprecated";
        /// <summary>
        /// JSON property name for <see cref = "Description"/>.
        /// </summary>
        public static ReadOnlySpan<byte> DescriptionUtf8 => "description"u8;

        /// <summary>
        /// JSON property name for <see cref = "Description"/>.
        /// </summary>
        public const string Description = "description";
        /// <summary>
        /// JSON property name for <see cref = "DynamicAnchor"/>.
        /// </summary>
        public static ReadOnlySpan<byte> DynamicAnchorUtf8 => "$dynamicAnchor"u8;

        /// <summary>
        /// JSON property name for <see cref = "DynamicAnchor"/>.
        /// </summary>
        public const string DynamicAnchor = "$dynamicAnchor";
        /// <summary>
        /// JSON property name for <see cref = "DynamicRef"/>.
        /// </summary>
        public static ReadOnlySpan<byte> DynamicRefUtf8 => "$dynamicRef"u8;

        /// <summary>
        /// JSON property name for <see cref = "DynamicRef"/>.
        /// </summary>
        public const string DynamicRef = "$dynamicRef";
        /// <summary>
        /// JSON property name for <see cref = "Else"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ElseUtf8 => "else"u8;

        /// <summary>
        /// JSON property name for <see cref = "Else"/>.
        /// </summary>
        public const string Else = "else";
        /// <summary>
        /// JSON property name for <see cref = "Enum"/>.
        /// </summary>
        public static ReadOnlySpan<byte> EnumUtf8 => "enum"u8;

        /// <summary>
        /// JSON property name for <see cref = "Enum"/>.
        /// </summary>
        public const string Enum = "enum";
        /// <summary>
        /// JSON property name for <see cref = "Examples"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ExamplesUtf8 => "examples"u8;

        /// <summary>
        /// JSON property name for <see cref = "Examples"/>.
        /// </summary>
        public const string Examples = "examples";
        /// <summary>
        /// JSON property name for <see cref = "ExclusiveMaximum"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ExclusiveMaximumUtf8 => "exclusiveMaximum"u8;

        /// <summary>
        /// JSON property name for <see cref = "ExclusiveMaximum"/>.
        /// </summary>
        public const string ExclusiveMaximum = "exclusiveMaximum";
        /// <summary>
        /// JSON property name for <see cref = "ExclusiveMinimum"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ExclusiveMinimumUtf8 => "exclusiveMinimum"u8;

        /// <summary>
        /// JSON property name for <see cref = "ExclusiveMinimum"/>.
        /// </summary>
        public const string ExclusiveMinimum = "exclusiveMinimum";
        /// <summary>
        /// JSON property name for <see cref = "Format"/>.
        /// </summary>
        public static ReadOnlySpan<byte> FormatUtf8 => "format"u8;

        /// <summary>
        /// JSON property name for <see cref = "Format"/>.
        /// </summary>
        public const string Format = "format";
        /// <summary>
        /// JSON property name for <see cref = "Id"/>.
        /// </summary>
        public static ReadOnlySpan<byte> IdUtf8 => "$id"u8;

        /// <summary>
        /// JSON property name for <see cref = "Id"/>.
        /// </summary>
        public const string Id = "$id";
        /// <summary>
        /// JSON property name for <see cref = "If"/>.
        /// </summary>
        public static ReadOnlySpan<byte> IfUtf8 => "if"u8;

        /// <summary>
        /// JSON property name for <see cref = "If"/>.
        /// </summary>
        public const string If = "if";
        /// <summary>
        /// JSON property name for <see cref = "Items"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ItemsUtf8 => "items"u8;

        /// <summary>
        /// JSON property name for <see cref = "Items"/>.
        /// </summary>
        public const string Items = "items";
        /// <summary>
        /// JSON property name for <see cref = "MaxContains"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MaxContainsUtf8 => "maxContains"u8;

        /// <summary>
        /// JSON property name for <see cref = "MaxContains"/>.
        /// </summary>
        public const string MaxContains = "maxContains";
        /// <summary>
        /// JSON property name for <see cref = "Maximum"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MaximumUtf8 => "maximum"u8;

        /// <summary>
        /// JSON property name for <see cref = "Maximum"/>.
        /// </summary>
        public const string Maximum = "maximum";
        /// <summary>
        /// JSON property name for <see cref = "MaxItems"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MaxItemsUtf8 => "maxItems"u8;

        /// <summary>
        /// JSON property name for <see cref = "MaxItems"/>.
        /// </summary>
        public const string MaxItems = "maxItems";
        /// <summary>
        /// JSON property name for <see cref = "MaxLength"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MaxLengthUtf8 => "maxLength"u8;

        /// <summary>
        /// JSON property name for <see cref = "MaxLength"/>.
        /// </summary>
        public const string MaxLength = "maxLength";
        /// <summary>
        /// JSON property name for <see cref = "MaxProperties"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MaxPropertiesUtf8 => "maxProperties"u8;

        /// <summary>
        /// JSON property name for <see cref = "MaxProperties"/>.
        /// </summary>
        public const string MaxProperties = "maxProperties";
        /// <summary>
        /// JSON property name for <see cref = "MinContains"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MinContainsUtf8 => "minContains"u8;

        /// <summary>
        /// JSON property name for <see cref = "MinContains"/>.
        /// </summary>
        public const string MinContains = "minContains";
        /// <summary>
        /// JSON property name for <see cref = "Minimum"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MinimumUtf8 => "minimum"u8;

        /// <summary>
        /// JSON property name for <see cref = "Minimum"/>.
        /// </summary>
        public const string Minimum = "minimum";
        /// <summary>
        /// JSON property name for <see cref = "MinItems"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MinItemsUtf8 => "minItems"u8;

        /// <summary>
        /// JSON property name for <see cref = "MinItems"/>.
        /// </summary>
        public const string MinItems = "minItems";
        /// <summary>
        /// JSON property name for <see cref = "MinLength"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MinLengthUtf8 => "minLength"u8;

        /// <summary>
        /// JSON property name for <see cref = "MinLength"/>.
        /// </summary>
        public const string MinLength = "minLength";
        /// <summary>
        /// JSON property name for <see cref = "MinProperties"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MinPropertiesUtf8 => "minProperties"u8;

        /// <summary>
        /// JSON property name for <see cref = "MinProperties"/>.
        /// </summary>
        public const string MinProperties = "minProperties";
        /// <summary>
        /// JSON property name for <see cref = "MultipleOf"/>.
        /// </summary>
        public static ReadOnlySpan<byte> MultipleOfUtf8 => "multipleOf"u8;

        /// <summary>
        /// JSON property name for <see cref = "MultipleOf"/>.
        /// </summary>
        public const string MultipleOf = "multipleOf";
        /// <summary>
        /// JSON property name for <see cref = "Not"/>.
        /// </summary>
        public static ReadOnlySpan<byte> NotUtf8 => "not"u8;

        /// <summary>
        /// JSON property name for <see cref = "Not"/>.
        /// </summary>
        public const string Not = "not";
        /// <summary>
        /// JSON property name for <see cref = "OneOf"/>.
        /// </summary>
        public static ReadOnlySpan<byte> OneOfUtf8 => "oneOf"u8;

        /// <summary>
        /// JSON property name for <see cref = "OneOf"/>.
        /// </summary>
        public const string OneOf = "oneOf";
        /// <summary>
        /// JSON property name for <see cref = "Pattern"/>.
        /// </summary>
        public static ReadOnlySpan<byte> PatternUtf8 => "pattern"u8;

        /// <summary>
        /// JSON property name for <see cref = "Pattern"/>.
        /// </summary>
        public const string Pattern = "pattern";
        /// <summary>
        /// JSON property name for <see cref = "PatternProperties"/>.
        /// </summary>
        public static ReadOnlySpan<byte> PatternPropertiesUtf8 => "patternProperties"u8;

        /// <summary>
        /// JSON property name for <see cref = "PatternProperties"/>.
        /// </summary>
        public const string PatternProperties = "patternProperties";
        /// <summary>
        /// JSON property name for <see cref = "PrefixItems"/>.
        /// </summary>
        public static ReadOnlySpan<byte> PrefixItemsUtf8 => "prefixItems"u8;

        /// <summary>
        /// JSON property name for <see cref = "PrefixItems"/>.
        /// </summary>
        public const string PrefixItems = "prefixItems";
        /// <summary>
        /// JSON property name for <see cref = "Properties"/>.
        /// </summary>
        public static ReadOnlySpan<byte> PropertiesUtf8 => "properties"u8;

        /// <summary>
        /// JSON property name for <see cref = "Properties"/>.
        /// </summary>
        public const string Properties = "properties";
        /// <summary>
        /// JSON property name for <see cref = "PropertyNames"/>.
        /// </summary>
        public static ReadOnlySpan<byte> PropertyNamesUtf8 => "propertyNames"u8;

        /// <summary>
        /// JSON property name for <see cref = "PropertyNames"/>.
        /// </summary>
        public const string PropertyNames = "propertyNames";
        /// <summary>
        /// JSON property name for <see cref = "ReadOnly"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ReadOnlyUtf8 => "readOnly"u8;

        /// <summary>
        /// JSON property name for <see cref = "ReadOnly"/>.
        /// </summary>
        public const string ReadOnly = "readOnly";
        /// <summary>
        /// JSON property name for <see cref = "RecursiveAnchor"/>.
        /// </summary>
        public static ReadOnlySpan<byte> RecursiveAnchorUtf8 => "$recursiveAnchor"u8;

        /// <summary>
        /// JSON property name for <see cref = "RecursiveAnchor"/>.
        /// </summary>
        public const string RecursiveAnchor = "$recursiveAnchor";
        /// <summary>
        /// JSON property name for <see cref = "RecursiveRef"/>.
        /// </summary>
        public static ReadOnlySpan<byte> RecursiveRefUtf8 => "$recursiveRef"u8;

        /// <summary>
        /// JSON property name for <see cref = "RecursiveRef"/>.
        /// </summary>
        public const string RecursiveRef = "$recursiveRef";
        /// <summary>
        /// JSON property name for <see cref = "Ref"/>.
        /// </summary>
        public static ReadOnlySpan<byte> RefUtf8 => "$ref"u8;

        /// <summary>
        /// JSON property name for <see cref = "Ref"/>.
        /// </summary>
        public const string Ref = "$ref";
        /// <summary>
        /// JSON property name for <see cref = "Required"/>.
        /// </summary>
        public static ReadOnlySpan<byte> RequiredUtf8 => "required"u8;

        /// <summary>
        /// JSON property name for <see cref = "Required"/>.
        /// </summary>
        public const string Required = "required";
        /// <summary>
        /// JSON property name for <see cref = "SchemaValue"/>.
        /// </summary>
        public static ReadOnlySpan<byte> SchemaValueUtf8 => "$schema"u8;

        /// <summary>
        /// JSON property name for <see cref = "SchemaValue"/>.
        /// </summary>
        public const string SchemaValue = "$schema";
        /// <summary>
        /// JSON property name for <see cref = "Then"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ThenUtf8 => "then"u8;

        /// <summary>
        /// JSON property name for <see cref = "Then"/>.
        /// </summary>
        public const string Then = "then";
        /// <summary>
        /// JSON property name for <see cref = "Title"/>.
        /// </summary>
        public static ReadOnlySpan<byte> TitleUtf8 => "title"u8;

        /// <summary>
        /// JSON property name for <see cref = "Title"/>.
        /// </summary>
        public const string Title = "title";
        /// <summary>
        /// JSON property name for <see cref = "Type"/>.
        /// </summary>
        public static ReadOnlySpan<byte> TypeUtf8 => "type"u8;

        /// <summary>
        /// JSON property name for <see cref = "Type"/>.
        /// </summary>
        public const string Type = "type";
        /// <summary>
        /// JSON property name for <see cref = "UnevaluatedItems"/>.
        /// </summary>
        public static ReadOnlySpan<byte> UnevaluatedItemsUtf8 => "unevaluatedItems"u8;

        /// <summary>
        /// JSON property name for <see cref = "UnevaluatedItems"/>.
        /// </summary>
        public const string UnevaluatedItems = "unevaluatedItems";
        /// <summary>
        /// JSON property name for <see cref = "UnevaluatedProperties"/>.
        /// </summary>
        public static ReadOnlySpan<byte> UnevaluatedPropertiesUtf8 => "unevaluatedProperties"u8;

        /// <summary>
        /// JSON property name for <see cref = "UnevaluatedProperties"/>.
        /// </summary>
        public const string UnevaluatedProperties = "unevaluatedProperties";
        /// <summary>
        /// JSON property name for <see cref = "UniqueItems"/>.
        /// </summary>
        public static ReadOnlySpan<byte> UniqueItemsUtf8 => "uniqueItems"u8;

        /// <summary>
        /// JSON property name for <see cref = "UniqueItems"/>.
        /// </summary>
        public const string UniqueItems = "uniqueItems";
        /// <summary>
        /// JSON property name for <see cref = "Vocabulary"/>.
        /// </summary>
        public static ReadOnlySpan<byte> VocabularyUtf8 => "$vocabulary"u8;

        /// <summary>
        /// JSON property name for <see cref = "Vocabulary"/>.
        /// </summary>
        public const string Vocabulary = "$vocabulary";
        /// <summary>
        /// JSON property name for <see cref = "WriteOnly"/>.
        /// </summary>
        public static ReadOnlySpan<byte> WriteOnlyUtf8 => "writeOnly"u8;

        /// <summary>
        /// JSON property name for <see cref = "WriteOnly"/>.
        /// </summary>
        public const string WriteOnly = "writeOnly";
    }

    /// <summary>
    /// Gets the (optional) <c>additionalProperties</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Schema AdditionalProperties
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.AdditionalPropertiesUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.AdditionalProperties, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>allOf</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray AllOf
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.AllOfUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.AllOf, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>$anchor</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Core.AnchorString Anchor
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.AnchorUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Core.AnchorString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Anchor, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Core.AnchorString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>anyOf</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray AnyOf
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.AnyOfUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.AnyOf, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>$comment</c> property.
    /// </summary>
    public Corvus.Json.JsonString Comment
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.CommentUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Comment, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>const</c> property.
    /// </summary>
    public Corvus.Json.JsonAny Const
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ConstUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonAny(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Const, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonAny>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>contains</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Schema Contains
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ContainsUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Contains, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>contentEncoding</c> property.
    /// </summary>
    public Corvus.Json.JsonString ContentEncoding
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ContentEncodingUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.ContentEncoding, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>contentMediaType</c> property.
    /// </summary>
    public Corvus.Json.JsonString ContentMediaType
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ContentMediaTypeUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.ContentMediaType, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>contentSchema</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Schema ContentSchema
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ContentSchemaUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.ContentSchema, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>default</c> property.
    /// </summary>
    public Corvus.Json.JsonAny Default
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DefaultUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonAny(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Default, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonAny>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>definitions</c> property.
    /// </summary>
    [Obsolete("This property is defined as deprecated in the JSON schema")]
    public Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity Definitions
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DefinitionsUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Definitions, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>$defs</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity Defs
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DefsUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Defs, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>dependencies</c> property.
    /// </summary>
    [Obsolete("This property is defined as deprecated in the JSON schema")]
    public Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity Dependencies
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DependenciesUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Dependencies, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>dependentRequired</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity DependentRequired
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DependentRequiredUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.DependentRequired, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>dependentSchemas</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity DependentSchemas
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DependentSchemasUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.DependentSchemas, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>deprecated</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity Deprecated
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DeprecatedUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Deprecated, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>description</c> property.
    /// </summary>
    public Corvus.Json.JsonString Description
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DescriptionUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Description, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>$dynamicAnchor</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Core.AnchorString DynamicAnchor
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DynamicAnchorUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Core.AnchorString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.DynamicAnchor, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Core.AnchorString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>$dynamicRef</c> property.
    /// </summary>
    public Corvus.Json.JsonUriReference DynamicRef
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DynamicRefUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonUriReference(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.DynamicRef, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonUriReference>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>else</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Schema Else
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ElseUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Else, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>enum</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray Enum
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.EnumUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Enum, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>examples</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray Examples
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ExamplesUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Examples, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>exclusiveMaximum</c> property.
    /// </summary>
    public Corvus.Json.JsonNumber ExclusiveMaximum
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ExclusiveMaximumUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonNumber(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.ExclusiveMaximum, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonNumber>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>exclusiveMinimum</c> property.
    /// </summary>
    public Corvus.Json.JsonNumber ExclusiveMinimum
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ExclusiveMinimumUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonNumber(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.ExclusiveMinimum, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonNumber>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>format</c> property.
    /// </summary>
    public Corvus.Json.JsonString Format
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.FormatUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Format, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>$id</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Core.IdEntity Id
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.IdUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Core.IdEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Id, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Core.IdEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>if</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Schema If
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.IfUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.If, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>items</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Schema Items
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ItemsUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Items, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>maxContains</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger MaxContains
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MaxContainsUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MaxContains, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>maximum</c> property.
    /// </summary>
    public Corvus.Json.JsonNumber Maximum
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MaximumUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonNumber(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Maximum, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonNumber>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>maxItems</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger MaxItems
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MaxItemsUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MaxItems, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>maxLength</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger MaxLength
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MaxLengthUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MaxLength, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>maxProperties</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger MaxProperties
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MaxPropertiesUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MaxProperties, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>minContains</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity MinContains
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MinContainsUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MinContains, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>minimum</c> property.
    /// </summary>
    public Corvus.Json.JsonNumber Minimum
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MinimumUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonNumber(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Minimum, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonNumber>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>minItems</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0 MinItems
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MinItemsUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MinItems, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>minLength</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0 MinLength
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MinLengthUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MinLength, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>minProperties</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0 MinProperties
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MinPropertiesUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MinProperties, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>multipleOf</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity MultipleOf
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MultipleOfUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.MultipleOf, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>not</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Schema Not
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.NotUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Not, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>oneOf</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray OneOf
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.OneOfUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.OneOf, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>pattern</c> property.
    /// </summary>
    public Corvus.Json.JsonRegex Pattern
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.PatternUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonRegex(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Pattern, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonRegex>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>patternProperties</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity PatternProperties
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.PatternPropertiesUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.PatternProperties, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>prefixItems</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray PrefixItems
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.PrefixItemsUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.PrefixItems, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>properties</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity Properties
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.PropertiesUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Properties, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>propertyNames</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Schema PropertyNames
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.PropertyNamesUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.PropertyNames, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>readOnly</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity ReadOnly
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ReadOnlyUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.ReadOnly, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>$recursiveAnchor</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Core.AnchorString RecursiveAnchor
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.RecursiveAnchorUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Core.AnchorString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.RecursiveAnchor, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Core.AnchorString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>$recursiveRef</c> property.
    /// </summary>
    public Corvus.Json.JsonUriReference RecursiveRef
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.RecursiveRefUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonUriReference(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.RecursiveRef, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonUriReference>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>$ref</c> property.
    /// </summary>
    public Corvus.Json.JsonUriReference Ref
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.RefUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonUriReference(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Ref, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonUriReference>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>required</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.StringArray Required
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.RequiredUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.StringArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Required, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.StringArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>$schema</c> property.
    /// </summary>
    public Corvus.Json.JsonUri SchemaValue
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.SchemaValueUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonUri(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.SchemaValue, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonUri>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>then</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Schema Then
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ThenUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Then, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>title</c> property.
    /// </summary>
    public Corvus.Json.JsonString Title
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.TitleUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Title, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>type</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity Type
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.TypeUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Type, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>unevaluatedItems</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Schema UnevaluatedItems
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.UnevaluatedItemsUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.UnevaluatedItems, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>unevaluatedProperties</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Schema UnevaluatedProperties
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.UnevaluatedPropertiesUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.UnevaluatedProperties, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>uniqueItems</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity UniqueItems
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.UniqueItemsUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.UniqueItems, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>$vocabulary</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity Vocabulary
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.VocabularyUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Vocabulary, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>writeOnly</c> property.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity WriteOnly
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.WriteOnlyUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.WriteOnly, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "Schema"/>.
    /// </summary>
    public static Schema Create(Corvus.Json.JsonSchema.Draft202012.Schema? additionalProperties = null, Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray? allOf = null, Corvus.Json.JsonSchema.Draft202012.Core.AnchorString? anchor = null, Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray? anyOf = null, Corvus.Json.JsonString? comment = null, Corvus.Json.JsonAny? @const = null, Corvus.Json.JsonSchema.Draft202012.Schema? contains = null, Corvus.Json.JsonString? contentEncoding = null, Corvus.Json.JsonString? contentMediaType = null, Corvus.Json.JsonSchema.Draft202012.Schema? contentSchema = null, Corvus.Json.JsonAny? @default = null, Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity? definitions = null, Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity? defs = null, Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity? dependencies = null, Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity? dependentRequired = null, Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity? dependentSchemas = null, Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity? deprecated = null, Corvus.Json.JsonString? description = null, Corvus.Json.JsonSchema.Draft202012.Core.AnchorString? dynamicAnchor = null, Corvus.Json.JsonUriReference? dynamicRef = null, Corvus.Json.JsonSchema.Draft202012.Schema? @else = null, Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray? @enum = null, Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray? examples = null, Corvus.Json.JsonNumber? exclusiveMaximum = null, Corvus.Json.JsonNumber? exclusiveMinimum = null, Corvus.Json.JsonString? format = null, Corvus.Json.JsonSchema.Draft202012.Core.IdEntity? id = null, Corvus.Json.JsonSchema.Draft202012.Schema? @if = null, Corvus.Json.JsonSchema.Draft202012.Schema? items = null, Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger? maxContains = null, Corvus.Json.JsonNumber? maximum = null, Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger? maxItems = null, Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger? maxLength = null, Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger? maxProperties = null, Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity? minContains = null, Corvus.Json.JsonNumber? minimum = null, Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0? minItems = null, Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0? minLength = null, Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0? minProperties = null, Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity? multipleOf = null, Corvus.Json.JsonSchema.Draft202012.Schema? not = null, Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray? oneOf = null, Corvus.Json.JsonRegex? pattern = null, Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity? patternProperties = null, Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray? prefixItems = null, Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity? properties = null, Corvus.Json.JsonSchema.Draft202012.Schema? propertyNames = null, Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity? readOnly = null, Corvus.Json.JsonSchema.Draft202012.Core.AnchorString? recursiveAnchor = null, Corvus.Json.JsonUriReference? recursiveRef = null, Corvus.Json.JsonUriReference? @ref = null, Corvus.Json.JsonSchema.Draft202012.Validation.StringArray? required = null, Corvus.Json.JsonUri? schemaValue = null, Corvus.Json.JsonSchema.Draft202012.Schema? then = null, Corvus.Json.JsonString? title = null, Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity? type = null, Corvus.Json.JsonSchema.Draft202012.Schema? unevaluatedItems = null, Corvus.Json.JsonSchema.Draft202012.Schema? unevaluatedProperties = null, Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity? uniqueItems = null, Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity? vocabulary = null, Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity? writeOnly = null)
    {
        var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
        if (additionalProperties is Corvus.Json.JsonSchema.Draft202012.Schema additionalProperties__)
        {
            builder.Add(JsonPropertyNames.AdditionalProperties, additionalProperties__.AsAny);
        }

        if (allOf is Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray allOf__)
        {
            builder.Add(JsonPropertyNames.AllOf, allOf__.AsAny);
        }

        if (anchor is Corvus.Json.JsonSchema.Draft202012.Core.AnchorString anchor__)
        {
            builder.Add(JsonPropertyNames.Anchor, anchor__.AsAny);
        }

        if (anyOf is Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray anyOf__)
        {
            builder.Add(JsonPropertyNames.AnyOf, anyOf__.AsAny);
        }

        if (comment is Corvus.Json.JsonString comment__)
        {
            builder.Add(JsonPropertyNames.Comment, comment__.AsAny);
        }

        if (@const is Corvus.Json.JsonAny @const__)
        {
            builder.Add(JsonPropertyNames.Const, @const__.AsAny);
        }

        if (contains is Corvus.Json.JsonSchema.Draft202012.Schema contains__)
        {
            builder.Add(JsonPropertyNames.Contains, contains__.AsAny);
        }

        if (contentEncoding is Corvus.Json.JsonString contentEncoding__)
        {
            builder.Add(JsonPropertyNames.ContentEncoding, contentEncoding__.AsAny);
        }

        if (contentMediaType is Corvus.Json.JsonString contentMediaType__)
        {
            builder.Add(JsonPropertyNames.ContentMediaType, contentMediaType__.AsAny);
        }

        if (contentSchema is Corvus.Json.JsonSchema.Draft202012.Schema contentSchema__)
        {
            builder.Add(JsonPropertyNames.ContentSchema, contentSchema__.AsAny);
        }

        if (@default is Corvus.Json.JsonAny @default__)
        {
            builder.Add(JsonPropertyNames.Default, @default__.AsAny);
        }

        if (definitions is Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity definitions__)
        {
            builder.Add(JsonPropertyNames.Definitions, definitions__.AsAny);
        }

        if (defs is Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity defs__)
        {
            builder.Add(JsonPropertyNames.Defs, defs__.AsAny);
        }

        if (dependencies is Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity dependencies__)
        {
            builder.Add(JsonPropertyNames.Dependencies, dependencies__.AsAny);
        }

        if (dependentRequired is Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity dependentRequired__)
        {
            builder.Add(JsonPropertyNames.DependentRequired, dependentRequired__.AsAny);
        }

        if (dependentSchemas is Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity dependentSchemas__)
        {
            builder.Add(JsonPropertyNames.DependentSchemas, dependentSchemas__.AsAny);
        }

        if (deprecated is Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity deprecated__)
        {
            builder.Add(JsonPropertyNames.Deprecated, deprecated__.AsAny);
        }

        if (description is Corvus.Json.JsonString description__)
        {
            builder.Add(JsonPropertyNames.Description, description__.AsAny);
        }

        if (dynamicAnchor is Corvus.Json.JsonSchema.Draft202012.Core.AnchorString dynamicAnchor__)
        {
            builder.Add(JsonPropertyNames.DynamicAnchor, dynamicAnchor__.AsAny);
        }

        if (dynamicRef is Corvus.Json.JsonUriReference dynamicRef__)
        {
            builder.Add(JsonPropertyNames.DynamicRef, dynamicRef__.AsAny);
        }

        if (@else is Corvus.Json.JsonSchema.Draft202012.Schema @else__)
        {
            builder.Add(JsonPropertyNames.Else, @else__.AsAny);
        }

        if (@enum is Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray @enum__)
        {
            builder.Add(JsonPropertyNames.Enum, @enum__.AsAny);
        }

        if (examples is Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray examples__)
        {
            builder.Add(JsonPropertyNames.Examples, examples__.AsAny);
        }

        if (exclusiveMaximum is Corvus.Json.JsonNumber exclusiveMaximum__)
        {
            builder.Add(JsonPropertyNames.ExclusiveMaximum, exclusiveMaximum__.AsAny);
        }

        if (exclusiveMinimum is Corvus.Json.JsonNumber exclusiveMinimum__)
        {
            builder.Add(JsonPropertyNames.ExclusiveMinimum, exclusiveMinimum__.AsAny);
        }

        if (format is Corvus.Json.JsonString format__)
        {
            builder.Add(JsonPropertyNames.Format, format__.AsAny);
        }

        if (id is Corvus.Json.JsonSchema.Draft202012.Core.IdEntity id__)
        {
            builder.Add(JsonPropertyNames.Id, id__.AsAny);
        }

        if (@if is Corvus.Json.JsonSchema.Draft202012.Schema @if__)
        {
            builder.Add(JsonPropertyNames.If, @if__.AsAny);
        }

        if (items is Corvus.Json.JsonSchema.Draft202012.Schema items__)
        {
            builder.Add(JsonPropertyNames.Items, items__.AsAny);
        }

        if (maxContains is Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger maxContains__)
        {
            builder.Add(JsonPropertyNames.MaxContains, maxContains__.AsAny);
        }

        if (maximum is Corvus.Json.JsonNumber maximum__)
        {
            builder.Add(JsonPropertyNames.Maximum, maximum__.AsAny);
        }

        if (maxItems is Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger maxItems__)
        {
            builder.Add(JsonPropertyNames.MaxItems, maxItems__.AsAny);
        }

        if (maxLength is Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger maxLength__)
        {
            builder.Add(JsonPropertyNames.MaxLength, maxLength__.AsAny);
        }

        if (maxProperties is Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger maxProperties__)
        {
            builder.Add(JsonPropertyNames.MaxProperties, maxProperties__.AsAny);
        }

        if (minContains is Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity minContains__)
        {
            builder.Add(JsonPropertyNames.MinContains, minContains__.AsAny);
        }

        if (minimum is Corvus.Json.JsonNumber minimum__)
        {
            builder.Add(JsonPropertyNames.Minimum, minimum__.AsAny);
        }

        if (minItems is Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0 minItems__)
        {
            builder.Add(JsonPropertyNames.MinItems, minItems__.AsAny);
        }

        if (minLength is Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0 minLength__)
        {
            builder.Add(JsonPropertyNames.MinLength, minLength__.AsAny);
        }

        if (minProperties is Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0 minProperties__)
        {
            builder.Add(JsonPropertyNames.MinProperties, minProperties__.AsAny);
        }

        if (multipleOf is Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity multipleOf__)
        {
            builder.Add(JsonPropertyNames.MultipleOf, multipleOf__.AsAny);
        }

        if (not is Corvus.Json.JsonSchema.Draft202012.Schema not__)
        {
            builder.Add(JsonPropertyNames.Not, not__.AsAny);
        }

        if (oneOf is Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray oneOf__)
        {
            builder.Add(JsonPropertyNames.OneOf, oneOf__.AsAny);
        }

        if (pattern is Corvus.Json.JsonRegex pattern__)
        {
            builder.Add(JsonPropertyNames.Pattern, pattern__.AsAny);
        }

        if (patternProperties is Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity patternProperties__)
        {
            builder.Add(JsonPropertyNames.PatternProperties, patternProperties__.AsAny);
        }

        if (prefixItems is Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray prefixItems__)
        {
            builder.Add(JsonPropertyNames.PrefixItems, prefixItems__.AsAny);
        }

        if (properties is Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity properties__)
        {
            builder.Add(JsonPropertyNames.Properties, properties__.AsAny);
        }

        if (propertyNames is Corvus.Json.JsonSchema.Draft202012.Schema propertyNames__)
        {
            builder.Add(JsonPropertyNames.PropertyNames, propertyNames__.AsAny);
        }

        if (readOnly is Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity readOnly__)
        {
            builder.Add(JsonPropertyNames.ReadOnly, readOnly__.AsAny);
        }

        if (recursiveAnchor is Corvus.Json.JsonSchema.Draft202012.Core.AnchorString recursiveAnchor__)
        {
            builder.Add(JsonPropertyNames.RecursiveAnchor, recursiveAnchor__.AsAny);
        }

        if (recursiveRef is Corvus.Json.JsonUriReference recursiveRef__)
        {
            builder.Add(JsonPropertyNames.RecursiveRef, recursiveRef__.AsAny);
        }

        if (@ref is Corvus.Json.JsonUriReference @ref__)
        {
            builder.Add(JsonPropertyNames.Ref, @ref__.AsAny);
        }

        if (required is Corvus.Json.JsonSchema.Draft202012.Validation.StringArray required__)
        {
            builder.Add(JsonPropertyNames.Required, required__.AsAny);
        }

        if (schemaValue is Corvus.Json.JsonUri schemaValue__)
        {
            builder.Add(JsonPropertyNames.SchemaValue, schemaValue__.AsAny);
        }

        if (then is Corvus.Json.JsonSchema.Draft202012.Schema then__)
        {
            builder.Add(JsonPropertyNames.Then, then__.AsAny);
        }

        if (title is Corvus.Json.JsonString title__)
        {
            builder.Add(JsonPropertyNames.Title, title__.AsAny);
        }

        if (type is Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity type__)
        {
            builder.Add(JsonPropertyNames.Type, type__.AsAny);
        }

        if (unevaluatedItems is Corvus.Json.JsonSchema.Draft202012.Schema unevaluatedItems__)
        {
            builder.Add(JsonPropertyNames.UnevaluatedItems, unevaluatedItems__.AsAny);
        }

        if (unevaluatedProperties is Corvus.Json.JsonSchema.Draft202012.Schema unevaluatedProperties__)
        {
            builder.Add(JsonPropertyNames.UnevaluatedProperties, unevaluatedProperties__.AsAny);
        }

        if (uniqueItems is Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity uniqueItems__)
        {
            builder.Add(JsonPropertyNames.UniqueItems, uniqueItems__.AsAny);
        }

        if (vocabulary is Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity vocabulary__)
        {
            builder.Add(JsonPropertyNames.Vocabulary, vocabulary__.AsAny);
        }

        if (writeOnly is Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity writeOnly__)
        {
            builder.Add(JsonPropertyNames.WriteOnly, writeOnly__.AsAny);
        }

        return new(builder.ToImmutable());
    }

    /// <summary>
    /// Sets additionalProperties.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithAdditionalProperties(in Corvus.Json.JsonSchema.Draft202012.Schema value)
    {
        return this.SetProperty(JsonPropertyNames.AdditionalProperties, value);
    }

    /// <summary>
    /// Sets allOf.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithAllOf(in Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray value)
    {
        return this.SetProperty(JsonPropertyNames.AllOf, value);
    }

    /// <summary>
    /// Sets $anchor.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithAnchor(in Corvus.Json.JsonSchema.Draft202012.Core.AnchorString value)
    {
        return this.SetProperty(JsonPropertyNames.Anchor, value);
    }

    /// <summary>
    /// Sets anyOf.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithAnyOf(in Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray value)
    {
        return this.SetProperty(JsonPropertyNames.AnyOf, value);
    }

    /// <summary>
    /// Sets $comment.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithComment(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(JsonPropertyNames.Comment, value);
    }

    /// <summary>
    /// Sets const.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithConst(in Corvus.Json.JsonAny value)
    {
        return this.SetProperty(JsonPropertyNames.Const, value);
    }

    /// <summary>
    /// Sets contains.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithContains(in Corvus.Json.JsonSchema.Draft202012.Schema value)
    {
        return this.SetProperty(JsonPropertyNames.Contains, value);
    }

    /// <summary>
    /// Sets contentEncoding.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithContentEncoding(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(JsonPropertyNames.ContentEncoding, value);
    }

    /// <summary>
    /// Sets contentMediaType.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithContentMediaType(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(JsonPropertyNames.ContentMediaType, value);
    }

    /// <summary>
    /// Sets contentSchema.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithContentSchema(in Corvus.Json.JsonSchema.Draft202012.Schema value)
    {
        return this.SetProperty(JsonPropertyNames.ContentSchema, value);
    }

    /// <summary>
    /// Sets default.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithDefault(in Corvus.Json.JsonAny value)
    {
        return this.SetProperty(JsonPropertyNames.Default, value);
    }

    /// <summary>
    /// Sets definitions.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithDefinitions(in Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity value)
    {
        return this.SetProperty(JsonPropertyNames.Definitions, value);
    }

    /// <summary>
    /// Sets $defs.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithDefs(in Corvus.Json.JsonSchema.Draft202012.Core.DefsEntity value)
    {
        return this.SetProperty(JsonPropertyNames.Defs, value);
    }

    /// <summary>
    /// Sets dependencies.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithDependencies(in Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity value)
    {
        return this.SetProperty(JsonPropertyNames.Dependencies, value);
    }

    /// <summary>
    /// Sets dependentRequired.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithDependentRequired(in Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity value)
    {
        return this.SetProperty(JsonPropertyNames.DependentRequired, value);
    }

    /// <summary>
    /// Sets dependentSchemas.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithDependentSchemas(in Corvus.Json.JsonSchema.Draft202012.Applicator.DependentSchemasEntity value)
    {
        return this.SetProperty(JsonPropertyNames.DependentSchemas, value);
    }

    /// <summary>
    /// Sets deprecated.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithDeprecated(in Corvus.Json.JsonSchema.Draft202012.MetaData.DeprecatedEntity value)
    {
        return this.SetProperty(JsonPropertyNames.Deprecated, value);
    }

    /// <summary>
    /// Sets description.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithDescription(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(JsonPropertyNames.Description, value);
    }

    /// <summary>
    /// Sets $dynamicAnchor.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithDynamicAnchor(in Corvus.Json.JsonSchema.Draft202012.Core.AnchorString value)
    {
        return this.SetProperty(JsonPropertyNames.DynamicAnchor, value);
    }

    /// <summary>
    /// Sets $dynamicRef.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithDynamicRef(in Corvus.Json.JsonUriReference value)
    {
        return this.SetProperty(JsonPropertyNames.DynamicRef, value);
    }

    /// <summary>
    /// Sets else.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithElse(in Corvus.Json.JsonSchema.Draft202012.Schema value)
    {
        return this.SetProperty(JsonPropertyNames.Else, value);
    }

    /// <summary>
    /// Sets enum.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithEnum(in Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray value)
    {
        return this.SetProperty(JsonPropertyNames.Enum, value);
    }

    /// <summary>
    /// Sets examples.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithExamples(in Corvus.Json.JsonSchema.Draft202012.MetaData.JsonAnyArray value)
    {
        return this.SetProperty(JsonPropertyNames.Examples, value);
    }

    /// <summary>
    /// Sets exclusiveMaximum.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithExclusiveMaximum(in Corvus.Json.JsonNumber value)
    {
        return this.SetProperty(JsonPropertyNames.ExclusiveMaximum, value);
    }

    /// <summary>
    /// Sets exclusiveMinimum.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithExclusiveMinimum(in Corvus.Json.JsonNumber value)
    {
        return this.SetProperty(JsonPropertyNames.ExclusiveMinimum, value);
    }

    /// <summary>
    /// Sets format.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithFormat(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(JsonPropertyNames.Format, value);
    }

    /// <summary>
    /// Sets $id.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithId(in Corvus.Json.JsonSchema.Draft202012.Core.IdEntity value)
    {
        return this.SetProperty(JsonPropertyNames.Id, value);
    }

    /// <summary>
    /// Sets if.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithIf(in Corvus.Json.JsonSchema.Draft202012.Schema value)
    {
        return this.SetProperty(JsonPropertyNames.If, value);
    }

    /// <summary>
    /// Sets items.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithItems(in Corvus.Json.JsonSchema.Draft202012.Schema value)
    {
        return this.SetProperty(JsonPropertyNames.Items, value);
    }

    /// <summary>
    /// Sets maxContains.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithMaxContains(in Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger value)
    {
        return this.SetProperty(JsonPropertyNames.MaxContains, value);
    }

    /// <summary>
    /// Sets maximum.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithMaximum(in Corvus.Json.JsonNumber value)
    {
        return this.SetProperty(JsonPropertyNames.Maximum, value);
    }

    /// <summary>
    /// Sets maxItems.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithMaxItems(in Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger value)
    {
        return this.SetProperty(JsonPropertyNames.MaxItems, value);
    }

    /// <summary>
    /// Sets maxLength.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithMaxLength(in Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger value)
    {
        return this.SetProperty(JsonPropertyNames.MaxLength, value);
    }

    /// <summary>
    /// Sets maxProperties.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithMaxProperties(in Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger value)
    {
        return this.SetProperty(JsonPropertyNames.MaxProperties, value);
    }

    /// <summary>
    /// Sets minContains.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithMinContains(in Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity value)
    {
        return this.SetProperty(JsonPropertyNames.MinContains, value);
    }

    /// <summary>
    /// Sets minimum.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithMinimum(in Corvus.Json.JsonNumber value)
    {
        return this.SetProperty(JsonPropertyNames.Minimum, value);
    }

    /// <summary>
    /// Sets minItems.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithMinItems(in Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0 value)
    {
        return this.SetProperty(JsonPropertyNames.MinItems, value);
    }

    /// <summary>
    /// Sets minLength.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithMinLength(in Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0 value)
    {
        return this.SetProperty(JsonPropertyNames.MinLength, value);
    }

    /// <summary>
    /// Sets minProperties.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithMinProperties(in Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0 value)
    {
        return this.SetProperty(JsonPropertyNames.MinProperties, value);
    }

    /// <summary>
    /// Sets multipleOf.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithMultipleOf(in Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity value)
    {
        return this.SetProperty(JsonPropertyNames.MultipleOf, value);
    }

    /// <summary>
    /// Sets not.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithNot(in Corvus.Json.JsonSchema.Draft202012.Schema value)
    {
        return this.SetProperty(JsonPropertyNames.Not, value);
    }

    /// <summary>
    /// Sets oneOf.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithOneOf(in Corvus.Json.JsonSchema.Draft202012.Schema.SchemaArray value)
    {
        return this.SetProperty(JsonPropertyNames.OneOf, value);
    }

    /// <summary>
    /// Sets pattern.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithPattern(in Corvus.Json.JsonRegex value)
    {
        return this.SetProperty(JsonPropertyNames.Pattern, value);
    }

    /// <summary>
    /// Sets patternProperties.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithPatternProperties(in Corvus.Json.JsonSchema.Draft202012.Applicator.PatternPropertiesEntity value)
    {
        return this.SetProperty(JsonPropertyNames.PatternProperties, value);
    }

    /// <summary>
    /// Sets prefixItems.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithPrefixItems(in Corvus.Json.JsonSchema.Draft202012.Applicator.SchemaArray value)
    {
        return this.SetProperty(JsonPropertyNames.PrefixItems, value);
    }

    /// <summary>
    /// Sets properties.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithProperties(in Corvus.Json.JsonSchema.Draft202012.Applicator.PropertiesEntity value)
    {
        return this.SetProperty(JsonPropertyNames.Properties, value);
    }

    /// <summary>
    /// Sets propertyNames.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithPropertyNames(in Corvus.Json.JsonSchema.Draft202012.Schema value)
    {
        return this.SetProperty(JsonPropertyNames.PropertyNames, value);
    }

    /// <summary>
    /// Sets readOnly.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithReadOnly(in Corvus.Json.JsonSchema.Draft202012.MetaData.ReadOnlyEntity value)
    {
        return this.SetProperty(JsonPropertyNames.ReadOnly, value);
    }

    /// <summary>
    /// Sets $recursiveAnchor.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithRecursiveAnchor(in Corvus.Json.JsonSchema.Draft202012.Core.AnchorString value)
    {
        return this.SetProperty(JsonPropertyNames.RecursiveAnchor, value);
    }

    /// <summary>
    /// Sets $recursiveRef.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithRecursiveRef(in Corvus.Json.JsonUriReference value)
    {
        return this.SetProperty(JsonPropertyNames.RecursiveRef, value);
    }

    /// <summary>
    /// Sets $ref.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithRef(in Corvus.Json.JsonUriReference value)
    {
        return this.SetProperty(JsonPropertyNames.Ref, value);
    }

    /// <summary>
    /// Sets required.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithRequired(in Corvus.Json.JsonSchema.Draft202012.Validation.StringArray value)
    {
        return this.SetProperty(JsonPropertyNames.Required, value);
    }

    /// <summary>
    /// Sets $schema.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithSchemaValue(in Corvus.Json.JsonUri value)
    {
        return this.SetProperty(JsonPropertyNames.SchemaValue, value);
    }

    /// <summary>
    /// Sets then.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithThen(in Corvus.Json.JsonSchema.Draft202012.Schema value)
    {
        return this.SetProperty(JsonPropertyNames.Then, value);
    }

    /// <summary>
    /// Sets title.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithTitle(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(JsonPropertyNames.Title, value);
    }

    /// <summary>
    /// Sets type.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithType(in Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity value)
    {
        return this.SetProperty(JsonPropertyNames.Type, value);
    }

    /// <summary>
    /// Sets unevaluatedItems.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithUnevaluatedItems(in Corvus.Json.JsonSchema.Draft202012.Schema value)
    {
        return this.SetProperty(JsonPropertyNames.UnevaluatedItems, value);
    }

    /// <summary>
    /// Sets unevaluatedProperties.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithUnevaluatedProperties(in Corvus.Json.JsonSchema.Draft202012.Schema value)
    {
        return this.SetProperty(JsonPropertyNames.UnevaluatedProperties, value);
    }

    /// <summary>
    /// Sets uniqueItems.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithUniqueItems(in Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity value)
    {
        return this.SetProperty(JsonPropertyNames.UniqueItems, value);
    }

    /// <summary>
    /// Sets $vocabulary.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithVocabulary(in Corvus.Json.JsonSchema.Draft202012.Core.VocabularyEntity value)
    {
        return this.SetProperty(JsonPropertyNames.Vocabulary, value);
    }

    /// <summary>
    /// Sets writeOnly.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Schema WithWriteOnly(in Corvus.Json.JsonSchema.Draft202012.MetaData.WriteOnlyEntity value)
    {
        return this.SetProperty(JsonPropertyNames.WriteOnly, value);
    }

    private static ValidationContext __CorvusValidateDefinitions(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateDependencies(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateRecursiveAnchor(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft202012.Core.AnchorString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateRecursiveRef(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonUriReference>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(JsonPropertyNames.DefinitionsUtf8))
            {
                propertyValidator = __CorvusValidateDefinitions;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.DependenciesUtf8))
            {
                propertyValidator = __CorvusValidateDependencies;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.RecursiveAnchorUtf8))
            {
                propertyValidator = __CorvusValidateRecursiveAnchor;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.RecursiveRefUtf8))
            {
                propertyValidator = __CorvusValidateRecursiveRef;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(JsonPropertyNames.Definitions))
            {
                propertyValidator = __CorvusValidateDefinitions;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.Dependencies))
            {
                propertyValidator = __CorvusValidateDependencies;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.RecursiveAnchor))
            {
                propertyValidator = __CorvusValidateRecursiveAnchor;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.RecursiveRef))
            {
                propertyValidator = __CorvusValidateRecursiveRef;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}