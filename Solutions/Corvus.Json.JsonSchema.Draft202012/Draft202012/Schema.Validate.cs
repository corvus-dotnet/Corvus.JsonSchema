//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace Corvus.Json.JsonSchema.Draft202012;

/// <summary>
/// Core and Validation specifications meta-schema
/// </summary>
public readonly partial struct Schema
{
    /// <inheritdoc/>
    public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
    {
        ValidationContext result = validationContext;
        if (level > ValidationLevel.Flag)
        {
            result = result.UsingResults();
        }

        if (level > ValidationLevel.Basic)
        {
            result = result.UsingStack();
            result = result.PushSchemaLocation("https://json-schema.org/draft/2020-12/schema");
        }

        JsonValueKind valueKind = this.ValueKind;
        result = CorvusValidation.TypeValidationHandler(valueKind, result, level);
        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }

        result = CorvusValidation.CompositionAllOfValidationHandler(this, result, level);
        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }

        result = CorvusValidation.ObjectValidationHandler(this, valueKind, result, level);
        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }

        if (level > ValidationLevel.Basic)
        {
            result = result.PopLocation();
        }

        return result;
    }

    /// <summary>
    /// Validation constants for the type.
    /// </summary>
    public static partial class CorvusValidation
    {
        /// <summary>
        /// Core type validation.
        /// </summary>
        /// <param name="valueKind">The <see cref="JsonValueKind" /> of the value to validate.</param>
        /// <param name="validationContext">The current validation context.</param>
        /// <param name="level">The current validation level.</param>
        /// <returns>The resulting validation context after validation.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static ValidationContext TypeValidationHandler(
            JsonValueKind valueKind,
            in ValidationContext validationContext,
            ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext;
            bool isValid = false;
            ValidationContext localResultObject = Corvus.Json.ValidateWithoutCoreType.TypeObject(valueKind, ValidationContext.ValidContext, level);
            if (level == ValidationLevel.Flag && localResultObject.IsValid)
            {
                return validationContext;
            }

            if (localResultObject.IsValid)
            {
                isValid = true;
            }

            ValidationContext localResultBoolean = Corvus.Json.ValidateWithoutCoreType.TypeBoolean(valueKind, ValidationContext.ValidContext, level);
            if (level == ValidationLevel.Flag && localResultBoolean.IsValid)
            {
                return validationContext;
            }

            if (localResultBoolean.IsValid)
            {
                isValid = true;
            }

            return result.MergeResults(
                isValid,
                level,
                localResultObject,
                localResultBoolean);
        }

        /// <summary>
        /// Composition validation (all-of).
        /// </summary>
        /// <param name="value">The value to validate.</param>
        /// <param name="validationContext">The current validation context.</param>
        /// <param name="level">The current validation level.</param>
        /// <returns>The resulting validation context after validation.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static ValidationContext CompositionAllOfValidationHandler(
            in Schema value,
            in ValidationContext validationContext,
            ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext;
            ValidationContext childContextBase = result;
            ValidationContext allOfResult0 = childContextBase.CreateChildContext();
            if (level > ValidationLevel.Basic)
            {
                allOfResult0 = allOfResult0.PushValidationLocationReducedPathModifier(new("#/allOf/0/$ref"));
            }

            allOfResult0 = value.As<Corvus.Json.JsonSchema.Draft202012.Core>().Validate(allOfResult0, level);
            if (!allOfResult0.IsValid)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation - allOf failed to validate against the schema.");
                }
                else
                {
                    result = result.MergeChildContext(allOfResult0, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(allOfResult0, level >= ValidationLevel.Detailed);
            }

            ValidationContext allOfResult1 = childContextBase.CreateChildContext();
            if (level > ValidationLevel.Basic)
            {
                allOfResult1 = allOfResult1.PushValidationLocationReducedPathModifier(new("#/allOf/1/$ref"));
            }

            allOfResult1 = value.As<Corvus.Json.JsonSchema.Draft202012.Applicator>().Validate(allOfResult1, level);
            if (!allOfResult1.IsValid)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult1, true).WithResult(isValid: false, "Validation - allOf failed to validate against the schema.");
                }
                else
                {
                    result = result.MergeChildContext(allOfResult1, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(allOfResult1, level >= ValidationLevel.Detailed);
            }

            ValidationContext allOfResult2 = childContextBase.CreateChildContext();
            if (level > ValidationLevel.Basic)
            {
                allOfResult2 = allOfResult2.PushValidationLocationReducedPathModifier(new("#/allOf/2/$ref"));
            }

            allOfResult2 = value.As<Corvus.Json.JsonSchema.Draft202012.Unevaluated>().Validate(allOfResult2, level);
            if (!allOfResult2.IsValid)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult2, true).WithResult(isValid: false, "Validation - allOf failed to validate against the schema.");
                }
                else
                {
                    result = result.MergeChildContext(allOfResult2, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(allOfResult2, level >= ValidationLevel.Detailed);
            }

            ValidationContext allOfResult3 = childContextBase.CreateChildContext();
            if (level > ValidationLevel.Basic)
            {
                allOfResult3 = allOfResult3.PushValidationLocationReducedPathModifier(new("#/allOf/3/$ref"));
            }

            allOfResult3 = value.As<Corvus.Json.JsonSchema.Draft202012.Validation>().Validate(allOfResult3, level);
            if (!allOfResult3.IsValid)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult3, true).WithResult(isValid: false, "Validation - allOf failed to validate against the schema.");
                }
                else
                {
                    result = result.MergeChildContext(allOfResult3, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(allOfResult3, level >= ValidationLevel.Detailed);
            }

            ValidationContext allOfResult4 = childContextBase.CreateChildContext();
            if (level > ValidationLevel.Basic)
            {
                allOfResult4 = allOfResult4.PushValidationLocationReducedPathModifier(new("#/allOf/4/$ref"));
            }

            allOfResult4 = value.As<Corvus.Json.JsonSchema.Draft202012.MetaData>().Validate(allOfResult4, level);
            if (!allOfResult4.IsValid)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult4, true).WithResult(isValid: false, "Validation - allOf failed to validate against the schema.");
                }
                else
                {
                    result = result.MergeChildContext(allOfResult4, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(allOfResult4, level >= ValidationLevel.Detailed);
            }

            ValidationContext allOfResult5 = childContextBase.CreateChildContext();
            if (level > ValidationLevel.Basic)
            {
                allOfResult5 = allOfResult5.PushValidationLocationReducedPathModifier(new("#/allOf/5/$ref"));
            }

            allOfResult5 = value.As<Corvus.Json.JsonSchema.Draft202012.FormatAnnotation>().Validate(allOfResult5, level);
            if (!allOfResult5.IsValid)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult5, true).WithResult(isValid: false, "Validation - allOf failed to validate against the schema.");
                }
                else
                {
                    result = result.MergeChildContext(allOfResult5, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(allOfResult5, level >= ValidationLevel.Detailed);
            }

            ValidationContext allOfResult6 = childContextBase.CreateChildContext();
            if (level > ValidationLevel.Basic)
            {
                allOfResult6 = allOfResult6.PushValidationLocationReducedPathModifier(new("#/allOf/6/$ref"));
            }

            allOfResult6 = value.As<Corvus.Json.JsonSchema.Draft202012.Content>().Validate(allOfResult6, level);
            if (!allOfResult6.IsValid)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult6, true).WithResult(isValid: false, "Validation - allOf failed to validate against the schema.");
                }
                else
                {
                    result = result.MergeChildContext(allOfResult6, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(allOfResult6, level >= ValidationLevel.Detailed);
            }

            return result;
        }

        /// <summary>
        /// Object validation.
        /// </summary>
        /// <param name="value">The value to validate.</param>
        /// <param name="valueKind">The <see cref="JsonValueKind" /> of the value to validate.</param>
        /// <param name="validationContext">The current validation context.</param>
        /// <param name="level">The current validation level.</param>
        /// <returns>The resulting validation context after validation.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static ValidationContext ObjectValidationHandler(
            in Schema value,
            JsonValueKind valueKind,
            in ValidationContext validationContext,
            ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext;
            if (valueKind != JsonValueKind.Object)
            {
                if (level == ValidationLevel.Verbose)
                {
                    ValidationContext ignoredResult = validationContext;
                    ignoredResult = ignoredResult.PushValidationLocationProperty("properties");
                    ignoredResult = ignoredResult.WithResult(isValid: true, "Validation properties - ignored because the value is not an object");
                    ignoredResult = ignoredResult.PopLocation();
                    return ignoredResult;
                }

                return validationContext;
            }

            int propertyCount = 0;
            foreach (JsonObjectProperty property in value.EnumerateObject())
            {
                if (property.NameEquals(JsonPropertyNames.RecursiveAnchorUtf8, JsonPropertyNames.RecursiveAnchor))
                {
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/$recursiveAnchor/$ref"), JsonPropertyNames.RecursiveAnchor);
                    }

                    ValidationContext propertyResult = property.Value.As<Corvus.Json.JsonSchema.Draft202012.Core.AnchorString>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.RecursiveRefUtf8, JsonPropertyNames.RecursiveRef))
                {
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/$recursiveRef/$ref"), JsonPropertyNames.RecursiveRef);
                    }

                    ValidationContext propertyResult = property.Value.As<Corvus.Json.JsonUriReference>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.DefinitionsUtf8, JsonPropertyNames.Definitions))
                {
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/definitions"), JsonPropertyNames.Definitions);
                    }

                    ValidationContext propertyResult = property.Value.As<Corvus.Json.JsonSchema.Draft202012.Schema.DefinitionsEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.DependenciesUtf8, JsonPropertyNames.Dependencies))
                {
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/dependencies"), JsonPropertyNames.Dependencies);
                    }

                    ValidationContext propertyResult = property.Value.As<Corvus.Json.JsonSchema.Draft202012.Schema.DependenciesEntity>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }

                propertyCount++;
            }

            return result;
        }
    }
}
