//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Buffers;
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.Draft202012;

/// <summary>
/// Core and Validation specifications meta-schema
/// </summary>
[System.Text.Json.Serialization.JsonConverter(typeof(Corvus.Json.Internal.JsonValueConverter<Schema>))]
public readonly partial struct Schema

{
    private readonly Backing backing;
    private readonly JsonElement jsonElementBacking;
    private readonly bool boolBacking;
    private readonly ImmutableList<JsonObjectProperty> objectBacking;

    /// <summary>
    /// Initializes a new instance of the <see cref="Schema"/> struct.
    /// </summary>
    public Schema()
    {
        this.jsonElementBacking = default;
        this.backing = Backing.JsonElement;
        this.boolBacking = default;
        this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="Schema"/> struct.
    /// </summary>
    /// <param name="value">The value from which to construct the instance.</param>
    public Schema(in JsonElement value)
    {
        this.jsonElementBacking = value;
        this.backing = Backing.JsonElement;
        this.boolBacking = default;
        this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="Schema"/> struct.
    /// </summary>
    /// <param name="value">The value from which to construct the instance.</param>
    public Schema(bool value)
    {
        this.backing = Backing.Bool;
        this.jsonElementBacking = default;
        this.boolBacking = value;
        this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="Schema"/> struct.
    /// </summary>
    /// <param name="value">The value from which to construct the instance.</param>
    public Schema(ImmutableList<JsonObjectProperty> value)
    {
        this.backing = Backing.Object;
        this.jsonElementBacking = default;
        this.boolBacking = default;
        this.objectBacking = value;
    }

    /// <summary>
    /// Gets the schema location from which this type was generated.
    /// </summary>
    public static string SchemaLocation { get; } = "https://json-schema.org/draft/2020-12/schema";

    /// <summary>
    /// Gets a Null instance.
    /// </summary>
    public static Schema Null { get; } = new(JsonValueHelpers.NullElement);

    /// <summary>
    /// Gets an Undefined instance.
    /// </summary>
    public static Schema Undefined { get; }

    /// <summary>
    /// Gets the default instance.
    /// </summary>
    public static Schema DefaultInstance { get; }

    /// <inheritdoc/>
    public JsonAny AsAny
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            if ((this.backing & Backing.Bool) != 0)
            {
                return new(this.boolBacking);
            }

            if ((this.backing & Backing.Object) != 0)
            {
                return new(this.objectBacking);
            }

            if ((this.backing & Backing.Null) != 0)
            {
                return JsonAny.Null;
            }

            return JsonAny.Undefined;
        }
    }

    /// <inheritdoc/>
    public JsonElement AsJsonElement
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return this.jsonElementBacking;
            }

            if ((this.backing & Backing.Bool) != 0)
            {
                return JsonValueHelpers.BoolToJsonElement(this.boolBacking);
            }

            if ((this.backing & Backing.Object) != 0)
            {
                return JsonValueHelpers.ObjectToJsonElement(this.objectBacking);
            }

            if ((this.backing & Backing.Null) != 0)
            {
                return JsonValueHelpers.NullElement;
            }

            return default;
        }
    }

    /// <inheritdoc/>
    JsonString IJsonValue.AsString
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            throw new InvalidOperationException();
        }
    }

    /// <inheritdoc/>
    public JsonBoolean AsBoolean
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            if ((this.backing & Backing.Bool) != 0)
            {
                return new(this.boolBacking);
            }

            throw new InvalidOperationException();
        }
    }

    /// <inheritdoc/>
    JsonNumber IJsonValue.AsNumber
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            throw new InvalidOperationException();
        }
    }

    /// <inheritdoc/>
    public JsonObject AsObject
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            if ((this.backing & Backing.Object) != 0)
            {
                return new(this.objectBacking);
            }

            throw new InvalidOperationException();
        }
    }

    /// <inheritdoc/>
    JsonArray IJsonValue.AsArray
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            throw new InvalidOperationException();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Corvus.Json.JsonSchema.Draft202012.Applicator" />.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Applicator AsApplicator
    {
        get
        {
            return this.As<Corvus.Json.JsonSchema.Draft202012.Applicator>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Corvus.Json.JsonSchema.Draft202012.Applicator" />.
    /// </summary>
    public bool IsApplicator
    {
        get
        {
            return this.As<Corvus.Json.JsonSchema.Draft202012.Applicator>().IsValid();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Corvus.Json.JsonSchema.Draft202012.Content" />.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Content AsContent
    {
        get
        {
            return this.As<Corvus.Json.JsonSchema.Draft202012.Content>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Corvus.Json.JsonSchema.Draft202012.Content" />.
    /// </summary>
    public bool IsContent
    {
        get
        {
            return this.As<Corvus.Json.JsonSchema.Draft202012.Content>().IsValid();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Corvus.Json.JsonSchema.Draft202012.Core" />.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Core AsCore
    {
        get
        {
            return this.As<Corvus.Json.JsonSchema.Draft202012.Core>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Corvus.Json.JsonSchema.Draft202012.Core" />.
    /// </summary>
    public bool IsCore
    {
        get
        {
            return this.As<Corvus.Json.JsonSchema.Draft202012.Core>().IsValid();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Corvus.Json.JsonSchema.Draft202012.FormatAnnotation" />.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.FormatAnnotation AsFormatAnnotation
    {
        get
        {
            return this.As<Corvus.Json.JsonSchema.Draft202012.FormatAnnotation>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Corvus.Json.JsonSchema.Draft202012.FormatAnnotation" />.
    /// </summary>
    public bool IsFormatAnnotation
    {
        get
        {
            return this.As<Corvus.Json.JsonSchema.Draft202012.FormatAnnotation>().IsValid();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Corvus.Json.JsonSchema.Draft202012.MetaData" />.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.MetaData AsMetaData
    {
        get
        {
            return this.As<Corvus.Json.JsonSchema.Draft202012.MetaData>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Corvus.Json.JsonSchema.Draft202012.MetaData" />.
    /// </summary>
    public bool IsMetaData
    {
        get
        {
            return this.As<Corvus.Json.JsonSchema.Draft202012.MetaData>().IsValid();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Corvus.Json.JsonSchema.Draft202012.Unevaluated" />.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Unevaluated AsUnevaluated
    {
        get
        {
            return this.As<Corvus.Json.JsonSchema.Draft202012.Unevaluated>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Corvus.Json.JsonSchema.Draft202012.Unevaluated" />.
    /// </summary>
    public bool IsUnevaluated
    {
        get
        {
            return this.As<Corvus.Json.JsonSchema.Draft202012.Unevaluated>().IsValid();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="Corvus.Json.JsonSchema.Draft202012.Validation" />.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation AsValidation
    {
        get
        {
            return this.As<Corvus.Json.JsonSchema.Draft202012.Validation>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="Corvus.Json.JsonSchema.Draft202012.Validation" />.
    /// </summary>
    public bool IsValidation
    {
        get
        {
            return this.As<Corvus.Json.JsonSchema.Draft202012.Validation>().IsValid();
        }
    }

    /// <inheritdoc/>
    public bool HasJsonElementBacking
    {
        get
        {
            return (this.backing & Backing.JsonElement) != 0;
        }
    }

    /// <inheritdoc/>
    public bool HasDotnetBacking
    {
        get
        {
            return (this.backing & Backing.Dotnet) != 0;
        }
    }

    /// <inheritdoc/>
    public JsonValueKind ValueKind
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return this.jsonElementBacking.ValueKind;
            }

            if ((this.backing & Backing.Bool) != 0)
            {
                return this.boolBacking ? JsonValueKind.True : JsonValueKind.False;
            }

            if ((this.backing & Backing.Object) != 0)
            {
                return JsonValueKind.Object;
            }

            return JsonValueKind.Undefined;
        }
    }

    /// <summary>
    /// Conversion from JsonAny.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator Schema(JsonAny value)
    {
        return value.As<Schema>();
    }

    /// <summary>
    /// Conversion to JsonAny.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator JsonAny(Schema value)
    {
        return value.AsAny;
    }

    /// <summary>
    /// Conversion to <see cref="Corvus.Json.JsonSchema.Draft202012.Core"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator Corvus.Json.JsonSchema.Draft202012.Core(Schema value)
    {
        return value.As<Corvus.Json.JsonSchema.Draft202012.Core>();
    }

    /// <summary>
    /// Conversion from <see cref="Corvus.Json.JsonSchema.Draft202012.Core"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Schema(Corvus.Json.JsonSchema.Draft202012.Core value)
    {
        return value.As<Schema>();
    }

    /// <summary>
    /// Conversion to <see cref="Corvus.Json.JsonSchema.Draft202012.Applicator"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator Corvus.Json.JsonSchema.Draft202012.Applicator(Schema value)
    {
        return value.As<Corvus.Json.JsonSchema.Draft202012.Applicator>();
    }

    /// <summary>
    /// Conversion from <see cref="Corvus.Json.JsonSchema.Draft202012.Applicator"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Schema(Corvus.Json.JsonSchema.Draft202012.Applicator value)
    {
        return value.As<Schema>();
    }

    /// <summary>
    /// Conversion to <see cref="Corvus.Json.JsonSchema.Draft202012.Unevaluated"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator Corvus.Json.JsonSchema.Draft202012.Unevaluated(Schema value)
    {
        return value.As<Corvus.Json.JsonSchema.Draft202012.Unevaluated>();
    }

    /// <summary>
    /// Conversion from <see cref="Corvus.Json.JsonSchema.Draft202012.Unevaluated"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Schema(Corvus.Json.JsonSchema.Draft202012.Unevaluated value)
    {
        return value.As<Schema>();
    }

    /// <summary>
    /// Conversion to <see cref="Corvus.Json.JsonSchema.Draft202012.Validation"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator Corvus.Json.JsonSchema.Draft202012.Validation(Schema value)
    {
        return value.As<Corvus.Json.JsonSchema.Draft202012.Validation>();
    }

    /// <summary>
    /// Conversion from <see cref="Corvus.Json.JsonSchema.Draft202012.Validation"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Schema(Corvus.Json.JsonSchema.Draft202012.Validation value)
    {
        return value.As<Schema>();
    }

    /// <summary>
    /// Conversion to <see cref="Corvus.Json.JsonSchema.Draft202012.MetaData"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator Corvus.Json.JsonSchema.Draft202012.MetaData(Schema value)
    {
        return value.As<Corvus.Json.JsonSchema.Draft202012.MetaData>();
    }

    /// <summary>
    /// Conversion from <see cref="Corvus.Json.JsonSchema.Draft202012.MetaData"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Schema(Corvus.Json.JsonSchema.Draft202012.MetaData value)
    {
        return value.As<Schema>();
    }

    /// <summary>
    /// Conversion to <see cref="Corvus.Json.JsonSchema.Draft202012.FormatAnnotation"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator Corvus.Json.JsonSchema.Draft202012.FormatAnnotation(Schema value)
    {
        return value.As<Corvus.Json.JsonSchema.Draft202012.FormatAnnotation>();
    }

    /// <summary>
    /// Conversion from <see cref="Corvus.Json.JsonSchema.Draft202012.FormatAnnotation"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Schema(Corvus.Json.JsonSchema.Draft202012.FormatAnnotation value)
    {
        return value.As<Schema>();
    }

    /// <summary>
    /// Conversion to <see cref="Corvus.Json.JsonSchema.Draft202012.Content"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator Corvus.Json.JsonSchema.Draft202012.Content(Schema value)
    {
        return value.As<Corvus.Json.JsonSchema.Draft202012.Content>();
    }

    /// <summary>
    /// Conversion from <see cref="Corvus.Json.JsonSchema.Draft202012.Content"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator Schema(Corvus.Json.JsonSchema.Draft202012.Content value)
    {
        return value.As<Schema>();
    }

    /// <summary>
    /// Operator ==.
    /// </summary>
    /// <param name="left">The lhs of the operator.</param>
    /// <param name="right">The rhs of the operator.</param>
    /// <returns>
    /// <c>True</c> if the values are equal.
    /// </returns>
    public static bool operator ==(in Schema left, in Schema right)
    {
        return left.Equals(right);
    }

    /// <summary>
    /// Operator !=.
    /// </summary>
    /// <param name="left">The lhs of the operator.</param>
    /// <param name="right">The rhs of the operator.</param>
    /// <returns>
    /// <c>True</c> if the values are not equal.
    /// </returns>
    public static bool operator !=(in Schema left, in Schema right)
    {
        return !left.Equals(right);
    }

    /// <summary>
    /// Gets an instance of the JSON value from a <see cref="JsonElement"/> value.
    /// </summary>
    /// <param name="value">The <see cref="JsonElement"/> value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the <see cref="JsonElement"/>.</returns>
    /// <remarks>The returned value will have a <see cref = "IJsonValue.ValueKind"/> of <see cref = "JsonValueKind.Undefined"/> if the
    /// value cannot be constructed from the given instance (e.g. because they have an incompatible .NET backing type).
    /// </remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Schema FromJson(in JsonElement value)
    {
        return new(value);
    }

    /// <summary>
    /// Gets an instance of the JSON value from a <see cref="JsonAny"/> value.
    /// </summary>
    /// <param name="value">The <see cref="JsonAny"/> value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the <see cref="JsonAny"/> value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Schema FromAny(in JsonAny value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            JsonValueKind.Object => new(value.AsObject.AsPropertyBacking()),
            JsonValueKind.Null => Null,
            _ => Undefined,
        };
    }

    /// <summary>
    /// Gets an instance of the JSON value from the provided value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the provided value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Schema FromBoolean<TValue>(in TValue value)
        where TValue : struct, IJsonBoolean<TValue>
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            JsonValueKind.Null => Null,
            _ => Undefined,
        };
    }

#if NET8_0_OR_GREATER
    /// <summary>
    /// Gets an instance of the JSON value from the provided value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the provided value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static Schema IJsonValue<Schema>.FromString<TValue>(in TValue value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return Undefined;
    }
#endif

#if NET8_0_OR_GREATER
    /// <summary>
    /// Gets an instance of the JSON value from the provided value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the provided value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static Schema IJsonValue<Schema>.FromNumber<TValue>(in TValue value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return Undefined;
    }
#endif

    /// <summary>
    /// Gets an instance of the JSON value from the provided value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the provided value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Schema FromObject<TValue>(in TValue value)
        where TValue : struct, IJsonObject<TValue>
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Object => new(value.AsObject.AsPropertyBacking()),
            JsonValueKind.Null => Null,
            _ => Undefined,
        };
    }

#if NET8_0_OR_GREATER
    /// <summary>
    /// Gets an instance of the JSON value from the provided value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the provided value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static Schema IJsonValue<Schema>.FromArray<TValue>(in TValue value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return Undefined;
    }
#endif

    /// <summary>
    /// Parses the Schema.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    public static Schema Parse(string source, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(source, options);
        return new(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses the Schema.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    public static Schema Parse(Stream source, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(source, options);
        return new(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses the Schema.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    public static Schema Parse(ReadOnlyMemory<byte> source, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(source, options);
        return new(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses the Schema.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    public static Schema Parse(ReadOnlyMemory<char> source, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(source, options);
        return new(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses the Schema.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    public static Schema Parse(ReadOnlySequence<byte> source, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(source, options);
        return new(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses the Schema.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    public static Schema ParseValue(ReadOnlySpan<char> source)
    {
#if NET8_0_OR_GREATER
        return IJsonValue<Schema>.ParseValue(source);
#else
        return JsonValueHelpers.ParseValue<Schema>(source);
#endif
    }

    /// <summary>
    /// Parses the Schema.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    public static Schema ParseValue(ReadOnlySpan<byte> source)
    {
#if NET8_0_OR_GREATER
        return IJsonValue<Schema>.ParseValue(source);
#else
        return JsonValueHelpers.ParseValue<Schema>(source);
#endif
    }

    /// <summary>
    /// Parses the Schema.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    public static Schema ParseValue(ref Utf8JsonReader source)
    {
#if NET8_0_OR_GREATER
        return IJsonValue<Schema>.ParseValue(ref source);
#else
        return JsonValueHelpers.ParseValue<Schema>(ref source);
#endif
    }

    /// <summary>
    /// Gets the value as an instance of the target value.
    /// </summary>
    /// <typeparam name="TTarget">The type of the target.</typeparam>
    /// <returns>An instance of the target type.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public TTarget As<TTarget>()
        where TTarget : struct, IJsonValue<TTarget>
    {
#if NET8_0_OR_GREATER
        if ((this.backing & Backing.JsonElement) != 0)
        {
            return TTarget.FromJson(this.jsonElementBacking);
        }

        if ((this.backing & Backing.Bool) != 0)
        {
            return TTarget.FromBoolean(this);
        }

        if ((this.backing & Backing.Object) != 0)
        {
            return TTarget.FromObject(this);
        }

        if ((this.backing & Backing.Null) != 0)
        {
            return TTarget.Null;
        }

        return TTarget.Undefined;
#else
        return this.As<Schema, TTarget>();
#endif
    }

    /// <inheritdoc/>
    public override bool Equals(object? obj)
    {
        return
            (obj is IJsonValue jv && this.Equals(jv.AsAny)) ||
            (obj is null && this.IsNull());
    }

    /// <inheritdoc/>
    public bool Equals<T>(in T other)
        where T : struct, IJsonValue<T>
    {
        return JsonValueHelpers.CompareValues(this, other);
    }

    /// <summary>
    /// Equality comparison.
    /// </summary>
    /// <param name="other">The other item with which to compare.</param>
    /// <returns><see langword="true"/> if the values were equal.</returns>
    public bool Equals(in Schema other)
    {
        return JsonValueHelpers.CompareValues(this, other);
    }

    /// <inheritdoc/>
    public void WriteTo(Utf8JsonWriter writer)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
            {
                this.jsonElementBacking.WriteTo(writer);
            }

            return;
        }

        if ((this.backing & Backing.Bool) != 0)
        {
            writer.WriteBooleanValue(this.boolBacking);

            return;
        }

        if ((this.backing & Backing.Object) != 0)
        {
            JsonValueHelpers.WriteProperties(this.objectBacking, writer);

            return;
        }

        if ((this.backing & Backing.Null) != 0)
        {
            writer.WriteNullValue();

            return;
        }
    }

    /// <inheritdoc/>
    public override int GetHashCode()
    {
        return JsonValueHelpers.GetHashCode(this);
    }

    /// <inheritdoc/>
    public override string ToString()
    {
        return this.Serialize();
    }

    /// <summary>
    /// Matches the value against the composed values, and returns the result of calling the provided match function for the first match found.
    /// </summary>
    /// <typeparam name="TIn">The immutable context to pass in to the match function.</typeparam>
    /// <typeparam name="TOut">The result of calling the match function.</typeparam>
    /// <param name="context">The context to pass to the match function.</param>
    /// <param name="matchCorvusJsonJsonSchemaDraft202012Core">Match a <see cref="Corvus.Json.JsonSchema.Draft202012.Core"/>.</param>
    /// <param name="matchCorvusJsonJsonSchemaDraft202012Applicator">Match a <see cref="Corvus.Json.JsonSchema.Draft202012.Applicator"/>.</param>
    /// <param name="matchCorvusJsonJsonSchemaDraft202012Unevaluated">Match a <see cref="Corvus.Json.JsonSchema.Draft202012.Unevaluated"/>.</param>
    /// <param name="matchCorvusJsonJsonSchemaDraft202012Validation">Match a <see cref="Corvus.Json.JsonSchema.Draft202012.Validation"/>.</param>
    /// <param name="matchCorvusJsonJsonSchemaDraft202012MetaData">Match a <see cref="Corvus.Json.JsonSchema.Draft202012.MetaData"/>.</param>
    /// <param name="matchCorvusJsonJsonSchemaDraft202012FormatAnnotation">Match a <see cref="Corvus.Json.JsonSchema.Draft202012.FormatAnnotation"/>.</param>
    /// <param name="matchCorvusJsonJsonSchemaDraft202012Content">Match a <see cref="Corvus.Json.JsonSchema.Draft202012.Content"/>.</param>
    /// <param name="defaultMatch">Match any other value.</param>
    /// <returns>An instance of the value returned by the match function.</returns>
    public TOut Match<TIn, TOut>(
        in TIn context,
        Matcher<Corvus.Json.JsonSchema.Draft202012.Core, TIn, TOut> matchCorvusJsonJsonSchemaDraft202012Core,
        Matcher<Corvus.Json.JsonSchema.Draft202012.Applicator, TIn, TOut> matchCorvusJsonJsonSchemaDraft202012Applicator,
        Matcher<Corvus.Json.JsonSchema.Draft202012.Unevaluated, TIn, TOut> matchCorvusJsonJsonSchemaDraft202012Unevaluated,
        Matcher<Corvus.Json.JsonSchema.Draft202012.Validation, TIn, TOut> matchCorvusJsonJsonSchemaDraft202012Validation,
        Matcher<Corvus.Json.JsonSchema.Draft202012.MetaData, TIn, TOut> matchCorvusJsonJsonSchemaDraft202012MetaData,
        Matcher<Corvus.Json.JsonSchema.Draft202012.FormatAnnotation, TIn, TOut> matchCorvusJsonJsonSchemaDraft202012FormatAnnotation,
        Matcher<Corvus.Json.JsonSchema.Draft202012.Content, TIn, TOut> matchCorvusJsonJsonSchemaDraft202012Content,
        Matcher<Schema, TIn, TOut> defaultMatch)
    {
        Corvus.Json.JsonSchema.Draft202012.Core matchCorvusJsonJsonSchemaDraft202012CoreValue = this.As<Corvus.Json.JsonSchema.Draft202012.Core>();
        if (matchCorvusJsonJsonSchemaDraft202012CoreValue.IsValid())
        {
            return matchCorvusJsonJsonSchemaDraft202012Core(matchCorvusJsonJsonSchemaDraft202012CoreValue, context);
        }

        Corvus.Json.JsonSchema.Draft202012.Applicator matchCorvusJsonJsonSchemaDraft202012ApplicatorValue = this.As<Corvus.Json.JsonSchema.Draft202012.Applicator>();
        if (matchCorvusJsonJsonSchemaDraft202012ApplicatorValue.IsValid())
        {
            return matchCorvusJsonJsonSchemaDraft202012Applicator(matchCorvusJsonJsonSchemaDraft202012ApplicatorValue, context);
        }

        Corvus.Json.JsonSchema.Draft202012.Unevaluated matchCorvusJsonJsonSchemaDraft202012UnevaluatedValue = this.As<Corvus.Json.JsonSchema.Draft202012.Unevaluated>();
        if (matchCorvusJsonJsonSchemaDraft202012UnevaluatedValue.IsValid())
        {
            return matchCorvusJsonJsonSchemaDraft202012Unevaluated(matchCorvusJsonJsonSchemaDraft202012UnevaluatedValue, context);
        }

        Corvus.Json.JsonSchema.Draft202012.Validation matchCorvusJsonJsonSchemaDraft202012ValidationValue = this.As<Corvus.Json.JsonSchema.Draft202012.Validation>();
        if (matchCorvusJsonJsonSchemaDraft202012ValidationValue.IsValid())
        {
            return matchCorvusJsonJsonSchemaDraft202012Validation(matchCorvusJsonJsonSchemaDraft202012ValidationValue, context);
        }

        Corvus.Json.JsonSchema.Draft202012.MetaData matchCorvusJsonJsonSchemaDraft202012MetaDataValue = this.As<Corvus.Json.JsonSchema.Draft202012.MetaData>();
        if (matchCorvusJsonJsonSchemaDraft202012MetaDataValue.IsValid())
        {
            return matchCorvusJsonJsonSchemaDraft202012MetaData(matchCorvusJsonJsonSchemaDraft202012MetaDataValue, context);
        }

        Corvus.Json.JsonSchema.Draft202012.FormatAnnotation matchCorvusJsonJsonSchemaDraft202012FormatAnnotationValue = this.As<Corvus.Json.JsonSchema.Draft202012.FormatAnnotation>();
        if (matchCorvusJsonJsonSchemaDraft202012FormatAnnotationValue.IsValid())
        {
            return matchCorvusJsonJsonSchemaDraft202012FormatAnnotation(matchCorvusJsonJsonSchemaDraft202012FormatAnnotationValue, context);
        }

        Corvus.Json.JsonSchema.Draft202012.Content matchCorvusJsonJsonSchemaDraft202012ContentValue = this.As<Corvus.Json.JsonSchema.Draft202012.Content>();
        if (matchCorvusJsonJsonSchemaDraft202012ContentValue.IsValid())
        {
            return matchCorvusJsonJsonSchemaDraft202012Content(matchCorvusJsonJsonSchemaDraft202012ContentValue, context);
        }

        return defaultMatch(this, context);
    }

    /// <summary>
    /// Matches the value against the composed values, and returns the result of calling the provided match function for the first match found.
    /// </summary>
    /// <typeparam name="TOut">The result of calling the match function.</typeparam>
    /// <param name="matchCorvusJsonJsonSchemaDraft202012Core">Match a <see cref="Corvus.Json.JsonSchema.Draft202012.Core"/>.</param>
    /// <param name="matchCorvusJsonJsonSchemaDraft202012Applicator">Match a <see cref="Corvus.Json.JsonSchema.Draft202012.Applicator"/>.</param>
    /// <param name="matchCorvusJsonJsonSchemaDraft202012Unevaluated">Match a <see cref="Corvus.Json.JsonSchema.Draft202012.Unevaluated"/>.</param>
    /// <param name="matchCorvusJsonJsonSchemaDraft202012Validation">Match a <see cref="Corvus.Json.JsonSchema.Draft202012.Validation"/>.</param>
    /// <param name="matchCorvusJsonJsonSchemaDraft202012MetaData">Match a <see cref="Corvus.Json.JsonSchema.Draft202012.MetaData"/>.</param>
    /// <param name="matchCorvusJsonJsonSchemaDraft202012FormatAnnotation">Match a <see cref="Corvus.Json.JsonSchema.Draft202012.FormatAnnotation"/>.</param>
    /// <param name="matchCorvusJsonJsonSchemaDraft202012Content">Match a <see cref="Corvus.Json.JsonSchema.Draft202012.Content"/>.</param>
    /// <param name="defaultMatch">Match any other value.</param>
    /// <returns>An instance of the value returned by the match function.</returns>
    public TOut Match<TOut>(
        Matcher<Corvus.Json.JsonSchema.Draft202012.Core, TOut> matchCorvusJsonJsonSchemaDraft202012Core,
        Matcher<Corvus.Json.JsonSchema.Draft202012.Applicator, TOut> matchCorvusJsonJsonSchemaDraft202012Applicator,
        Matcher<Corvus.Json.JsonSchema.Draft202012.Unevaluated, TOut> matchCorvusJsonJsonSchemaDraft202012Unevaluated,
        Matcher<Corvus.Json.JsonSchema.Draft202012.Validation, TOut> matchCorvusJsonJsonSchemaDraft202012Validation,
        Matcher<Corvus.Json.JsonSchema.Draft202012.MetaData, TOut> matchCorvusJsonJsonSchemaDraft202012MetaData,
        Matcher<Corvus.Json.JsonSchema.Draft202012.FormatAnnotation, TOut> matchCorvusJsonJsonSchemaDraft202012FormatAnnotation,
        Matcher<Corvus.Json.JsonSchema.Draft202012.Content, TOut> matchCorvusJsonJsonSchemaDraft202012Content,
        Matcher<Schema, TOut> defaultMatch)
    {
        Corvus.Json.JsonSchema.Draft202012.Core matchCorvusJsonJsonSchemaDraft202012CoreValue = this.As<Corvus.Json.JsonSchema.Draft202012.Core>();
        if (matchCorvusJsonJsonSchemaDraft202012CoreValue.IsValid())
        {
            return matchCorvusJsonJsonSchemaDraft202012Core(matchCorvusJsonJsonSchemaDraft202012CoreValue);
        }

        Corvus.Json.JsonSchema.Draft202012.Applicator matchCorvusJsonJsonSchemaDraft202012ApplicatorValue = this.As<Corvus.Json.JsonSchema.Draft202012.Applicator>();
        if (matchCorvusJsonJsonSchemaDraft202012ApplicatorValue.IsValid())
        {
            return matchCorvusJsonJsonSchemaDraft202012Applicator(matchCorvusJsonJsonSchemaDraft202012ApplicatorValue);
        }

        Corvus.Json.JsonSchema.Draft202012.Unevaluated matchCorvusJsonJsonSchemaDraft202012UnevaluatedValue = this.As<Corvus.Json.JsonSchema.Draft202012.Unevaluated>();
        if (matchCorvusJsonJsonSchemaDraft202012UnevaluatedValue.IsValid())
        {
            return matchCorvusJsonJsonSchemaDraft202012Unevaluated(matchCorvusJsonJsonSchemaDraft202012UnevaluatedValue);
        }

        Corvus.Json.JsonSchema.Draft202012.Validation matchCorvusJsonJsonSchemaDraft202012ValidationValue = this.As<Corvus.Json.JsonSchema.Draft202012.Validation>();
        if (matchCorvusJsonJsonSchemaDraft202012ValidationValue.IsValid())
        {
            return matchCorvusJsonJsonSchemaDraft202012Validation(matchCorvusJsonJsonSchemaDraft202012ValidationValue);
        }

        Corvus.Json.JsonSchema.Draft202012.MetaData matchCorvusJsonJsonSchemaDraft202012MetaDataValue = this.As<Corvus.Json.JsonSchema.Draft202012.MetaData>();
        if (matchCorvusJsonJsonSchemaDraft202012MetaDataValue.IsValid())
        {
            return matchCorvusJsonJsonSchemaDraft202012MetaData(matchCorvusJsonJsonSchemaDraft202012MetaDataValue);
        }

        Corvus.Json.JsonSchema.Draft202012.FormatAnnotation matchCorvusJsonJsonSchemaDraft202012FormatAnnotationValue = this.As<Corvus.Json.JsonSchema.Draft202012.FormatAnnotation>();
        if (matchCorvusJsonJsonSchemaDraft202012FormatAnnotationValue.IsValid())
        {
            return matchCorvusJsonJsonSchemaDraft202012FormatAnnotation(matchCorvusJsonJsonSchemaDraft202012FormatAnnotationValue);
        }

        Corvus.Json.JsonSchema.Draft202012.Content matchCorvusJsonJsonSchemaDraft202012ContentValue = this.As<Corvus.Json.JsonSchema.Draft202012.Content>();
        if (matchCorvusJsonJsonSchemaDraft202012ContentValue.IsValid())
        {
            return matchCorvusJsonJsonSchemaDraft202012Content(matchCorvusJsonJsonSchemaDraft202012ContentValue);
        }

        return defaultMatch(this);
    }

    /// <summary>
    /// Gets the value as a <see cref="Corvus.Json.JsonSchema.Draft202012.Applicator" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsApplicator(out Corvus.Json.JsonSchema.Draft202012.Applicator result)
    {
        result = this.As<Corvus.Json.JsonSchema.Draft202012.Applicator>();
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref="Corvus.Json.JsonSchema.Draft202012.Content" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsContent(out Corvus.Json.JsonSchema.Draft202012.Content result)
    {
        result = this.As<Corvus.Json.JsonSchema.Draft202012.Content>();
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref="Corvus.Json.JsonSchema.Draft202012.Core" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsCore(out Corvus.Json.JsonSchema.Draft202012.Core result)
    {
        result = this.As<Corvus.Json.JsonSchema.Draft202012.Core>();
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref="Corvus.Json.JsonSchema.Draft202012.FormatAnnotation" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsFormatAnnotation(out Corvus.Json.JsonSchema.Draft202012.FormatAnnotation result)
    {
        result = this.As<Corvus.Json.JsonSchema.Draft202012.FormatAnnotation>();
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref="Corvus.Json.JsonSchema.Draft202012.MetaData" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsMetaData(out Corvus.Json.JsonSchema.Draft202012.MetaData result)
    {
        result = this.As<Corvus.Json.JsonSchema.Draft202012.MetaData>();
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref="Corvus.Json.JsonSchema.Draft202012.Unevaluated" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsUnevaluated(out Corvus.Json.JsonSchema.Draft202012.Unevaluated result)
    {
        result = this.As<Corvus.Json.JsonSchema.Draft202012.Unevaluated>();
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref="Corvus.Json.JsonSchema.Draft202012.Validation" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsValidation(out Corvus.Json.JsonSchema.Draft202012.Validation result)
    {
        result = this.As<Corvus.Json.JsonSchema.Draft202012.Validation>();
        return result.IsValid();
    }
}
