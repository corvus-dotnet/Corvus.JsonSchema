//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using System.Text.RegularExpressions;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.Draft4;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
/// <remarks>
/// <para>
/// Core schema meta-schema
/// </para>
/// </remarks>
public readonly partial struct Schema
{
    private static readonly ImmutableList<__CorvusDependency> __CorvusDependentRequired = BuildDependentRequired();
    private static ImmutableList<__CorvusDependency> BuildDependentRequired()
    {
        ImmutableList<__CorvusDependency>.Builder builder = ImmutableList.CreateBuilder<__CorvusDependency>();
        builder.Add(new __CorvusDependency(new byte[] { 101, 120, 99, 108, 117, 115, 105, 118, 101, 77, 97, 120, 105, 109, 117, 109 }, "exclusiveMaximum", ImmutableArray.Create<ReadOnlyMemory<byte>>(new byte[] { 109, 97, 120, 105, 109, 117, 109 }), ImmutableArray.Create<string>("exclusiveMaximum")));
        builder.Add(new __CorvusDependency(new byte[] { 101, 120, 99, 108, 117, 115, 105, 118, 101, 77, 105, 110, 105, 109, 117, 109 }, "exclusiveMinimum", ImmutableArray.Create<ReadOnlyMemory<byte>>(new byte[] { 109, 105, 110, 105, 109, 117, 109 }), ImmutableArray.Create<string>("exclusiveMinimum")));
        return builder.ToImmutable();
    }

#if NET8_0_OR_GREATER
    private readonly record struct __CorvusDependency(ReadOnlyMemory<byte> Utf8Name, string Name, ImmutableArray<ReadOnlyMemory<byte>> Utf8Dependency, ImmutableArray<string> Dependency);
#else
    private readonly struct __CorvusDependency
    {
        public __CorvusDependency(ReadOnlyMemory<byte> utf8Name, string name, ImmutableArray<ReadOnlyMemory<byte>> utf8Dependency, ImmutableArray<string> dependency)
        {
            Utf8Name = utf8Name;
            Name = name;
            Utf8Dependency = utf8Dependency;
            Dependency = dependency;
        }

        public ReadOnlyMemory<byte> Utf8Name { get; }
        public string Name { get; }
        public ImmutableArray<ReadOnlyMemory<byte>> Utf8Dependency { get; }
        public ImmutableArray<string> Dependency { get; }
    }
#endif
}