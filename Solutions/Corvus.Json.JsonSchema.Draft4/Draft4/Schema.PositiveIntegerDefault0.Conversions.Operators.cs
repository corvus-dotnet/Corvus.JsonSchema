//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.Draft4;
public readonly partial struct Schema
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct PositiveIntegerDefault0
    {
        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger(PositiveIntegerDefault0 value)
        {
            if ((value.backing & Backing.JsonElement) != 0)
            {
                return new(value.AsJsonElement);
            }

            if ((value.backing & Backing.Number) != 0)
            {
                return new(value.numberBacking);
            }

            return Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger.Undefined;
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static explicit operator PositiveIntegerDefault0(Corvus.Json.JsonSchema.Draft4.Schema.PositiveInteger value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.Number => new(value.AsBinaryJsonNumber),
                _ => Undefined
            };
        }

        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0(PositiveIntegerDefault0 value)
        {
            if ((value.backing & Backing.JsonElement) != 0)
            {
                return new(value.AsJsonElement);
            }

            return Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0.Undefined;
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static explicit operator PositiveIntegerDefault0(Corvus.Json.JsonSchema.Draft4.Schema.PositiveIntegerDefault0.DefaultValue0 value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                _ => Undefined
            };
        }
    }
}