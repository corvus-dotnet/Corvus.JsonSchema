//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace Corvus.Json.JsonSchema.Draft6;

/// <summary>
/// Core schema meta-schema
/// </summary>
/// <remarks>
/// <para>
/// Examples:
/// <example>
/// <code>
/// {}
/// </code>
/// </example>
/// </para>
/// </remarks>
public readonly partial struct Schema
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct NonNegativeInteger
    {
        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext;
            if (level > ValidationLevel.Flag)
            {
                result = result.UsingResults();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.UsingStack();
                result = result.PushSchemaLocation("http://json-schema.org/draft-06/schema#/definitions/nonNegativeInteger");
            }

            JsonValueKind valueKind = this.ValueKind;
            result = CorvusValidation.NumberValidationHandler(this, valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            result = CorvusValidation.TypeValidationHandler(this, valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            return result;
        }

        private static partial class CorvusValidation
        {
            public static readonly BinaryJsonNumber Minimum = new(0);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static ValidationContext NumberValidationHandler(
                in NonNegativeInteger value,
                JsonValueKind valueKind,
                in ValidationContext validationContext,
                ValidationLevel level = ValidationLevel.Flag)
            {
                if (valueKind != JsonValueKind.Number)
                {
                    if (level == ValidationLevel.Verbose)
                    {
                        ValidationContext ignoredResult = validationContext;
                        ignoredResult = ignoredResult.PushValidationLocationProperty("minimum");
                        ignoredResult = ignoredResult.WithResult(isValid: true, "Validation minimum - ignored because the value is not a number");
                        ignoredResult = ignoredResult.PopLocation();
                        return ignoredResult;
                    }

                    return validationContext;
                }

                ValidationContext result = validationContext;
                if ((value.HasJsonElementBacking
                    ? BinaryJsonNumber.Compare(value.AsJsonElement, Minimum)
                    : BinaryJsonNumber.Compare(value.AsBinaryJsonNumber, Minimum))>= 0)
                {
                    if (level == ValidationLevel.Verbose)
                    {
                        result = result.PushValidationLocationProperty("minimum");
                        result = result.WithResult(isValid: true, $"Validation minimum - {value} is greater than or equal to {Minimum}");
                        result = result.PopLocation();
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationProperty("minimum");
                    }

                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.WithResult(isValid: false, $"Validation minimum - {value} is less than {Minimum}");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.WithResult(isValid: false, "Validation minimum - is less than the required value.");
                    }
                    else
                    {
                        return result.WithResult(isValid: false);
                    }

                    if (level >= ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                return result;
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static ValidationContext TypeValidationHandler(
                in NonNegativeInteger value,
                JsonValueKind valueKind,
                in ValidationContext validationContext,
                ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext;
                return Corvus.Json.Validate.TypeInteger(value, result, level);
            }
        }
    }
}
