//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace Corvus.Json.JsonSchema.Draft7;

/// <summary>
/// Core schema meta-schema
/// </summary>
/// <remarks>
/// <para>
/// Examples:
/// <example>
/// <code>
/// true
/// </code>
/// </example>
/// </para>
/// </remarks>
public readonly partial struct Schema
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Examples:
    /// <example>
    /// <code>
    /// {}
    /// </code>
    /// </example>
    /// </para>
    /// </remarks>
    public readonly partial struct PatternPropertiesEntity
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        public readonly partial struct PropertyNamesEntity
        {
            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext;
                if (level > ValidationLevel.Flag)
                {
                    result = result.UsingResults();
                }

                if (level > ValidationLevel.Basic)
                {
                    result = result.UsingStack();
                    result = result.PushSchemaLocation("http://json-schema.org/draft-07/schema#/properties/patternProperties/propertyNames");
                }

                JsonValueKind valueKind = this.ValueKind;

                result = CorvusValidation.FormatValidationHandler(this, valueKind, result, level);

                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                if (level > ValidationLevel.Basic)
                {
                    result = result.PopLocation();
                }

                return result;
            }

            /// <summary>
            /// Validation constants for the type.
            /// </summary>
            public static partial class CorvusValidation
            {
                /// <summary>
                /// Numeric and string format validation.
                /// </summary>
                /// <param name="value">The value to validate.</param>
                /// <param name="valueKind">The <see cref="JsonValueKind" /> of the value to validate.</param>
                /// <param name="validationContext">The current validation context.</param>
                /// <param name="level">The current validation level.</param>
                /// <returns>The resulting validation context after validation.</returns>
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                internal static ValidationContext FormatValidationHandler(
                    in PropertyNamesEntity value,
                    JsonValueKind valueKind,
                    in ValidationContext validationContext,
                    ValidationLevel level = ValidationLevel.Flag)
                {
                    if (valueKind != JsonValueKind.String)
                    {
                        if (level == ValidationLevel.Verbose)
                        {
                            ValidationContext ignoredResult = validationContext;
                            ignoredResult = ignoredResult.WithResult(isValid: true, $"Validation format - ignored 'regex' because the value is of kind '{valueKind}' not 'String'.");

                            return ignoredResult;
                        }

                        return validationContext;
                    }

                    return Corvus.Json.ValidateWithoutCoreType.TypeRegex(value, validationContext, level, "format");
                }
            }
        }
    }
}
