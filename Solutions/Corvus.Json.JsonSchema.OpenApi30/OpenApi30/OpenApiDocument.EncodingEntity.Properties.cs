//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.OpenApi30;
public readonly partial struct OpenApiDocument
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct EncodingEntity
    {
        /// <summary>
        /// The well-known property names in the JSON object.
        /// </summary>
        public static class JsonPropertyNames
        {
            /// <summary>
            /// JSON property name for <see cref = "AllowReserved"/>.
            /// </summary>
            public static ReadOnlySpan<byte> AllowReservedUtf8 => "allowReserved"u8;

            /// <summary>
            /// JSON property name for <see cref = "AllowReserved"/>.
            /// </summary>
            public const string AllowReserved = "allowReserved";
            /// <summary>
            /// JSON property name for <see cref = "ContentType"/>.
            /// </summary>
            public static ReadOnlySpan<byte> ContentTypeUtf8 => "contentType"u8;

            /// <summary>
            /// JSON property name for <see cref = "ContentType"/>.
            /// </summary>
            public const string ContentType = "contentType";
            /// <summary>
            /// JSON property name for <see cref = "Explode"/>.
            /// </summary>
            public static ReadOnlySpan<byte> ExplodeUtf8 => "explode"u8;

            /// <summary>
            /// JSON property name for <see cref = "Explode"/>.
            /// </summary>
            public const string Explode = "explode";
            /// <summary>
            /// JSON property name for <see cref = "Headers"/>.
            /// </summary>
            public static ReadOnlySpan<byte> HeadersUtf8 => "headers"u8;

            /// <summary>
            /// JSON property name for <see cref = "Headers"/>.
            /// </summary>
            public const string Headers = "headers";
            /// <summary>
            /// JSON property name for <see cref = "Style"/>.
            /// </summary>
            public static ReadOnlySpan<byte> StyleUtf8 => "style"u8;

            /// <summary>
            /// JSON property name for <see cref = "Style"/>.
            /// </summary>
            public const string Style = "style";
        }

        /// <summary>
        /// Gets the (optional) <c>allowReserved</c> property.
        /// </summary>
        public Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.EncodingEntity.AllowReservedEntity AllowReserved
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.AllowReservedUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.EncodingEntity.AllowReservedEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.AllowReserved, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.EncodingEntity.AllowReservedEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>contentType</c> property.
        /// </summary>
        public Corvus.Json.JsonString ContentType
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ContentTypeUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.ContentType, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>explode</c> property.
        /// </summary>
        public Corvus.Json.JsonBoolean Explode
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ExplodeUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonBoolean(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Explode, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonBoolean>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>headers</c> property.
        /// </summary>
        public Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.EncodingEntity.HeadersEntity Headers
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.HeadersUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.EncodingEntity.HeadersEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Headers, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.EncodingEntity.HeadersEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>style</c> property.
        /// </summary>
        public Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.EncodingEntity.StyleEntity Style
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.StyleUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.EncodingEntity.StyleEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Style, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.EncodingEntity.StyleEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Creates an instance of a <see cref = "EncodingEntity"/>.
        /// </summary>
        public static EncodingEntity Create(Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.EncodingEntity.AllowReservedEntity? allowReserved = null, Corvus.Json.JsonString? contentType = null, Corvus.Json.JsonBoolean? explode = null, Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.EncodingEntity.HeadersEntity? headers = null, Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.EncodingEntity.StyleEntity? style = null)
        {
            var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
            if (allowReserved is Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.EncodingEntity.AllowReservedEntity allowReserved__)
            {
                builder.Add(JsonPropertyNames.AllowReserved, allowReserved__.AsAny);
            }

            if (contentType is Corvus.Json.JsonString contentType__)
            {
                builder.Add(JsonPropertyNames.ContentType, contentType__.AsAny);
            }

            if (explode is Corvus.Json.JsonBoolean explode__)
            {
                builder.Add(JsonPropertyNames.Explode, explode__.AsAny);
            }

            if (headers is Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.EncodingEntity.HeadersEntity headers__)
            {
                builder.Add(JsonPropertyNames.Headers, headers__.AsAny);
            }

            if (style is Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.EncodingEntity.StyleEntity style__)
            {
                builder.Add(JsonPropertyNames.Style, style__.AsAny);
            }

            return new(builder.ToImmutable());
        }

        /// <summary>
        /// Sets allowReserved.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public EncodingEntity WithAllowReserved(in Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.EncodingEntity.AllowReservedEntity value)
        {
            return this.SetProperty(JsonPropertyNames.AllowReserved, value);
        }

        /// <summary>
        /// Sets contentType.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public EncodingEntity WithContentType(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(JsonPropertyNames.ContentType, value);
        }

        /// <summary>
        /// Sets explode.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public EncodingEntity WithExplode(in Corvus.Json.JsonBoolean value)
        {
            return this.SetProperty(JsonPropertyNames.Explode, value);
        }

        /// <summary>
        /// Sets headers.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public EncodingEntity WithHeaders(in Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.EncodingEntity.HeadersEntity value)
        {
            return this.SetProperty(JsonPropertyNames.Headers, value);
        }

        /// <summary>
        /// Sets style.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public EncodingEntity WithStyle(in Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.EncodingEntity.StyleEntity value)
        {
            return this.SetProperty(JsonPropertyNames.Style, value);
        }

        private static ValidationContext __CorvusValidateContentType(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateHeaders(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.EncodingEntity.HeadersEntity>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateStyle(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.EncodingEntity.StyleEntity>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateExplode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonBoolean>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateAllowReserved(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.EncodingEntity.AllowReservedEntity>().Validate(validationContext, level);
        }

        /// <summary>
        /// Tries to get the validator for the given property.
        /// </summary>
        /// <param name = "property">The property for which to get the validator.</param>
        /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
        /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
        /// <returns><c>True</c> if the validator was found.</returns>
        private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
        {
            if (hasJsonElementBacking)
            {
                if (property.NameEquals(JsonPropertyNames.ContentTypeUtf8))
                {
                    propertyValidator = __CorvusValidateContentType;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.HeadersUtf8))
                {
                    propertyValidator = __CorvusValidateHeaders;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.StyleUtf8))
                {
                    propertyValidator = __CorvusValidateStyle;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.ExplodeUtf8))
                {
                    propertyValidator = __CorvusValidateExplode;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.AllowReservedUtf8))
                {
                    propertyValidator = __CorvusValidateAllowReserved;
                    return true;
                }
            }
            else
            {
                if (property.NameEquals(JsonPropertyNames.ContentType))
                {
                    propertyValidator = __CorvusValidateContentType;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.Headers))
                {
                    propertyValidator = __CorvusValidateHeaders;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.Style))
                {
                    propertyValidator = __CorvusValidateStyle;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.Explode))
                {
                    propertyValidator = __CorvusValidateExplode;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.AllowReserved))
                {
                    propertyValidator = __CorvusValidateAllowReserved;
                    return true;
                }
            }

            propertyValidator = null;
            return false;
        }
    }
}