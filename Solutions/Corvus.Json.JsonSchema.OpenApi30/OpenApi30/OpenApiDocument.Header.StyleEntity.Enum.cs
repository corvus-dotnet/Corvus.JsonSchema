//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.OpenApi30;
public readonly partial struct OpenApiDocument
{
    public readonly partial struct Header
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        public readonly partial struct StyleEntity
        {
            /// <summary>
            /// Matches the value against each of the enumeration values, and returns the result of calling the provided match function for the first match found.
            /// </summary>
            /// <param name = "context">The context to pass to the match function.</param>
            /// <param name = "matchSimple">The function to call if the value matches the JSON value "\"simple\"".</param>
            /// <param name = "defaultMatch">The fallback match.</param>
            public TOut Match<TIn, TOut>(in TIn context, Func<TIn, TOut> matchSimple, Func<TIn, TOut> defaultMatch)
            {
                if (this.ValueKind == JsonValueKind.String)
                {
                    if (this.HasJsonElementBacking)
                    {
                        if (this.jsonElementBacking.ValueEquals(EnumValues.SimpleUtf8))
                        {
                            return matchSimple(context);
                        }
                    }
                    else
                    {
                        switch (this.stringBacking)
                        {
                            case "simple":
                                return matchSimple(context);
                            default:
                                break;
                        }
                    }
                }

                return defaultMatch(context);
            }

            /// <summary>
            /// Matches the value against each of the enumeration values, and returns the result of calling the provided match function for the first match found.
            /// </summary>
            /// <param name = "matchSimple">The function to call if the value matches the JSON value "\"simple\"".</param>
            /// <param name = "defaultMatch">The fallback match.</param>
            public TOut Match<TOut>(Func<TOut> matchSimple, Func<TOut> defaultMatch)
            {
                if (this.ValueKind == JsonValueKind.String)
                {
                    if (this.HasJsonElementBacking)
                    {
                        if (this.jsonElementBacking.ValueEquals(EnumValues.SimpleUtf8))
                        {
                            return matchSimple();
                        }
                    }
                    else
                    {
                        switch (this.stringBacking)
                        {
                            case "simple":
                                return matchSimple();
                            default:
                                break;
                        }
                    }
                }

                return defaultMatch();
            }

            /// <summary>
            /// Permitted values.
            /// </summary>
            public static class EnumValues
            {
                /// <summary>
                /// Gets "simple" as a JSON value.
                /// </summary>
                public static readonly StyleEntity Simple = StyleEntity.Parse("\"simple\"");
                /// <summary>
                /// Gets "simple" as a UTF8 string.
                /// </summary>
                public static ReadOnlySpan<byte> SimpleUtf8 => "simple"u8;

                /// <summary>
                /// Gets "simple" as a JSON value.
                /// </summary>
                internal static readonly StyleEntity Item0 = StyleEntity.Parse("\"simple\"");
            }
        }
    }
}