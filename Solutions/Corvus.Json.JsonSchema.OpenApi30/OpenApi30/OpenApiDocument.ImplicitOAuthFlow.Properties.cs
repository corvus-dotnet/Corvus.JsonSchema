//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.OpenApi30;
public readonly partial struct OpenApiDocument
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct ImplicitOAuthFlow
    {
        /// <summary>
        /// The well-known property names in the JSON object.
        /// </summary>
        public static class JsonPropertyNames
        {
            /// <summary>
            /// JSON property name for <see cref = "AuthorizationUrl"/>.
            /// </summary>
            public static ReadOnlySpan<byte> AuthorizationUrlUtf8 => "authorizationUrl"u8;

            /// <summary>
            /// JSON property name for <see cref = "AuthorizationUrl"/>.
            /// </summary>
            public const string AuthorizationUrl = "authorizationUrl";
            /// <summary>
            /// JSON property name for <see cref = "RefreshUrl"/>.
            /// </summary>
            public static ReadOnlySpan<byte> RefreshUrlUtf8 => "refreshUrl"u8;

            /// <summary>
            /// JSON property name for <see cref = "RefreshUrl"/>.
            /// </summary>
            public const string RefreshUrl = "refreshUrl";
            /// <summary>
            /// JSON property name for <see cref = "Scopes"/>.
            /// </summary>
            public static ReadOnlySpan<byte> ScopesUtf8 => "scopes"u8;

            /// <summary>
            /// JSON property name for <see cref = "Scopes"/>.
            /// </summary>
            public const string Scopes = "scopes";
        }

        /// <summary>
        /// Gets the <c>authorizationUrl</c> property. If the instance is valid, this property will be not be <c>undefined</c>.
        /// </summary>
        public Corvus.Json.JsonUriReference AuthorizationUrl
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.AuthorizationUrlUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonUriReference(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.AuthorizationUrl, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonUriReference>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>refreshUrl</c> property.
        /// </summary>
        public Corvus.Json.JsonUriReference RefreshUrl
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.RefreshUrlUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonUriReference(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.RefreshUrl, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonUriReference>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the <c>scopes</c> property. If the instance is valid, this property will be not be <c>undefined</c>.
        /// </summary>
        public Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.ImplicitOAuthFlow.ScopesEntity Scopes
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ScopesUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.ImplicitOAuthFlow.ScopesEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Scopes, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.ImplicitOAuthFlow.ScopesEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Creates an instance of a <see cref = "ImplicitOAuthFlow"/>.
        /// </summary>
        public static ImplicitOAuthFlow Create(Corvus.Json.JsonUriReference authorizationUrl, Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.ImplicitOAuthFlow.ScopesEntity scopes, Corvus.Json.JsonUriReference? refreshUrl = null)
        {
            var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
            builder.Add(JsonPropertyNames.AuthorizationUrl, authorizationUrl.AsAny);
            builder.Add(JsonPropertyNames.Scopes, scopes.AsAny);
            if (refreshUrl is Corvus.Json.JsonUriReference refreshUrl__)
            {
                builder.Add(JsonPropertyNames.RefreshUrl, refreshUrl__.AsAny);
            }

            return new(builder.ToImmutable());
        }

        /// <summary>
        /// Sets authorizationUrl.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public ImplicitOAuthFlow WithAuthorizationUrl(in Corvus.Json.JsonUriReference value)
        {
            return this.SetProperty(JsonPropertyNames.AuthorizationUrl, value);
        }

        /// <summary>
        /// Sets refreshUrl.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public ImplicitOAuthFlow WithRefreshUrl(in Corvus.Json.JsonUriReference value)
        {
            return this.SetProperty(JsonPropertyNames.RefreshUrl, value);
        }

        /// <summary>
        /// Sets scopes.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public ImplicitOAuthFlow WithScopes(in Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.ImplicitOAuthFlow.ScopesEntity value)
        {
            return this.SetProperty(JsonPropertyNames.Scopes, value);
        }

        private static ValidationContext __CorvusValidateAuthorizationUrl(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonUriReference>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateScopes(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.ImplicitOAuthFlow.ScopesEntity>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateRefreshUrl(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonUriReference>().Validate(validationContext, level);
        }

        /// <summary>
        /// Tries to get the validator for the given property.
        /// </summary>
        /// <param name = "property">The property for which to get the validator.</param>
        /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
        /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
        /// <returns><c>True</c> if the validator was found.</returns>
        private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
        {
            if (hasJsonElementBacking)
            {
                if (property.NameEquals(JsonPropertyNames.AuthorizationUrlUtf8))
                {
                    propertyValidator = __CorvusValidateAuthorizationUrl;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.ScopesUtf8))
                {
                    propertyValidator = __CorvusValidateScopes;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.RefreshUrlUtf8))
                {
                    propertyValidator = __CorvusValidateRefreshUrl;
                    return true;
                }
            }
            else
            {
                if (property.NameEquals(JsonPropertyNames.AuthorizationUrl))
                {
                    propertyValidator = __CorvusValidateAuthorizationUrl;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.Scopes))
                {
                    propertyValidator = __CorvusValidateScopes;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.RefreshUrl))
                {
                    propertyValidator = __CorvusValidateRefreshUrl;
                    return true;
                }
            }

            propertyValidator = null;
            return false;
        }
    }
}