//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.OpenApi30;
public readonly partial struct OpenApiDocument
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct Info
    {
        /// <summary>
        /// The well-known property names in the JSON object.
        /// </summary>
        public static class JsonPropertyNames
        {
            /// <summary>
            /// JSON property name for <see cref = "Contact"/>.
            /// </summary>
            public static ReadOnlySpan<byte> ContactUtf8 => "contact"u8;

            /// <summary>
            /// JSON property name for <see cref = "Contact"/>.
            /// </summary>
            public const string Contact = "contact";
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static ReadOnlySpan<byte> DescriptionUtf8 => "description"u8;

            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public const string Description = "description";
            /// <summary>
            /// JSON property name for <see cref = "License"/>.
            /// </summary>
            public static ReadOnlySpan<byte> LicenseUtf8 => "license"u8;

            /// <summary>
            /// JSON property name for <see cref = "License"/>.
            /// </summary>
            public const string License = "license";
            /// <summary>
            /// JSON property name for <see cref = "TermsOfService"/>.
            /// </summary>
            public static ReadOnlySpan<byte> TermsOfServiceUtf8 => "termsOfService"u8;

            /// <summary>
            /// JSON property name for <see cref = "TermsOfService"/>.
            /// </summary>
            public const string TermsOfService = "termsOfService";
            /// <summary>
            /// JSON property name for <see cref = "Title"/>.
            /// </summary>
            public static ReadOnlySpan<byte> TitleUtf8 => "title"u8;

            /// <summary>
            /// JSON property name for <see cref = "Title"/>.
            /// </summary>
            public const string Title = "title";
            /// <summary>
            /// JSON property name for <see cref = "Version"/>.
            /// </summary>
            public static ReadOnlySpan<byte> VersionUtf8 => "version"u8;

            /// <summary>
            /// JSON property name for <see cref = "Version"/>.
            /// </summary>
            public const string Version = "version";
        }

        /// <summary>
        /// Gets the (optional) <c>contact</c> property.
        /// </summary>
        public Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Contact Contact
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ContactUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Contact(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Contact, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Contact>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>description</c> property.
        /// </summary>
        public Corvus.Json.JsonString Description
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DescriptionUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Description, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>license</c> property.
        /// </summary>
        public Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.License License
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.LicenseUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.License(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.License, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.License>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>termsOfService</c> property.
        /// </summary>
        public Corvus.Json.JsonUriReference TermsOfService
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.TermsOfServiceUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonUriReference(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.TermsOfService, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonUriReference>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the <c>title</c> property. If the instance is valid, this property will be not be <c>undefined</c>.
        /// </summary>
        public Corvus.Json.JsonString Title
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.TitleUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Title, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the <c>version</c> property. If the instance is valid, this property will be not be <c>undefined</c>.
        /// </summary>
        public Corvus.Json.JsonString Version
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.VersionUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Version, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Creates an instance of a <see cref = "Info"/>.
        /// </summary>
        public static Info Create(Corvus.Json.JsonString title, Corvus.Json.JsonString version, Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Contact? contact = null, Corvus.Json.JsonString? description = null, Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.License? license = null, Corvus.Json.JsonUriReference? termsOfService = null)
        {
            var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
            builder.Add(JsonPropertyNames.Title, title.AsAny);
            builder.Add(JsonPropertyNames.Version, version.AsAny);
            if (contact is Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Contact contact__)
            {
                builder.Add(JsonPropertyNames.Contact, contact__.AsAny);
            }

            if (description is Corvus.Json.JsonString description__)
            {
                builder.Add(JsonPropertyNames.Description, description__.AsAny);
            }

            if (license is Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.License license__)
            {
                builder.Add(JsonPropertyNames.License, license__.AsAny);
            }

            if (termsOfService is Corvus.Json.JsonUriReference termsOfService__)
            {
                builder.Add(JsonPropertyNames.TermsOfService, termsOfService__.AsAny);
            }

            return new(builder.ToImmutable());
        }

        /// <summary>
        /// Sets contact.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Info WithContact(in Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Contact value)
        {
            return this.SetProperty(JsonPropertyNames.Contact, value);
        }

        /// <summary>
        /// Sets description.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Info WithDescription(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(JsonPropertyNames.Description, value);
        }

        /// <summary>
        /// Sets license.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Info WithLicense(in Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.License value)
        {
            return this.SetProperty(JsonPropertyNames.License, value);
        }

        /// <summary>
        /// Sets termsOfService.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Info WithTermsOfService(in Corvus.Json.JsonUriReference value)
        {
            return this.SetProperty(JsonPropertyNames.TermsOfService, value);
        }

        /// <summary>
        /// Sets title.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Info WithTitle(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(JsonPropertyNames.Title, value);
        }

        /// <summary>
        /// Sets version.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Info WithVersion(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(JsonPropertyNames.Version, value);
        }

        private static ValidationContext __CorvusValidateTitle(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateVersion(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateDescription(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateTermsOfService(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonUriReference>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateContact(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Contact>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateLicense(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.License>().Validate(validationContext, level);
        }

        /// <summary>
        /// Tries to get the validator for the given property.
        /// </summary>
        /// <param name = "property">The property for which to get the validator.</param>
        /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
        /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
        /// <returns><c>True</c> if the validator was found.</returns>
        private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
        {
            if (hasJsonElementBacking)
            {
                if (property.NameEquals(JsonPropertyNames.TitleUtf8))
                {
                    propertyValidator = __CorvusValidateTitle;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.VersionUtf8))
                {
                    propertyValidator = __CorvusValidateVersion;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.DescriptionUtf8))
                {
                    propertyValidator = __CorvusValidateDescription;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.TermsOfServiceUtf8))
                {
                    propertyValidator = __CorvusValidateTermsOfService;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.ContactUtf8))
                {
                    propertyValidator = __CorvusValidateContact;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.LicenseUtf8))
                {
                    propertyValidator = __CorvusValidateLicense;
                    return true;
                }
            }
            else
            {
                if (property.NameEquals(JsonPropertyNames.Title))
                {
                    propertyValidator = __CorvusValidateTitle;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.Version))
                {
                    propertyValidator = __CorvusValidateVersion;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.Description))
                {
                    propertyValidator = __CorvusValidateDescription;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.TermsOfService))
                {
                    propertyValidator = __CorvusValidateTermsOfService;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.Contact))
                {
                    propertyValidator = __CorvusValidateContact;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.License))
                {
                    propertyValidator = __CorvusValidateLicense;
                    return true;
                }
            }

            propertyValidator = null;
            return false;
        }
    }
}