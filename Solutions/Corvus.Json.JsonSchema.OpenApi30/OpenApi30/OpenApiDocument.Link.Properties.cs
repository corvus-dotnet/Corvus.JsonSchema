//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.OpenApi30;
public readonly partial struct OpenApiDocument
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct Link
    {
        /// <summary>
        /// The well-known property names in the JSON object.
        /// </summary>
        public static class JsonPropertyNames
        {
            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public static ReadOnlySpan<byte> DescriptionUtf8 => "description"u8;

            /// <summary>
            /// JSON property name for <see cref = "Description"/>.
            /// </summary>
            public const string Description = "description";
            /// <summary>
            /// JSON property name for <see cref = "OperationId"/>.
            /// </summary>
            public static ReadOnlySpan<byte> OperationIdUtf8 => "operationId"u8;

            /// <summary>
            /// JSON property name for <see cref = "OperationId"/>.
            /// </summary>
            public const string OperationId = "operationId";
            /// <summary>
            /// JSON property name for <see cref = "OperationRef"/>.
            /// </summary>
            public static ReadOnlySpan<byte> OperationRefUtf8 => "operationRef"u8;

            /// <summary>
            /// JSON property name for <see cref = "OperationRef"/>.
            /// </summary>
            public const string OperationRef = "operationRef";
            /// <summary>
            /// JSON property name for <see cref = "Parameters"/>.
            /// </summary>
            public static ReadOnlySpan<byte> ParametersUtf8 => "parameters"u8;

            /// <summary>
            /// JSON property name for <see cref = "Parameters"/>.
            /// </summary>
            public const string Parameters = "parameters";
            /// <summary>
            /// JSON property name for <see cref = "RequestBody"/>.
            /// </summary>
            public static ReadOnlySpan<byte> RequestBodyUtf8 => "requestBody"u8;

            /// <summary>
            /// JSON property name for <see cref = "RequestBody"/>.
            /// </summary>
            public const string RequestBody = "requestBody";
            /// <summary>
            /// JSON property name for <see cref = "Server"/>.
            /// </summary>
            public static ReadOnlySpan<byte> ServerUtf8 => "server"u8;

            /// <summary>
            /// JSON property name for <see cref = "Server"/>.
            /// </summary>
            public const string Server = "server";
        }

        /// <summary>
        /// Gets the (optional) <c>description</c> property.
        /// </summary>
        public Corvus.Json.JsonString Description
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DescriptionUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Description, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>operationId</c> property.
        /// </summary>
        public Corvus.Json.JsonString OperationId
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.OperationIdUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.OperationId, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>operationRef</c> property.
        /// </summary>
        public Corvus.Json.JsonUriReference OperationRef
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.OperationRefUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonUriReference(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.OperationRef, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonUriReference>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>parameters</c> property.
        /// </summary>
        public Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Link.ParametersEntity Parameters
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ParametersUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Link.ParametersEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Parameters, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Link.ParametersEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>requestBody</c> property.
        /// </summary>
        public Corvus.Json.JsonAny RequestBody
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.RequestBodyUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonAny(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.RequestBody, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonAny>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>server</c> property.
        /// </summary>
        public Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Server Server
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ServerUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Server(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Server, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Server>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Creates an instance of a <see cref = "Link"/>.
        /// </summary>
        public static Link Create(Corvus.Json.JsonString? description = null, Corvus.Json.JsonString? operationId = null, Corvus.Json.JsonUriReference? operationRef = null, Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Link.ParametersEntity? parameters = null, Corvus.Json.JsonAny? requestBody = null, Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Server? server = null)
        {
            var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
            if (description is Corvus.Json.JsonString description__)
            {
                builder.Add(JsonPropertyNames.Description, description__.AsAny);
            }

            if (operationId is Corvus.Json.JsonString operationId__)
            {
                builder.Add(JsonPropertyNames.OperationId, operationId__.AsAny);
            }

            if (operationRef is Corvus.Json.JsonUriReference operationRef__)
            {
                builder.Add(JsonPropertyNames.OperationRef, operationRef__.AsAny);
            }

            if (parameters is Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Link.ParametersEntity parameters__)
            {
                builder.Add(JsonPropertyNames.Parameters, parameters__.AsAny);
            }

            if (requestBody is Corvus.Json.JsonAny requestBody__)
            {
                builder.Add(JsonPropertyNames.RequestBody, requestBody__.AsAny);
            }

            if (server is Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Server server__)
            {
                builder.Add(JsonPropertyNames.Server, server__.AsAny);
            }

            return new(builder.ToImmutable());
        }

        /// <summary>
        /// Sets description.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Link WithDescription(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(JsonPropertyNames.Description, value);
        }

        /// <summary>
        /// Sets operationId.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Link WithOperationId(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(JsonPropertyNames.OperationId, value);
        }

        /// <summary>
        /// Sets operationRef.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Link WithOperationRef(in Corvus.Json.JsonUriReference value)
        {
            return this.SetProperty(JsonPropertyNames.OperationRef, value);
        }

        /// <summary>
        /// Sets parameters.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Link WithParameters(in Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Link.ParametersEntity value)
        {
            return this.SetProperty(JsonPropertyNames.Parameters, value);
        }

        /// <summary>
        /// Sets requestBody.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Link WithRequestBody(in Corvus.Json.JsonAny value)
        {
            return this.SetProperty(JsonPropertyNames.RequestBody, value);
        }

        /// <summary>
        /// Sets server.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Link WithServer(in Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Server value)
        {
            return this.SetProperty(JsonPropertyNames.Server, value);
        }

        private static ValidationContext __CorvusValidateOperationId(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateOperationRef(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonUriReference>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateParameters(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Link.ParametersEntity>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateRequestBody(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonAny>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateDescription(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateServer(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Server>().Validate(validationContext, level);
        }

        /// <summary>
        /// Tries to get the validator for the given property.
        /// </summary>
        /// <param name = "property">The property for which to get the validator.</param>
        /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
        /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
        /// <returns><c>True</c> if the validator was found.</returns>
        private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
        {
            if (hasJsonElementBacking)
            {
                if (property.NameEquals(JsonPropertyNames.OperationIdUtf8))
                {
                    propertyValidator = __CorvusValidateOperationId;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.OperationRefUtf8))
                {
                    propertyValidator = __CorvusValidateOperationRef;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.ParametersUtf8))
                {
                    propertyValidator = __CorvusValidateParameters;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.RequestBodyUtf8))
                {
                    propertyValidator = __CorvusValidateRequestBody;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.DescriptionUtf8))
                {
                    propertyValidator = __CorvusValidateDescription;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.ServerUtf8))
                {
                    propertyValidator = __CorvusValidateServer;
                    return true;
                }
            }
            else
            {
                if (property.NameEquals(JsonPropertyNames.OperationId))
                {
                    propertyValidator = __CorvusValidateOperationId;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.OperationRef))
                {
                    propertyValidator = __CorvusValidateOperationRef;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.Parameters))
                {
                    propertyValidator = __CorvusValidateParameters;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.RequestBody))
                {
                    propertyValidator = __CorvusValidateRequestBody;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.Description))
                {
                    propertyValidator = __CorvusValidateDescription;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.Server))
                {
                    propertyValidator = __CorvusValidateServer;
                    return true;
                }
            }

            propertyValidator = null;
            return false;
        }
    }
}