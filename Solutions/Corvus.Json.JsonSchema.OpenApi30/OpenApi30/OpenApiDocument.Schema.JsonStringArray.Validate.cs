//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace Corvus.Json.JsonSchema.OpenApi30;

/// <summary>
/// Generated from JSON Schema.
/// </summary>
/// <remarks>
/// <para>
/// The description of OpenAPI v3.0.x documents, as defined by https://spec.openapis.org/oas/v3.0.3
/// </para>
/// </remarks>
public readonly partial struct OpenApiDocument
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct Schema
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        public readonly partial struct JsonStringArray
        {
            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext;
                if (level > ValidationLevel.Flag)
                {
                    result = result.UsingResults();
                }

                if (level > ValidationLevel.Basic)
                {
                    result = result.UsingStack();
                    result = result.PushSchemaLocation("https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/required");
                }

                JsonValueKind valueKind = this.ValueKind;

                result = CorvusValidation.TypeValidationHandler(valueKind, result, level);

                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = CorvusValidation.ArrayValidationHandler(this, valueKind, result, level);

                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                if (level > ValidationLevel.Basic)
                {
                    result = result.PopLocation();
                }

                return result;
            }

            /// <summary>
            /// Validation constants for the type.
            /// </summary>
            public static partial class CorvusValidation
            {
                /// <summary>
                /// A constant for the <c>minItems</c> keyword.
                /// </summary>
                public static readonly long MinItems = 1;

                /// <summary>
                /// Core type validation.
                /// </summary>
                /// <param name="valueKind">The <see cref="JsonValueKind" /> of the value to validate.</param>
                /// <param name="validationContext">The current validation context.</param>
                /// <param name="level">The current validation level.</param>
                /// <returns>The resulting validation context after validation.</returns>
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                internal static ValidationContext TypeValidationHandler(
                    JsonValueKind valueKind,
                    in ValidationContext validationContext,
                    ValidationLevel level = ValidationLevel.Flag)
                {
                    return Corvus.Json.ValidateWithoutCoreType.TypeArray(valueKind, validationContext, level, "type");
                }

                /// <summary>
                /// Array validation.
                /// </summary>
                /// <param name="value">The value to validate.</param>
                /// <param name="valueKind">The <see cref="JsonValueKind" /> of the value to validate.</param>
                /// <param name="validationContext">The current validation context.</param>
                /// <param name="level">The current validation level.</param>
                /// <returns>The resulting validation context after validation.</returns>
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                internal static ValidationContext ArrayValidationHandler(
                    in JsonStringArray value,
                    JsonValueKind valueKind,
                    in ValidationContext validationContext,
                    ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Array)
                    {
                        if (level == ValidationLevel.Verbose)
                        {
                            ValidationContext ignoredResult = validationContext;
                            ignoredResult = ignoredResult.WithResult(isValid: true, "Validation items - ignored because the value is not an array", "items");
                            ignoredResult = ignoredResult.WithResult(isValid: true, "Validation minItems - ignored because the value is not an array", "minItems");
                            ignoredResult = ignoredResult.WithResult(isValid: true, "Validation uniqueItems - ignored because the value is not an array", "uniqueItems");

                            return ignoredResult;
                        }

                        return validationContext;
                    }

                    int length = 0;
                    using JsonArrayEnumerator<Corvus.Json.JsonString> arrayEnumerator = value.EnumerateArray();
                    while (arrayEnumerator.MoveNext())
                    {
                        if (level > ValidationLevel.Basic)
                        {
                            result = result.PushDocumentArrayIndex(length);
                        }

                        using JsonArrayEnumerator<Corvus.Json.JsonString> innerEnumerator = value.EnumerateArray();
                        int innerIndex = -1;
                        while (innerIndex < length && 
innerEnumerator.MoveNext())
                        {
                            innerIndex++;
                        }

                        bool foundDuplicate = false;                        while (innerEnumerator.MoveNext())
                        {
                            if (innerEnumerator.Current.Equals(arrayEnumerator.Current))                            {
                                foundDuplicate = true;

                                if (level >= ValidationLevel.Detailed)
                                {
                                    result = result.WithResult(isValid: false, $"Validation uniqueItems - duplicate items were found at indices innerIndex and {length}.", "uniqueItems");
                                }
                                else if (level >= ValidationLevel.Basic)
                                {
                                    result = result.WithResult(isValid: false, "Validation uniqueItems - duplicate items were found.", "uniqueItems");
                                }
                                else
                                {
                                    return ValidationContext.InvalidContext;
                                }
                            }
                        }

                        if (!foundDuplicate && level == ValidationLevel.Verbose)
                        {
                            result = result.WithResult(isValid: true, "Validation uniqueItems - no duplicate items found.", "uniqueItems");
                        }
                        if (level > ValidationLevel.Basic)
                        {
                            result = result.PushValidationLocationReducedPathModifier(new("#/items"));
                        }

                        var nonTupleItemsResult = arrayEnumerator.Current.Validate(result.CreateChildContext(), level);
                        if (level == ValidationLevel.Flag && !nonTupleItemsResult.IsValid)
                        {
                            return nonTupleItemsResult;
                        }

                        result = result.MergeResults(nonTupleItemsResult.IsValid, level, nonTupleItemsResult);
                        if (level > ValidationLevel.Basic)
                        {
                            result = result.PopLocation();
                        }

                        result = result.WithLocalItemIndex(length);

                        if (level > ValidationLevel.Basic)
                        {
                            result = result.PopLocation();
                        }

                        length++;
                    }

                    if (length >= MinItems)
                    {
                        if (level == ValidationLevel.Verbose)
                        {
                            result = result.WithResult(isValid: true, $"Validation minItems - array of length {length} is greater than or equal to {MinItems}", "minItems");
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Detailed)
                        {
                            result = result.WithResult(isValid: false, $"Validation minItems - array of length {length} is less than {MinItems}", "minItems");
                        }
                        else if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "Validation minItems - is less than the required length.", "minItems");
                        }
                        else
                        {
                            return ValidationContext.InvalidContext;
                        }
                    }

                    return result;
                }
            }
        }
    }
}
