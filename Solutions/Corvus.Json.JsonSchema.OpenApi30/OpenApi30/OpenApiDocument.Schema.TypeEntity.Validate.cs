//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace Corvus.Json.JsonSchema.OpenApi30;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
/// <remarks>
/// <para>
/// The description of OpenAPI v3.0.x documents, as defined by https://spec.openapis.org/oas/v3.0.3
/// </para>
/// </remarks>
public readonly partial struct OpenApiDocument
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct Schema
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        public readonly partial struct TypeEntity
        {
            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext;
                if (level > ValidationLevel.Flag)
                {
                    result = result.UsingResults();
                }

                if (level > ValidationLevel.Basic)
                {
                    result = result.UsingStack();
                    result = result.PushSchemaLocation("https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Schema/properties/type");
                }

                JsonValueKind valueKind = this.ValueKind;
                result = CorvusValidation.TypeValidationHandler(valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = CorvusValidation.CompositionAnyOfValidationHandler(this, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                if (level > ValidationLevel.Basic)
                {
                    result = result.PopLocation();
                }

                return result;
            }

            /// <summary>
            /// Constant values for the enum keyword.
            /// </summary>
            public static class EnumValues
            {
                /// <summary>
                /// Gets the string 'array'
                /// as a <see cref="Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Schema.TypeEntity"/>.
                /// </summary>
                public static TypeEntity Array { get; } = CorvusValidation.Enum1.As<TypeEntity>();

                /// <summary>
                /// Gets the string 'array'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> ArrayUtf8 => CorvusValidation.Enum1Utf8;

                /// <summary>
                /// Gets the string 'boolean'
                /// as a <see cref="Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Schema.TypeEntity"/>.
                /// </summary>
                public static TypeEntity Boolean { get; } = CorvusValidation.Enum2.As<TypeEntity>();

                /// <summary>
                /// Gets the string 'boolean'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> BooleanUtf8 => CorvusValidation.Enum2Utf8;

                /// <summary>
                /// Gets the string 'integer'
                /// as a <see cref="Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Schema.TypeEntity"/>.
                /// </summary>
                public static TypeEntity Integer { get; } = CorvusValidation.Enum3.As<TypeEntity>();

                /// <summary>
                /// Gets the string 'integer'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> IntegerUtf8 => CorvusValidation.Enum3Utf8;

                /// <summary>
                /// Gets the string 'number'
                /// as a <see cref="Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Schema.TypeEntity"/>.
                /// </summary>
                public static TypeEntity Number { get; } = CorvusValidation.Enum4.As<TypeEntity>();

                /// <summary>
                /// Gets the string 'number'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> NumberUtf8 => CorvusValidation.Enum4Utf8;

                /// <summary>
                /// Gets the string 'object'
                /// as a <see cref="Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Schema.TypeEntity"/>.
                /// </summary>
                public static TypeEntity Object { get; } = CorvusValidation.Enum5.As<TypeEntity>();

                /// <summary>
                /// Gets the string 'object'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> ObjectUtf8 => CorvusValidation.Enum5Utf8;

                /// <summary>
                /// Gets the string 'string'
                /// as a <see cref="Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Schema.TypeEntity"/>.
                /// </summary>
                public static TypeEntity String { get; } = CorvusValidation.Enum6.As<TypeEntity>();

                /// <summary>
                /// Gets the string 'string'
                /// as a UTF8 byte array.
                /// </summary>
                public static ReadOnlySpan<byte> StringUtf8 => CorvusValidation.Enum6Utf8;
            }

            /// <summary>
            /// Validation constants for the type.
            /// </summary>
            public static partial class CorvusValidation
            {
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum1 = JsonString.ParseValue("\"array\"");
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum2 = JsonString.ParseValue("\"boolean\"");
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum3 = JsonString.ParseValue("\"integer\"");
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum4 = JsonString.ParseValue("\"number\"");
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum5 = JsonString.ParseValue("\"object\"");
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static readonly JsonString Enum6 = JsonString.ParseValue("\"string\"");

                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum1Utf8 => "\"array\""u8;
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum2Utf8 => "\"boolean\""u8;
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum3Utf8 => "\"integer\""u8;
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum4Utf8 => "\"number\""u8;
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum5Utf8 => "\"object\""u8;
                /// <summary>
                /// A constant for the <c>enum</c> keyword.
                /// </summary>
                public static ReadOnlySpan<byte> Enum6Utf8 => "\"string\""u8;

                /// <summary>
                /// Core type validation.
                /// </summary>
                /// <param name="valueKind">The <see cref="JsonValueKind" /> of the value to validate.</param>
                /// <param name="validationContext">The current validation context.</param>
                /// <param name="level">The current validation level.</param>
                /// <returns>The resulting validation context after validation.</returns>
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                internal static ValidationContext TypeValidationHandler(
                    JsonValueKind valueKind,
                    in ValidationContext validationContext,
                    ValidationLevel level = ValidationLevel.Flag)
                {
                    return Corvus.Json.ValidateWithoutCoreType.TypeString(valueKind, validationContext, level, "type");
                }

                /// <summary>
                /// Composition validation (any-of).
                /// </summary>
                /// <param name="value">The value to validate.</param>
                /// <param name="validationContext">The current validation context.</param>
                /// <param name="level">The current validation level.</param>
                /// <returns>The resulting validation context after validation.</returns>
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                internal static ValidationContext CompositionAnyOfValidationHandler(
                    in TypeEntity value,
                    in ValidationContext validationContext,
                    ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext;
                    result = ValidateEnum(value, result, level);
                    if (!result.IsValid && level == ValidationLevel.Flag)
                    {
                        return result;
                    }

                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    static ValidationContext ValidateEnum(in TypeEntity value, in ValidationContext validationContext, ValidationLevel level)
                    {
                        ValidationContext result = validationContext;
                        bool enumFoundValid = false;
                        enumFoundValid = value.Equals(CorvusValidation.Enum1);
                        if (!enumFoundValid)
                        {
                            enumFoundValid = value.Equals(CorvusValidation.Enum2);
                        }
                        if (!enumFoundValid)
                        {
                            enumFoundValid = value.Equals(CorvusValidation.Enum3);
                        }
                        if (!enumFoundValid)
                        {
                            enumFoundValid = value.Equals(CorvusValidation.Enum4);
                        }
                        if (!enumFoundValid)
                        {
                            enumFoundValid = value.Equals(CorvusValidation.Enum5);
                        }
                        if (!enumFoundValid)
                        {
                            enumFoundValid = value.Equals(CorvusValidation.Enum6);
                        }

                        if (enumFoundValid)
                        {
                            if (level >= ValidationLevel.Verbose)
                            {
                                result = result.WithResult(isValid: true, "Validation enum - validated against the enumeration.", "enum");
                            }
                        }
                        else
                        {
                            if (level >= ValidationLevel.Basic)
                            {
                                result = result.WithResult(isValid: false, "Validation enum - did not validate against the enumeration.", "enum");
                            }
                            else
                            {
                                result = result.WithResult(isValid: false);
                            }
                        }

                        return result;
                    }

                    return result;
                }
            }
        }
    }
}
