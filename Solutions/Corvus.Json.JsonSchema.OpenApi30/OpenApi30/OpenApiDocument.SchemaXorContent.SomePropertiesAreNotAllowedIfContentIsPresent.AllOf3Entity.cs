//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Buffers;
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.OpenApi30;

/// <summary>
/// Generated from JSON Schema.
/// </summary>
/// <remarks>
/// <para>
/// The description of OpenAPI v3.0.x documents, as defined by https://spec.openapis.org/oas/v3.0.3
/// </para>
/// </remarks>
public readonly partial struct OpenApiDocument
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Schema and content are mutually exclusive, at least one is required
    /// </para>
    /// </remarks>
    public readonly partial struct SchemaXorContent
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Some properties are not allowed if content is present
        /// </para>
        /// </remarks>
        public readonly partial struct SomePropertiesAreNotAllowedIfContentIsPresent
        {
            /// <summary>
            /// Generated from JSON Schema.
            /// </summary>
            [System.Text.Json.Serialization.JsonConverter(typeof(Corvus.Json.Internal.JsonValueConverter<AllOf3Entity>))]
            public readonly partial struct AllOf3Entity
                : IJsonValue<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.SchemaXorContent.SomePropertiesAreNotAllowedIfContentIsPresent.AllOf3Entity>
            {
                private readonly Backing backing;
                private readonly JsonElement jsonElementBacking;
                private readonly string stringBacking;
                private readonly bool boolBacking;
                private readonly BinaryJsonNumber numberBacking;
                private readonly ImmutableList<JsonAny> arrayBacking;
                private readonly ImmutableList<JsonObjectProperty> objectBacking;

                /// <summary>
                /// Initializes a new instance of the <see cref="AllOf3Entity"/> struct.
                /// </summary>
                public AllOf3Entity()
                {
                    this.jsonElementBacking = default;
                    this.backing = Backing.JsonElement;
                    this.stringBacking = string.Empty;
                    this.boolBacking = default;
                    this.numberBacking = default;
                    this.arrayBacking = ImmutableList<JsonAny>.Empty;
                    this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref="AllOf3Entity"/> struct.
                /// </summary>
                /// <param name="value">The value from which to construct the instance.</param>
                public AllOf3Entity(in JsonElement value)
                {
                    this.jsonElementBacking = value;
                    this.backing = Backing.JsonElement;
                    this.stringBacking = string.Empty;
                    this.boolBacking = default;
                    this.numberBacking = default;
                    this.arrayBacking = ImmutableList<JsonAny>.Empty;
                    this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref="AllOf3Entity"/> struct.
                /// </summary>
                /// <param name="value">The value from which to construct the instance.</param>
                public AllOf3Entity(ImmutableList<JsonAny> value)
                {
                    this.backing = Backing.Array;
                    this.jsonElementBacking = default;
                    this.stringBacking = string.Empty;
                    this.boolBacking = default;
                    this.numberBacking = default;
                    this.arrayBacking = value;
                    this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref="AllOf3Entity"/> struct.
                /// </summary>
                /// <param name="value">The value from which to construct the instance.</param>
                public AllOf3Entity(bool value)
                {
                    this.backing = Backing.Bool;
                    this.jsonElementBacking = default;
                    this.stringBacking = string.Empty;
                    this.boolBacking = value;
                    this.numberBacking = default;
                    this.arrayBacking = ImmutableList<JsonAny>.Empty;
                    this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref="AllOf3Entity"/> struct.
                /// </summary>
                /// <param name="value">The value from which to construct the instance.</param>
                public AllOf3Entity(BinaryJsonNumber value)
                {
                    this.backing = Backing.Number;
                    this.jsonElementBacking = default;
                    this.stringBacking = string.Empty;
                    this.boolBacking = default;
                    this.numberBacking = value;
                    this.arrayBacking = ImmutableList<JsonAny>.Empty;
                    this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref="AllOf3Entity"/> struct.
                /// </summary>
                /// <param name="value">The value from which to construct the instance.</param>
                public AllOf3Entity(ImmutableList<JsonObjectProperty> value)
                {
                    this.backing = Backing.Object;
                    this.jsonElementBacking = default;
                    this.stringBacking = string.Empty;
                    this.boolBacking = default;
                    this.numberBacking = default;
                    this.arrayBacking = ImmutableList<JsonAny>.Empty;
                    this.objectBacking = value;
                }

                /// <summary>
                /// Initializes a new instance of the <see cref="AllOf3Entity"/> struct.
                /// </summary>
                /// <param name="value">The value from which to construct the instance.</param>
                public AllOf3Entity(string value)
                {
                    this.backing = Backing.String;
                    this.jsonElementBacking = default;
                    this.stringBacking = value;
                    this.boolBacking = default;
                    this.numberBacking = default;
                    this.arrayBacking = ImmutableList<JsonAny>.Empty;
                    this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
                }

                /// <summary>
                /// Gets the schema location from which this type was generated.
                /// </summary>
                public static string SchemaLocation { get; } = "https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/oneOf/1/allOf/3";

                /// <summary>
                /// Gets a Null instance.
                /// </summary>
                public static AllOf3Entity Null { get; } = new(JsonValueHelpers.NullElement);

                /// <summary>
                /// Gets an Undefined instance.
                /// </summary>
                public static AllOf3Entity Undefined { get; }

                /// <summary>
                /// Gets the default instance.
                /// </summary>
                public static AllOf3Entity DefaultInstance { get; }

                /// <inheritdoc/>
                public JsonAny AsAny
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            return new(this.jsonElementBacking);
                        }

                        if ((this.backing & Backing.String) != 0)
                        {
                            return new(this.stringBacking);
                        }

                        if ((this.backing & Backing.Bool) != 0)
                        {
                            return new(this.boolBacking);
                        }

                        if ((this.backing & Backing.Number) != 0)
                        {
                            return new(this.numberBacking);
                        }

                        if ((this.backing & Backing.Array) != 0)
                        {
                            return new(this.arrayBacking);
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            return new(this.objectBacking);
                        }

                        if ((this.backing & Backing.Null) != 0)
                        {
                            return JsonAny.Null;
                        }

                        return JsonAny.Undefined;
                    }
                }

                /// <inheritdoc/>
                public JsonElement AsJsonElement
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            return this.jsonElementBacking;
                        }

                        if ((this.backing & Backing.String) != 0)
                        {
                            return JsonValueHelpers.StringToJsonElement(this.stringBacking);
                        }

                        if ((this.backing & Backing.Bool) != 0)
                        {
                            return JsonValueHelpers.BoolToJsonElement(this.boolBacking);
                        }

                        if ((this.backing & Backing.Number) != 0)
                        {
                            return JsonValueHelpers.NumberToJsonElement(this.numberBacking);
                        }

                        if ((this.backing & Backing.Array) != 0)
                        {
                            return JsonValueHelpers.ArrayToJsonElement(this.arrayBacking);
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            return JsonValueHelpers.ObjectToJsonElement(this.objectBacking);
                        }

                        if ((this.backing & Backing.Null) != 0)
                        {
                            return JsonValueHelpers.NullElement;
                        }

                        return default;
                    }
                }

                /// <inheritdoc/>
                public JsonString AsString
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            return new(this.jsonElementBacking);
                        }

                        if ((this.backing & Backing.String) != 0)
                        {
                            return new(this.stringBacking);
                        }

                        throw new InvalidOperationException();
                    }
                }

                /// <inheritdoc/>
                public JsonBoolean AsBoolean
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            return new(this.jsonElementBacking);
                        }

                        if ((this.backing & Backing.Bool) != 0)
                        {
                            return new(this.boolBacking);
                        }

                        throw new InvalidOperationException();
                    }
                }

                /// <inheritdoc/>
                public JsonNumber AsNumber
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            return new(this.jsonElementBacking);
                        }

                        if ((this.backing & Backing.Number) != 0)
                        {
                            return new(this.numberBacking);
                        }

                        throw new InvalidOperationException();
                    }
                }

                /// <inheritdoc/>
                public JsonObject AsObject
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            return new(this.jsonElementBacking);
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            return new(this.objectBacking);
                        }

                        throw new InvalidOperationException();
                    }
                }

                /// <inheritdoc/>
                public JsonArray AsArray
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            return new(this.jsonElementBacking);
                        }

                        if ((this.backing & Backing.Array) != 0)
                        {
                            return new(this.arrayBacking);
                        }

                        throw new InvalidOperationException();
                    }
                }

                /// <inheritdoc/>
                public bool HasJsonElementBacking
                {
                    get
                    {
                        return (this.backing & Backing.JsonElement) != 0;
                    }
                }

                /// <inheritdoc/>
                public bool HasDotnetBacking
                {
                    get
                    {
                        return (this.backing & Backing.Dotnet) != 0;
                    }
                }

                /// <inheritdoc/>
                public JsonValueKind ValueKind
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            return this.jsonElementBacking.ValueKind;
                        }

                        if ((this.backing & Backing.String) != 0)
                        {
                            return JsonValueKind.String;
                        }

                        if ((this.backing & Backing.Bool) != 0)
                        {
                            return this.boolBacking ? JsonValueKind.True : JsonValueKind.False;
                        }

                        if ((this.backing & Backing.Number) != 0)
                        {
                            return JsonValueKind.Number;
                        }

                        if ((this.backing & Backing.Array) != 0)
                        {
                            return JsonValueKind.Array;
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            return JsonValueKind.Object;
                        }

                        if ((this.backing & Backing.Null) != 0)
                        {
                            return JsonValueKind.Null;
                        }

                        return JsonValueKind.Undefined;
                    }
                }

                /// <summary>
                /// Conversion from JsonAny.
                /// </summary>
                /// <param name="value">The value from which to convert.</param>
                public static implicit operator AllOf3Entity(JsonAny value)
                {
                    return value.As<AllOf3Entity>();
                }

                /// <summary>
                /// Conversion to JsonAny.
                /// </summary>
                /// <param name="value">The value from which to convert.</param>
                public static implicit operator JsonAny(AllOf3Entity value)
                {
                    return value.AsAny;
                }

                /// <summary>
                /// Operator ==.
                /// </summary>
                /// <param name="left">The lhs of the operator.</param>
                /// <param name="right">The rhs of the operator.</param>
                /// <returns>
                /// <c>True</c> if the values are equal.
                /// </returns>
                public static bool operator ==(in AllOf3Entity left, in AllOf3Entity right)
                {
                    return left.Equals(right);
                }

                /// <summary>
                /// Operator !=.
                /// </summary>
                /// <param name="left">The lhs of the operator.</param>
                /// <param name="right">The rhs of the operator.</param>
                /// <returns>
                /// <c>True</c> if the values are not equal.
                /// </returns>
                public static bool operator !=(in AllOf3Entity left, in AllOf3Entity right)
                {
                    return !left.Equals(right);
                }

                /// <summary>
                /// Gets an instance of the JSON value from a <see cref="JsonElement"/> value.
                /// </summary>
                /// <param name="value">The <see cref="JsonElement"/> value from which to instantiate the instance.</param>
                /// <returns>An instance of this type, initialized from the <see cref="JsonElement"/>.</returns>
                /// <remarks>The returned value will have a <see cref = "IJsonValue.ValueKind"/> of <see cref = "JsonValueKind.Undefined"/> if the
                /// value cannot be constructed from the given instance (e.g. because they have an incompatible .NET backing type).
                /// </remarks>
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                public static AllOf3Entity FromJson(in JsonElement value)
                {
                    return new(value);
                }

                /// <summary>
                /// Gets an instance of the JSON value from a <see cref="JsonAny"/> value.
                /// </summary>
                /// <param name="value">The <see cref="JsonAny"/> value from which to instantiate the instance.</param>
                /// <returns>An instance of this type, initialized from the <see cref="JsonAny"/> value.</returns>
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                public static AllOf3Entity FromAny(in JsonAny value)
                {
                    if (value.HasJsonElementBacking)
                    {
                        return new(value.AsJsonElement);
                    }

                    return value.ValueKind switch
                    {
                        JsonValueKind.String => new(value.AsString.GetString()!),
                        JsonValueKind.True => new(true),
                        JsonValueKind.False => new(false),
                        JsonValueKind.Number => new(value.AsNumber.AsBinaryJsonNumber),
                        JsonValueKind.Array => new(value.AsArray.AsImmutableList()),
                        JsonValueKind.Object => new(value.AsObject.AsPropertyBacking()),
                        JsonValueKind.Null => Null,
                        _ => Undefined,
                    };
                }

                /// <summary>
                /// Gets an instance of the JSON value from the provided value.
                /// </summary>
                /// <typeparam name="TValue">The type of the value.</typeparam>
                /// <param name="value">The value from which to instantiate the instance.</param>
                /// <returns>An instance of this type, initialized from the provided value.</returns>
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                public static AllOf3Entity FromBoolean<TValue>(in TValue value)
                    where TValue : struct, IJsonBoolean<TValue>
                {
                    if (value.HasJsonElementBacking)
                    {
                        return new(value.AsJsonElement);
                    }

                    return value.ValueKind switch
                    {
                        JsonValueKind.True => new(true),
                        JsonValueKind.False => new(false),
                        JsonValueKind.Null => Null,
                        _ => Undefined,
                    };
                }

                /// <summary>
                /// Gets an instance of the JSON value from the provided value.
                /// </summary>
                /// <typeparam name="TValue">The type of the value.</typeparam>
                /// <param name="value">The value from which to instantiate the instance.</param>
                /// <returns>An instance of this type, initialized from the provided value.</returns>
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                public static AllOf3Entity FromString<TValue>(in TValue value)
                    where TValue : struct, IJsonString<TValue>
                {
                    if (value.HasJsonElementBacking)
                    {
                        return new(value.AsJsonElement);
                    }

                    return value.ValueKind switch
                    {
                        JsonValueKind.String => new(value.GetString()!),
                        JsonValueKind.Null => Null,
                        _ => Undefined,
                    };
                }

                /// <summary>
                /// Gets an instance of the JSON value from the provided value.
                /// </summary>
                /// <typeparam name="TValue">The type of the value.</typeparam>
                /// <param name="value">The value from which to instantiate the instance.</param>
                /// <returns>An instance of this type, initialized from the provided value.</returns>
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                public static AllOf3Entity FromNumber<TValue>(in TValue value)
                    where TValue : struct, IJsonNumber<TValue>
                {
                    if (value.HasJsonElementBacking)
                    {
                        return new(value.AsJsonElement);
                    }

                    return value.ValueKind switch
                    {
                        JsonValueKind.Number => new(value.AsBinaryJsonNumber),
                        JsonValueKind.Null => Null,
                        _ => Undefined,
                    };
                }

                /// <summary>
                /// Gets an instance of the JSON value from the provided value.
                /// </summary>
                /// <typeparam name="TValue">The type of the value.</typeparam>
                /// <param name="value">The value from which to instantiate the instance.</param>
                /// <returns>An instance of this type, initialized from the provided value.</returns>
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                public static AllOf3Entity FromObject<TValue>(in TValue value)
                    where TValue : struct, IJsonObject<TValue>
                {
                    if (value.HasJsonElementBacking)
                    {
                        return new(value.AsJsonElement);
                    }

                    return value.ValueKind switch
                    {
                        JsonValueKind.Object => new(value.AsPropertyBacking()),
                        JsonValueKind.Null => Null,
                        _ => Undefined,
                    };
                }

                /// <summary>
                /// Gets an instance of the JSON value from the provided value.
                /// </summary>
                /// <typeparam name="TValue">The type of the value.</typeparam>
                /// <param name="value">The value from which to instantiate the instance.</param>
                /// <returns>An instance of this type, initialized from the provided value.</returns>
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                public static AllOf3Entity FromArray<TValue>(in TValue value)
                    where TValue : struct, IJsonArray<TValue>
                {
                    if (value.HasJsonElementBacking)
                    {
                        return new(value.AsJsonElement);
                    }

                    return value.ValueKind switch
                    {
                        JsonValueKind.Array => new(value.AsImmutableList()),
                        JsonValueKind.Null => Null,
                        _ => Undefined,
                    };
                }

                /// <summary>
                /// Parses the AllOf3Entity.
                /// </summary>
                /// <param name="source">The source of the JSON string to parse.</param>
                /// <param name="options">The (optional) JsonDocumentOptions.</param>
                public static AllOf3Entity Parse(string source, JsonDocumentOptions options = default)
                {
                    using var jsonDocument = JsonDocument.Parse(source, options);
                    return new(jsonDocument.RootElement.Clone());
                }

                /// <summary>
                /// Parses the AllOf3Entity.
                /// </summary>
                /// <param name="source">The source of the JSON string to parse.</param>
                /// <param name="options">The (optional) JsonDocumentOptions.</param>
                public static AllOf3Entity Parse(Stream source, JsonDocumentOptions options = default)
                {
                    using var jsonDocument = JsonDocument.Parse(source, options);
                    return new(jsonDocument.RootElement.Clone());
                }

                /// <summary>
                /// Parses the AllOf3Entity.
                /// </summary>
                /// <param name="source">The source of the JSON string to parse.</param>
                /// <param name="options">The (optional) JsonDocumentOptions.</param>
                public static AllOf3Entity Parse(ReadOnlyMemory<byte> source, JsonDocumentOptions options = default)
                {
                    using var jsonDocument = JsonDocument.Parse(source, options);
                    return new(jsonDocument.RootElement.Clone());
                }

                /// <summary>
                /// Parses the AllOf3Entity.
                /// </summary>
                /// <param name="source">The source of the JSON string to parse.</param>
                /// <param name="options">The (optional) JsonDocumentOptions.</param>
                public static AllOf3Entity Parse(ReadOnlyMemory<char> source, JsonDocumentOptions options = default)
                {
                    using var jsonDocument = JsonDocument.Parse(source, options);
                    return new(jsonDocument.RootElement.Clone());
                }

                /// <summary>
                /// Parses the AllOf3Entity.
                /// </summary>
                /// <param name="source">The source of the JSON string to parse.</param>
                /// <param name="options">The (optional) JsonDocumentOptions.</param>
                public static AllOf3Entity Parse(ReadOnlySequence<byte> source, JsonDocumentOptions options = default)
                {
                    using var jsonDocument = JsonDocument.Parse(source, options);
                    return new(jsonDocument.RootElement.Clone());
                }

                /// <summary>
                /// Parses the AllOf3Entity.
                /// </summary>
                /// <param name="source">The source of the JSON string to parse.</param>
                public static AllOf3Entity ParseValue(string source)
                {
#if NET8_0_OR_GREATER
                    return IJsonValue<AllOf3Entity>.ParseValue(source);
#else
                    return JsonValueHelpers.ParseValue<AllOf3Entity>(source.AsSpan());
#endif
                }

                /// <summary>
                /// Parses the AllOf3Entity.
                /// </summary>
                /// <param name="source">The source of the JSON string to parse.</param>
                public static AllOf3Entity ParseValue(ReadOnlySpan<char> source)
                {
#if NET8_0_OR_GREATER
                    return IJsonValue<AllOf3Entity>.ParseValue(source);
#else
                    return JsonValueHelpers.ParseValue<AllOf3Entity>(source);
#endif
                }

                /// <summary>
                /// Parses the AllOf3Entity.
                /// </summary>
                /// <param name="source">The source of the JSON string to parse.</param>
                public static AllOf3Entity ParseValue(ReadOnlySpan<byte> source)
                {
#if NET8_0_OR_GREATER
                    return IJsonValue<AllOf3Entity>.ParseValue(source);
#else
                    return JsonValueHelpers.ParseValue<AllOf3Entity>(source);
#endif
                }

                /// <summary>
                /// Parses the AllOf3Entity.
                /// </summary>
                /// <param name="source">The source of the JSON string to parse.</param>
                public static AllOf3Entity ParseValue(ref Utf8JsonReader source)
                {
#if NET8_0_OR_GREATER
                    return IJsonValue<AllOf3Entity>.ParseValue(ref source);
#else
                    return JsonValueHelpers.ParseValue<AllOf3Entity>(ref source);
#endif
                }

                /// <summary>
                /// Gets the value as an instance of the target value.
                /// </summary>
                /// <typeparam name="TTarget">The type of the target.</typeparam>
                /// <returns>An instance of the target type.</returns>
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                public TTarget As<TTarget>()
                    where TTarget : struct, IJsonValue<TTarget>
                {
#if NET8_0_OR_GREATER
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        return TTarget.FromJson(this.jsonElementBacking);
                    }

                    if ((this.backing & Backing.String) != 0)
                    {
                        return TTarget.FromString(this.AsString);
                    }

                    if ((this.backing & Backing.Bool) != 0)
                    {
                        return TTarget.FromBoolean(this.AsBoolean);
                    }

                    if ((this.backing & Backing.Number) != 0)
                    {
                        return TTarget.FromNumber(this.AsNumber);
                    }

                    if ((this.backing & Backing.Array) != 0)
                    {
                        return TTarget.FromArray(this.AsArray);
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        return TTarget.FromObject(this.AsObject);
                    }

                    if ((this.backing & Backing.Null) != 0)
                    {
                        return TTarget.Null;
                    }

                    return TTarget.Undefined;
#else
                    return this.As<AllOf3Entity, TTarget>();
#endif
                }

                /// <inheritdoc/>
                public override bool Equals(object? obj)
                {
                    return
                        (obj is IJsonValue jv && this.Equals(jv.As<AllOf3Entity>())) ||
                        (obj is null && this.IsNull());
                }

                /// <inheritdoc/>
                public bool Equals<T>(in T other)
                    where T : struct, IJsonValue<T>
                {
                    return this.Equals(other.As<AllOf3Entity>());
                }

                /// <summary>
                /// Equality comparison.
                /// </summary>
                /// <param name="other">The other item with which to compare.</param>
                /// <returns><see langword="true"/> if the values were equal.</returns>
                public bool Equals(in AllOf3Entity other)
                {
                    JsonValueKind thisKind = this.ValueKind;
                    JsonValueKind otherKind = other.ValueKind;
                    if (thisKind != otherKind)
                    {
                        return false;
                    }

                    if (thisKind == JsonValueKind.Null || thisKind == JsonValueKind.Undefined)
                    {
                        return true;
                    }

                    if (thisKind == JsonValueKind.Array)
                    {
                        JsonArray thisArray = this.AsArray;
                        JsonArray otherArray = other.AsArray;
                        JsonArrayEnumerator lhs = thisArray.EnumerateArray();
                        JsonArrayEnumerator rhs = otherArray.EnumerateArray();
                        while (lhs.MoveNext())
                        {
                            if (!rhs.MoveNext())
                            {
                                return false;
                            }

                            if (!lhs.Current.Equals(rhs.Current))
                            {
                                return false;
                            }
                        }

                        return !rhs.MoveNext();
                    }

                    if (thisKind == JsonValueKind.True || thisKind == JsonValueKind.False)
                    {
                        return true;
                    }

                    if (thisKind == JsonValueKind.Number)
                    {
                        if (this.backing == Backing.Number && other.backing == Backing.Number)
                        {
                            return BinaryJsonNumber.Equals(this.numberBacking, other.numberBacking);
                        }

                        if (this.backing == Backing.Number && other.backing == Backing.JsonElement)
                        {
                            return BinaryJsonNumber.Equals(this.numberBacking, other.jsonElementBacking);
                        }

                        if (this.backing == Backing.JsonElement && other.backing == Backing.Number)
                        {
                            return BinaryJsonNumber.Equals(this.jsonElementBacking, other.numberBacking);
                        }

                        if (this.jsonElementBacking.TryGetDouble(out double lDouble))
                        {
                            if (other.jsonElementBacking.TryGetDouble(out double rDouble))
                            {
                                return lDouble.Equals(rDouble);
                            }
                        }

                        if (this.jsonElementBacking.TryGetDecimal(out decimal lDecimal))
                        {
                            if (other.jsonElementBacking.TryGetDecimal(out decimal rDecimal))
                            {
                                return lDecimal.Equals(rDecimal);
                            }
                        }
                    }

                    if (thisKind == JsonValueKind.Object)
                    {
                        JsonObject thisObject = this.AsObject;
                        JsonObject otherObject = other.AsObject;
                        int count = 0;
                        foreach (JsonObjectProperty property in thisObject.EnumerateObject())
                        {
                            if (!otherObject.TryGetProperty(property.Name, out JsonAny value) || !property.Value.Equals(value))
                            {
                                return false;
                            }

                            count++;
                        }

                        int otherCount = 0;
                        foreach (JsonObjectProperty otherProperty in otherObject.EnumerateObject())
                        {
                            otherCount++;
                            if (otherCount > count)
                            {
                                return false;
                            }
                        }

                        return count == otherCount;
                    }

                    if (thisKind == JsonValueKind.String)
                    {
                        if (this.backing == Backing.JsonElement)
                        {
                            if (other.backing == Backing.String)
                            {
                                return this.jsonElementBacking.ValueEquals(other.stringBacking);
                            }
                            else
                            {
                                other.jsonElementBacking.TryGetValue(CompareValues, this.jsonElementBacking, out bool areEqual);
                                return areEqual;
                            }

                        }

                        if (other.backing == Backing.JsonElement)
                        {
                            return other.jsonElementBacking.ValueEquals(this.stringBacking);
                        }

                        return this.stringBacking.Equals(other.stringBacking);

                        static bool CompareValues(ReadOnlySpan<byte> span, in JsonElement firstItem, out bool value)
                        {
                            value = firstItem.ValueEquals(span);
                            return true;
                        }
                    }

                    return false;
                }

                /// <inheritdoc/>
                public void WriteTo(Utf8JsonWriter writer)
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                        {
                            this.jsonElementBacking.WriteTo(writer);
                        }

                        return;
                    }

                    if ((this.backing & Backing.Array) != 0)
                    {
                        JsonValueHelpers.WriteItems(this.arrayBacking, writer);

                        return;
                    }

                    if ((this.backing & Backing.Bool) != 0)
                    {
                        writer.WriteBooleanValue(this.boolBacking);

                        return;
                    }

                    if ((this.backing & Backing.Number) != 0)
                    {
                        this.numberBacking.WriteTo(writer);

                        return;
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        JsonValueHelpers.WriteProperties(this.objectBacking, writer);

                        return;
                    }

                    if ((this.backing & Backing.String) != 0)
                    {
                        writer.WriteStringValue(this.stringBacking);

                        return;
                    }

                    if ((this.backing & Backing.Null) != 0)
                    {
                        writer.WriteNullValue();

                        return;
                    }
                }

                /// <inheritdoc/>
                public override int GetHashCode()
                {
                    return this.ValueKind switch
                    {
                        JsonValueKind.Array => JsonValueHelpers.GetArrayHashCode(((IJsonValue)this).AsArray),
                        JsonValueKind.Object => JsonValueHelpers.GetObjectHashCode(((IJsonValue)this).AsObject),
                        JsonValueKind.Number => JsonValueHelpers.GetHashCodeForNumber(((IJsonValue)this).AsNumber),
                        JsonValueKind.String => JsonValueHelpers.GetHashCodeForString(((IJsonValue)this).AsString),
                        JsonValueKind.True => true.GetHashCode(),
                        JsonValueKind.False => false.GetHashCode(),
                        JsonValueKind.Null => JsonValueHelpers.NullHashCode,
                        _ => JsonValueHelpers.UndefinedHashCode,
                    };
                }

                /// <inheritdoc/>
                public override string ToString()
                {
                    return this.Serialize();
                }
            }
        }
    }
}
