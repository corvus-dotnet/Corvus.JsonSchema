//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.OpenApi30;
public readonly partial struct OpenApiDocument
{
    public readonly partial struct SchemaXorContent
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Some properties are not allowed if content is present
        /// </para>
        /// </remarks>
        public readonly partial struct SomePropertiesAreNotAllowedIfContentIsPresent
        {
            private ValidationContext ValidateAllOf(in ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (level > ValidationLevel.Basic)
                {
                    result = result.PushValidationLocationProperty("allOf");
                }

                ValidationContext childContextBase = result;
                ValidationContext childContext0 = childContextBase;
                if (level > ValidationLevel.Basic)
                {
                    childContext0 = childContext0.PushValidationLocationArrayIndex(0);
                }

                ValidationContext allOfResult0 = this.As<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.SchemaXorContent.SomePropertiesAreNotAllowedIfContentIsPresent.AllOf0Entity>().Validate(childContext0.CreateChildContext(), level);
                if (!allOfResult0.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult0, false).WithResult(isValid: false);
                        return result;
                    }
                }
                else
                {
                    result = result.MergeChildContext(allOfResult0, level >= ValidationLevel.Detailed);
                }

                ValidationContext childContext1 = childContextBase;
                if (level > ValidationLevel.Basic)
                {
                    childContext1 = childContext1.PushValidationLocationArrayIndex(1);
                }

                ValidationContext allOfResult1 = this.As<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.SchemaXorContent.SomePropertiesAreNotAllowedIfContentIsPresent.AllOf1Entity>().Validate(childContext1.CreateChildContext(), level);
                if (!allOfResult1.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.MergeChildContext(allOfResult1, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(allOfResult1, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult1, false).WithResult(isValid: false);
                        return result;
                    }
                }
                else
                {
                    result = result.MergeChildContext(allOfResult1, level >= ValidationLevel.Detailed);
                }

                ValidationContext childContext2 = childContextBase;
                if (level > ValidationLevel.Basic)
                {
                    childContext2 = childContext2.PushValidationLocationArrayIndex(2);
                }

                ValidationContext allOfResult2 = this.As<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.SchemaXorContent.SomePropertiesAreNotAllowedIfContentIsPresent.AllOf2Entity>().Validate(childContext2.CreateChildContext(), level);
                if (!allOfResult2.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.MergeChildContext(allOfResult2, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(allOfResult2, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult2, false).WithResult(isValid: false);
                        return result;
                    }
                }
                else
                {
                    result = result.MergeChildContext(allOfResult2, level >= ValidationLevel.Detailed);
                }

                ValidationContext childContext3 = childContextBase;
                if (level > ValidationLevel.Basic)
                {
                    childContext3 = childContext3.PushValidationLocationArrayIndex(3);
                }

                ValidationContext allOfResult3 = this.As<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.SchemaXorContent.SomePropertiesAreNotAllowedIfContentIsPresent.AllOf3Entity>().Validate(childContext3.CreateChildContext(), level);
                if (!allOfResult3.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.MergeChildContext(allOfResult3, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(allOfResult3, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult3, false).WithResult(isValid: false);
                        return result;
                    }
                }
                else
                {
                    result = result.MergeChildContext(allOfResult3, level >= ValidationLevel.Detailed);
                }

                ValidationContext childContext4 = childContextBase;
                if (level > ValidationLevel.Basic)
                {
                    childContext4 = childContext4.PushValidationLocationArrayIndex(4);
                }

                ValidationContext allOfResult4 = this.As<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.SchemaXorContent.SomePropertiesAreNotAllowedIfContentIsPresent.AllOf4Entity>().Validate(childContext4.CreateChildContext(), level);
                if (!allOfResult4.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = result.MergeChildContext(allOfResult4, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = result.MergeChildContext(allOfResult4, true).WithResult(isValid: false, "Validation 10.2.1.1. allOf - failed to validate against the allOf schema.");
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult4, false).WithResult(isValid: false);
                        return result;
                    }
                }
                else
                {
                    result = result.MergeChildContext(allOfResult4, level >= ValidationLevel.Detailed);
                }

                if (level > ValidationLevel.Basic)
                {
                    result = result.PopLocation(); // allOf
                }

                return result;
            }
        }
    }
}