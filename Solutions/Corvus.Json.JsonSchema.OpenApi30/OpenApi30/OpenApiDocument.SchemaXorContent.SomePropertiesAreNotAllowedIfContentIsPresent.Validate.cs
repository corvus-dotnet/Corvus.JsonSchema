//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace Corvus.Json.JsonSchema.OpenApi30;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
/// <remarks>
/// <para>
/// The description of OpenAPI v3.0.x documents, as defined by https://spec.openapis.org/oas/v3.0.3
/// </para>
/// </remarks>
public readonly partial struct OpenApiDocument
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Schema and content are mutually exclusive, at least one is required
    /// </para>
    /// </remarks>
    public readonly partial struct SchemaXorContent
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Some properties are not allowed if content is present
        /// </para>
        /// </remarks>
        public readonly partial struct SomePropertiesAreNotAllowedIfContentIsPresent
        {
            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext;
                if (level > ValidationLevel.Flag)
                {
                    result = result.UsingResults();
                }

                if (level > ValidationLevel.Basic)
                {
                    result = result.UsingStack();
                    result = result.PushSchemaLocation("https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/SchemaXORContent/oneOf/1");
                }

                JsonValueKind valueKind = this.ValueKind;
                result = CorvusValidation.CompositionAllOfValidationHandler(this, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = CorvusValidation.ObjectValidationHandler(this, valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                if (level > ValidationLevel.Basic)
                {
                    result = result.PopLocation();
                }

                return result;
            }

            /// <summary>
            /// Validation constants for the type.
            /// </summary>
            public static partial class CorvusValidation
            {
                /// <summary>
                /// Composition validation (all-of).
                /// </summary>
                /// <param name="value">The value to validate.</param>
                /// <param name="validationContext">The current validation context.</param>
                /// <param name="level">The current validation level.</param>
                /// <returns>The resulting validation context after validation.</returns>
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                internal static ValidationContext CompositionAllOfValidationHandler(
                    in SomePropertiesAreNotAllowedIfContentIsPresent value,
                    in ValidationContext validationContext,
                    ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext;
                    ValidationContext childContextBase = result;
                    ValidationContext allOfResult0 = childContextBase.CreateChildContext();
                    if (level > ValidationLevel.Basic)
                    {
                        allOfResult0 = allOfResult0.PushValidationLocationReducedPathModifier(new("#/allOf/0"));
                    }

                    allOfResult0 = value.As<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.SchemaXorContent.SomePropertiesAreNotAllowedIfContentIsPresent.AllOf0Entity>().Validate(allOfResult0, level);
                    if (!allOfResult0.IsValid)
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(allOfResult0, true).PushValidationLocationProperty("allOf").WithResult(isValid: false, "Validation - allOf failed to validate against the schema.").PopLocation();
                        }
                        else
                        {
                            result = result.MergeChildContext(allOfResult0, false).WithResult(isValid: false);
                            return result;
                        }
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult0, level >= ValidationLevel.Detailed);
                    }

                    ValidationContext allOfResult1 = childContextBase.CreateChildContext();
                    if (level > ValidationLevel.Basic)
                    {
                        allOfResult1 = allOfResult1.PushValidationLocationReducedPathModifier(new("#/allOf/1"));
                    }

                    allOfResult1 = value.As<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.SchemaXorContent.SomePropertiesAreNotAllowedIfContentIsPresent.AllOf1Entity>().Validate(allOfResult1, level);
                    if (!allOfResult1.IsValid)
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(allOfResult1, true).PushValidationLocationProperty("allOf").WithResult(isValid: false, "Validation - allOf failed to validate against the schema.").PopLocation();
                        }
                        else
                        {
                            result = result.MergeChildContext(allOfResult1, false).WithResult(isValid: false);
                            return result;
                        }
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult1, level >= ValidationLevel.Detailed);
                    }

                    ValidationContext allOfResult2 = childContextBase.CreateChildContext();
                    if (level > ValidationLevel.Basic)
                    {
                        allOfResult2 = allOfResult2.PushValidationLocationReducedPathModifier(new("#/allOf/2"));
                    }

                    allOfResult2 = value.As<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.SchemaXorContent.SomePropertiesAreNotAllowedIfContentIsPresent.AllOf2Entity>().Validate(allOfResult2, level);
                    if (!allOfResult2.IsValid)
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(allOfResult2, true).PushValidationLocationProperty("allOf").WithResult(isValid: false, "Validation - allOf failed to validate against the schema.").PopLocation();
                        }
                        else
                        {
                            result = result.MergeChildContext(allOfResult2, false).WithResult(isValid: false);
                            return result;
                        }
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult2, level >= ValidationLevel.Detailed);
                    }

                    ValidationContext allOfResult3 = childContextBase.CreateChildContext();
                    if (level > ValidationLevel.Basic)
                    {
                        allOfResult3 = allOfResult3.PushValidationLocationReducedPathModifier(new("#/allOf/3"));
                    }

                    allOfResult3 = value.As<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.SchemaXorContent.SomePropertiesAreNotAllowedIfContentIsPresent.AllOf3Entity>().Validate(allOfResult3, level);
                    if (!allOfResult3.IsValid)
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(allOfResult3, true).PushValidationLocationProperty("allOf").WithResult(isValid: false, "Validation - allOf failed to validate against the schema.").PopLocation();
                        }
                        else
                        {
                            result = result.MergeChildContext(allOfResult3, false).WithResult(isValid: false);
                            return result;
                        }
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult3, level >= ValidationLevel.Detailed);
                    }

                    ValidationContext allOfResult4 = childContextBase.CreateChildContext();
                    if (level > ValidationLevel.Basic)
                    {
                        allOfResult4 = allOfResult4.PushValidationLocationReducedPathModifier(new("#/allOf/4"));
                    }

                    allOfResult4 = value.As<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.SchemaXorContent.SomePropertiesAreNotAllowedIfContentIsPresent.AllOf4Entity>().Validate(allOfResult4, level);
                    if (!allOfResult4.IsValid)
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(allOfResult4, true).PushValidationLocationProperty("allOf").WithResult(isValid: false, "Validation - allOf failed to validate against the schema.").PopLocation();
                        }
                        else
                        {
                            result = result.MergeChildContext(allOfResult4, false).WithResult(isValid: false);
                            return result;
                        }
                    }
                    else
                    {
                        result = result.MergeChildContext(allOfResult4, level >= ValidationLevel.Detailed);
                    }

                    return result;
                }

                /// <summary>
                /// Object validation.
                /// </summary>
                /// <param name="value">The value to validate.</param>
                /// <param name="valueKind">The <see cref="JsonValueKind" /> of the value to validate.</param>
                /// <param name="validationContext">The current validation context.</param>
                /// <param name="level">The current validation level.</param>
                /// <returns>The resulting validation context after validation.</returns>
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                internal static ValidationContext ObjectValidationHandler(
                    in SomePropertiesAreNotAllowedIfContentIsPresent value,
                    JsonValueKind valueKind,
                    in ValidationContext validationContext,
                    ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Object)
                    {
                        if (level == ValidationLevel.Verbose)
                        {
                            ValidationContext ignoredResult = validationContext;
                            ignoredResult = ignoredResult.WithResult(isValid: true, "Validation required - ignored because the value is not an object", "required");
                            return ignoredResult;
                        }

                        return validationContext;
                    }

                    bool hasSeenContent = false;
                    int propertyCount = 0;
                    foreach (JsonObjectProperty property in value.EnumerateObject())
                    {
                        if (property.NameEquals(JsonPropertyNames.ContentUtf8, JsonPropertyNames.Content))
                        {
                            hasSeenContent = true;
                            result = result.WithLocalProperty(propertyCount);
                            if (level > ValidationLevel.Basic)
                            {
                                result = result.PushValidationLocationReducedPathModifierAndProperty(new(""), JsonPropertyNames.Content);
                            }

                            ValidationContext propertyResult = property.Value.As<Corvus.Json.JsonAny>().Validate(result.CreateChildContext(), level);
                            if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                            {
                                return propertyResult;
                            }

                            result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                            if (level > ValidationLevel.Basic)
                            {
                                result = result.PopLocation();
                            }
                        }

                        propertyCount++;
                    }

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifier(new("#/required/0"));
                    }

                    if (!hasSeenContent)
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "Validation required - the required property 'content' was not present.");
                        }
                        else
                        {
                            return ValidationContext.InvalidContext;
                        }
                    }
                    else if (level == ValidationLevel.Verbose)
                    {
                        result = result.WithResult(isValid: true, "Validation required - the required property 'content' was present.");
                    }

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }

                    return result;
                }
            }
        }
    }
}
