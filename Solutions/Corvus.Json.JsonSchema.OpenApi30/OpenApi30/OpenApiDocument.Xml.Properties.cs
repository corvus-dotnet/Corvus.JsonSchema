//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.OpenApi30;
public readonly partial struct OpenApiDocument
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct Xml
    {
        /// <summary>
        /// The well-known property names in the JSON object.
        /// </summary>
        public static class JsonPropertyNames
        {
            /// <summary>
            /// JSON property name for <see cref = "Attribute"/>.
            /// </summary>
            public static ReadOnlySpan<byte> AttributeUtf8 => "attribute"u8;

            /// <summary>
            /// JSON property name for <see cref = "Attribute"/>.
            /// </summary>
            public const string Attribute = "attribute";
            /// <summary>
            /// JSON property name for <see cref = "Name"/>.
            /// </summary>
            public static ReadOnlySpan<byte> NameUtf8 => "name"u8;

            /// <summary>
            /// JSON property name for <see cref = "Name"/>.
            /// </summary>
            public const string Name = "name";
            /// <summary>
            /// JSON property name for <see cref = "Namespace"/>.
            /// </summary>
            public static ReadOnlySpan<byte> NamespaceUtf8 => "namespace"u8;

            /// <summary>
            /// JSON property name for <see cref = "Namespace"/>.
            /// </summary>
            public const string Namespace = "namespace";
            /// <summary>
            /// JSON property name for <see cref = "Prefix"/>.
            /// </summary>
            public static ReadOnlySpan<byte> PrefixUtf8 => "prefix"u8;

            /// <summary>
            /// JSON property name for <see cref = "Prefix"/>.
            /// </summary>
            public const string Prefix = "prefix";
            /// <summary>
            /// JSON property name for <see cref = "Wrapped"/>.
            /// </summary>
            public static ReadOnlySpan<byte> WrappedUtf8 => "wrapped"u8;

            /// <summary>
            /// JSON property name for <see cref = "Wrapped"/>.
            /// </summary>
            public const string Wrapped = "wrapped";
        }

        /// <summary>
        /// Gets the (optional) <c>attribute</c> property.
        /// </summary>
        public Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Xml.AttributeEntity Attribute
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.AttributeUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Xml.AttributeEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Attribute, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Xml.AttributeEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>name</c> property.
        /// </summary>
        public Corvus.Json.JsonString Name
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.NameUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Name, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>namespace</c> property.
        /// </summary>
        public Corvus.Json.JsonUri Namespace
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.NamespaceUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonUri(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Namespace, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonUri>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>prefix</c> property.
        /// </summary>
        public Corvus.Json.JsonString Prefix
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.PrefixUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonString(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Prefix, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonString>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>wrapped</c> property.
        /// </summary>
        public Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Xml.WrappedEntity Wrapped
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.WrappedUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Xml.WrappedEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Wrapped, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Xml.WrappedEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Creates an instance of a <see cref = "Xml"/>.
        /// </summary>
        public static Xml Create(Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Xml.AttributeEntity? attribute = null, Corvus.Json.JsonString? name = null, Corvus.Json.JsonUri? @namespace = null, Corvus.Json.JsonString? prefix = null, Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Xml.WrappedEntity? wrapped = null)
        {
            var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
            if (attribute is Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Xml.AttributeEntity attribute__)
            {
                builder.Add(JsonPropertyNames.Attribute, attribute__.AsAny);
            }

            if (name is Corvus.Json.JsonString name__)
            {
                builder.Add(JsonPropertyNames.Name, name__.AsAny);
            }

            if (@namespace is Corvus.Json.JsonUri @namespace__)
            {
                builder.Add(JsonPropertyNames.Namespace, @namespace__.AsAny);
            }

            if (prefix is Corvus.Json.JsonString prefix__)
            {
                builder.Add(JsonPropertyNames.Prefix, prefix__.AsAny);
            }

            if (wrapped is Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Xml.WrappedEntity wrapped__)
            {
                builder.Add(JsonPropertyNames.Wrapped, wrapped__.AsAny);
            }

            return new(builder.ToImmutable());
        }

        /// <summary>
        /// Sets attribute.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Xml WithAttribute(in Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Xml.AttributeEntity value)
        {
            return this.SetProperty(JsonPropertyNames.Attribute, value);
        }

        /// <summary>
        /// Sets name.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Xml WithName(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(JsonPropertyNames.Name, value);
        }

        /// <summary>
        /// Sets namespace.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Xml WithNamespace(in Corvus.Json.JsonUri value)
        {
            return this.SetProperty(JsonPropertyNames.Namespace, value);
        }

        /// <summary>
        /// Sets prefix.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Xml WithPrefix(in Corvus.Json.JsonString value)
        {
            return this.SetProperty(JsonPropertyNames.Prefix, value);
        }

        /// <summary>
        /// Sets wrapped.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public Xml WithWrapped(in Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Xml.WrappedEntity value)
        {
            return this.SetProperty(JsonPropertyNames.Wrapped, value);
        }

        private static ValidationContext __CorvusValidateName(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateNamespace(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonUri>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidatePrefix(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateAttribute(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Xml.AttributeEntity>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateWrapped(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Xml.WrappedEntity>().Validate(validationContext, level);
        }

        /// <summary>
        /// Tries to get the validator for the given property.
        /// </summary>
        /// <param name = "property">The property for which to get the validator.</param>
        /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
        /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
        /// <returns><c>True</c> if the validator was found.</returns>
        private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
        {
            if (hasJsonElementBacking)
            {
                if (property.NameEquals(JsonPropertyNames.NameUtf8))
                {
                    propertyValidator = __CorvusValidateName;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.NamespaceUtf8))
                {
                    propertyValidator = __CorvusValidateNamespace;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.PrefixUtf8))
                {
                    propertyValidator = __CorvusValidatePrefix;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.AttributeUtf8))
                {
                    propertyValidator = __CorvusValidateAttribute;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.WrappedUtf8))
                {
                    propertyValidator = __CorvusValidateWrapped;
                    return true;
                }
            }
            else
            {
                if (property.NameEquals(JsonPropertyNames.Name))
                {
                    propertyValidator = __CorvusValidateName;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.Namespace))
                {
                    propertyValidator = __CorvusValidateNamespace;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.Prefix))
                {
                    propertyValidator = __CorvusValidatePrefix;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.Attribute))
                {
                    propertyValidator = __CorvusValidateAttribute;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.Wrapped))
                {
                    propertyValidator = __CorvusValidateWrapped;
                    return true;
                }
            }

            propertyValidator = null;
            return false;
        }
    }
}