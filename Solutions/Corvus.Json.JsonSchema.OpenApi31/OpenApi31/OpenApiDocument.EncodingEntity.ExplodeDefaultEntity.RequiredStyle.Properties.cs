//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.OpenApi31;
public readonly partial struct OpenApiDocument
{
    public readonly partial struct EncodingEntity
    {
        public readonly partial struct ExplodeDefaultEntity
        {
            /// <summary>
            /// Generated from JSON Schema.
            /// </summary>
            public readonly partial struct RequiredStyle
            {
                /// <summary>
                /// The well-known property names in the JSON object.
                /// </summary>
                public static class JsonPropertyNames
                {
                    /// <summary>
                    /// JSON property name for <see cref = "Style"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> StyleUtf8 => "style"u8;

                    /// <summary>
                    /// JSON property name for <see cref = "Style"/>.
                    /// </summary>
                    public const string Style = "style";
                }

                /// <summary>
                /// Gets the <c>style</c> property. If the instance is valid, this property will be not be <c>undefined</c>.
                /// </summary>
                public Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.EncodingEntity.ExplodeDefaultEntity.RequiredStyle.StyleEntity Style
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.StyleUtf8, out JsonElement result))
                            {
                                return new Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.EncodingEntity.ExplodeDefaultEntity.RequiredStyle.StyleEntity(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.Style, out JsonAny result))
                            {
                                return result.As<Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.EncodingEntity.ExplodeDefaultEntity.RequiredStyle.StyleEntity>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Creates an instance of a <see cref = "RequiredStyle"/>.
                /// </summary>
                public static RequiredStyle Create()
                {
                    var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
                    builder.Add(JsonPropertyNames.Style, new Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.EncodingEntity.ExplodeDefaultEntity.RequiredStyle.StyleEntity().AsAny);
                    return new(builder.ToImmutable());
                }

                private static ValidationContext __CorvusValidateStyle(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
                {
                    return property.ValueAs<Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.EncodingEntity.ExplodeDefaultEntity.RequiredStyle.StyleEntity>().Validate(validationContext, level);
                }

                /// <summary>
                /// Tries to get the validator for the given property.
                /// </summary>
                /// <param name = "property">The property for which to get the validator.</param>
                /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
                /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
                /// <returns><c>True</c> if the validator was found.</returns>
                private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
                {
                    if (hasJsonElementBacking)
                    {
                        if (property.NameEquals(JsonPropertyNames.StyleUtf8))
                        {
                            propertyValidator = __CorvusValidateStyle;
                            return true;
                        }
                    }
                    else
                    {
                        if (property.NameEquals(JsonPropertyNames.Style))
                        {
                            propertyValidator = __CorvusValidateStyle;
                            return true;
                        }
                    }

                    propertyValidator = null;
                    return false;
                }
            }
        }
    }
}