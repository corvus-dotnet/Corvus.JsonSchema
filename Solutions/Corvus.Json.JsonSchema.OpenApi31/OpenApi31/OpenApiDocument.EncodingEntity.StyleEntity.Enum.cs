//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.OpenApi31;
public readonly partial struct OpenApiDocument
{
    public readonly partial struct EncodingEntity
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        public readonly partial struct StyleEntity
        {
            /// <summary>
            /// Matches the value against each of the enumeration values, and returns the result of calling the provided match function for the first match found.
            /// </summary>
            /// <param name = "context">The context to pass to the match function.</param>
            /// <param name = "matchForm">The function to call if the value matches the JSON value "\"form\"".</param>
            /// <param name = "matchSpaceDelimited">The function to call if the value matches the JSON value "\"spaceDelimited\"".</param>
            /// <param name = "matchPipeDelimited">The function to call if the value matches the JSON value "\"pipeDelimited\"".</param>
            /// <param name = "matchDeepObject">The function to call if the value matches the JSON value "\"deepObject\"".</param>
            /// <param name = "defaultMatch">The fallback match.</param>
            public TOut Match<TIn, TOut>(in TIn context, Func<TIn, TOut> matchForm, Func<TIn, TOut> matchSpaceDelimited, Func<TIn, TOut> matchPipeDelimited, Func<TIn, TOut> matchDeepObject, Func<TIn, TOut> defaultMatch)
            {
                if (this.ValueKind == JsonValueKind.String)
                {
                    if (this.HasJsonElementBacking)
                    {
                        if (this.jsonElementBacking.ValueEquals(EnumValues.FormUtf8))
                        {
                            return matchForm(context);
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.SpaceDelimitedUtf8))
                        {
                            return matchSpaceDelimited(context);
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.PipeDelimitedUtf8))
                        {
                            return matchPipeDelimited(context);
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.DeepObjectUtf8))
                        {
                            return matchDeepObject(context);
                        }
                    }
                    else
                    {
                        switch (this.stringBacking)
                        {
                            case "form":
                                return matchForm(context);
                            case "spaceDelimited":
                                return matchSpaceDelimited(context);
                            case "pipeDelimited":
                                return matchPipeDelimited(context);
                            case "deepObject":
                                return matchDeepObject(context);
                            default:
                                break;
                        }
                    }
                }

                return defaultMatch(context);
            }

            /// <summary>
            /// Matches the value against each of the enumeration values, and returns the result of calling the provided match function for the first match found.
            /// </summary>
            /// <param name = "matchForm">The function to call if the value matches the JSON value "\"form\"".</param>
            /// <param name = "matchSpaceDelimited">The function to call if the value matches the JSON value "\"spaceDelimited\"".</param>
            /// <param name = "matchPipeDelimited">The function to call if the value matches the JSON value "\"pipeDelimited\"".</param>
            /// <param name = "matchDeepObject">The function to call if the value matches the JSON value "\"deepObject\"".</param>
            /// <param name = "defaultMatch">The fallback match.</param>
            public TOut Match<TOut>(Func<TOut> matchForm, Func<TOut> matchSpaceDelimited, Func<TOut> matchPipeDelimited, Func<TOut> matchDeepObject, Func<TOut> defaultMatch)
            {
                if (this.ValueKind == JsonValueKind.String)
                {
                    if (this.HasJsonElementBacking)
                    {
                        if (this.jsonElementBacking.ValueEquals(EnumValues.FormUtf8))
                        {
                            return matchForm();
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.SpaceDelimitedUtf8))
                        {
                            return matchSpaceDelimited();
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.PipeDelimitedUtf8))
                        {
                            return matchPipeDelimited();
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.DeepObjectUtf8))
                        {
                            return matchDeepObject();
                        }
                    }
                    else
                    {
                        switch (this.stringBacking)
                        {
                            case "form":
                                return matchForm();
                            case "spaceDelimited":
                                return matchSpaceDelimited();
                            case "pipeDelimited":
                                return matchPipeDelimited();
                            case "deepObject":
                                return matchDeepObject();
                            default:
                                break;
                        }
                    }
                }

                return defaultMatch();
            }

            /// <summary>
            /// Permitted values.
            /// </summary>
            public static class EnumValues
            {
                /// <summary>
                /// Gets "form" as a JSON value.
                /// </summary>
                public static readonly StyleEntity Form = StyleEntity.Parse("\"form\"");
                /// <summary>
                /// Gets "form" as a UTF8 string.
                /// </summary>
                public static ReadOnlySpan<byte> FormUtf8 => "form"u8;

                /// <summary>
                /// Gets "spaceDelimited" as a JSON value.
                /// </summary>
                public static readonly StyleEntity SpaceDelimited = StyleEntity.Parse("\"spaceDelimited\"");
                /// <summary>
                /// Gets "spaceDelimited" as a UTF8 string.
                /// </summary>
                public static ReadOnlySpan<byte> SpaceDelimitedUtf8 => "spaceDelimited"u8;

                /// <summary>
                /// Gets "pipeDelimited" as a JSON value.
                /// </summary>
                public static readonly StyleEntity PipeDelimited = StyleEntity.Parse("\"pipeDelimited\"");
                /// <summary>
                /// Gets "pipeDelimited" as a UTF8 string.
                /// </summary>
                public static ReadOnlySpan<byte> PipeDelimitedUtf8 => "pipeDelimited"u8;

                /// <summary>
                /// Gets "deepObject" as a JSON value.
                /// </summary>
                public static readonly StyleEntity DeepObject = StyleEntity.Parse("\"deepObject\"");
                /// <summary>
                /// Gets "deepObject" as a UTF8 string.
                /// </summary>
                public static ReadOnlySpan<byte> DeepObjectUtf8 => "deepObject"u8;

                /// <summary>
                /// Gets "form" as a JSON value.
                /// </summary>
                internal static readonly StyleEntity Item0 = StyleEntity.Parse("\"form\"");
                /// <summary>
                /// Gets "spaceDelimited" as a JSON value.
                /// </summary>
                internal static readonly StyleEntity Item1 = StyleEntity.Parse("\"spaceDelimited\"");
                /// <summary>
                /// Gets "pipeDelimited" as a JSON value.
                /// </summary>
                internal static readonly StyleEntity Item2 = StyleEntity.Parse("\"pipeDelimited\"");
                /// <summary>
                /// Gets "deepObject" as a JSON value.
                /// </summary>
                internal static readonly StyleEntity Item3 = StyleEntity.Parse("\"deepObject\"");
            }
        }
    }
}