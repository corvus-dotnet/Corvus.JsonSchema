//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace Corvus.Json.JsonSchema.OpenApi31;

/// <summary>
/// Generated from JSON Schema.
/// </summary>
/// <remarks>
/// <para>
/// The description of OpenAPI v3.1.x documents without schema validation, as defined by https://spec.openapis.org/oas/v3.1.0
/// </para>
/// </remarks>
public readonly partial struct OpenApiDocument
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct ExampleOrReference
    {
        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext;
            if (level > ValidationLevel.Flag)
            {
                result = result.UsingResults();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.UsingStack();
                result = result.PushSchemaLocation("https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/example-or-reference");
            }

            result = CorvusValidation.TernaryIfValidationHandler(this, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            return result;
        }

        private static partial class CorvusValidation
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static ValidationContext TernaryIfValidationHandler(
                in ExampleOrReference value,
                in ValidationContext validationContext,
                ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext;
                if (level > ValidationLevel.Basic)
                {
                    result = result.PushValidationLocationReducedPathModifier(new("#/if"));
                }

                ValidationContext ifResult = value.As<Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.ExampleOrReference.RequiredRef>().Validate(validationContext.CreateChildContext(), level);
                if (!ifResult.IsValid)
                {
                    if (level >= ValidationLevel.Verbose)
                    {
                        result = validationContext.MergeResults(true, level, ifResult);
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Verbose)
                    {
                        result = result.MergeChildContext(ifResult, true);
                    }
                    else
                    {
                        result = result.MergeChildContext(ifResult, false);
                    }
                }

                if (level > ValidationLevel.Basic)
                {
                    result = result.PopLocation();
                }

                if (ifResult.IsValid)
                {
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifier(new("#/then/$ref"));
                    }

                    ValidationContext thenResult = value.As<Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Reference>().Validate(validationContext.CreateChildContext(), level);
                    if (!thenResult.IsValid)
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, thenResult);
                            result = result.WithResult(isValid: false, "Validation then - failed to validate against the then schema");
                        }
                        else
                        {
                            result = validationContext.WithResult(isValid: false);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(thenResult, true);
                        }
                        else
                        {
                            result = result.MergeChildContext(thenResult, false);
                        }
                    }

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }

                if (!ifResult.IsValid)
                {
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifier(new("#/else/$ref"));
                    }

                    ValidationContext elseResult = value.As<Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Example>().Validate(validationContext.CreateChildContext(), level);
                    if (!elseResult.IsValid)
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = validationContext.MergeResults(false, level, ifResult, elseResult);
                            result = result.WithResult(isValid: false, "Validation else - failed to validate against the else schema");
                        }
                        else
                        {
                            result = validationContext.WithResult(isValid: false);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.MergeChildContext(elseResult, true);
                        }
                        else
                        {
                            result = result.MergeChildContext(elseResult, false);
                        }
                    }

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }

                return result;
            }
        }
    }
}
