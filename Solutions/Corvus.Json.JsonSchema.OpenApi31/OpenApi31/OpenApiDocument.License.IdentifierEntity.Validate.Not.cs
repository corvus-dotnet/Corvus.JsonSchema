//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.OpenApi31;
public readonly partial struct OpenApiDocument
{
    public readonly partial struct License
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        public readonly partial struct IdentifierEntity
        {
            private ValidationContext ValidateNot(ValidationContext validationContext, ValidationLevel level)
            {
                ValidationContext result = validationContext;
                if (level > ValidationLevel.Basic)
                {
                    result = result.PushValidationLocationProperty("not");
                }

                ValidationContext notResult = this.As<Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.License.IdentifierEntity.RequiredUrl>().Validate(validationContext.CreateChildContext(), level);
                if (notResult.IsValid)
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        result = validationContext.MergeResults(false, level, notResult).WithResult(isValid: false, "Validation 9.2.1.4. not - incorrectly validated successfully against the not schema.");
                    }
                    else if (level >= ValidationLevel.Basic)
                    {
                        result = validationContext.MergeResults(false, level, notResult).WithResult(isValid: false, "Validation 9.2.1.4. not - incorrectly validated succesfully against the not schema.");
                    }
                    else
                    {
                        result = validationContext.WithResult(isValid: false);
                    }
                }
                else if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeResults(result.IsValid, level, notResult);
                }

                if (level > ValidationLevel.Basic)
                {
                    result = result.PopLocation(); // not
                }

                return result;
            }
        }
    }
}