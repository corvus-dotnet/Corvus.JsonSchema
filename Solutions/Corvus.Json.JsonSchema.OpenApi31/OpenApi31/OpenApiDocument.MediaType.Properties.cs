//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.OpenApi31;
public readonly partial struct OpenApiDocument
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct MediaType
    {
        /// <summary>
        /// The well-known property names in the JSON object.
        /// </summary>
        public static class JsonPropertyNames
        {
            /// <summary>
            /// JSON property name for <see cref = "EncodingValue"/>.
            /// </summary>
            public static ReadOnlySpan<byte> EncodingValueUtf8 => "encoding"u8;

            /// <summary>
            /// JSON property name for <see cref = "EncodingValue"/>.
            /// </summary>
            public const string EncodingValue = "encoding";
            /// <summary>
            /// JSON property name for <see cref = "Example"/>.
            /// </summary>
            public static ReadOnlySpan<byte> ExampleUtf8 => "example"u8;

            /// <summary>
            /// JSON property name for <see cref = "Example"/>.
            /// </summary>
            public const string Example = "example";
            /// <summary>
            /// JSON property name for <see cref = "Examples"/>.
            /// </summary>
            public static ReadOnlySpan<byte> ExamplesUtf8 => "examples"u8;

            /// <summary>
            /// JSON property name for <see cref = "Examples"/>.
            /// </summary>
            public const string Examples = "examples";
            /// <summary>
            /// JSON property name for <see cref = "Schema"/>.
            /// </summary>
            public static ReadOnlySpan<byte> SchemaUtf8 => "schema"u8;

            /// <summary>
            /// JSON property name for <see cref = "Schema"/>.
            /// </summary>
            public const string Schema = "schema";
        }

        /// <summary>
        /// Gets the (optional) <c>encoding</c> property.
        /// </summary>
        public Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.MediaType.EncodingEntity EncodingValue
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.EncodingValueUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.MediaType.EncodingEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.EncodingValue, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.MediaType.EncodingEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>example</c> property.
        /// </summary>
        public Corvus.Json.JsonAny Example
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ExampleUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonAny(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Example, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonAny>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>examples</c> property.
        /// </summary>
        public Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Examples.ExamplesEntity Examples
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ExamplesUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Examples.ExamplesEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Examples, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Examples.ExamplesEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>schema</c> property.
        /// </summary>
        public Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Schema Schema
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.SchemaUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Schema(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Schema, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Schema>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Creates an instance of a <see cref = "MediaType"/>.
        /// </summary>
        public static MediaType Create(Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.MediaType.EncodingEntity? encodingValue = null, Corvus.Json.JsonAny? example = null, Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Examples.ExamplesEntity? examples = null, Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Schema? schema = null)
        {
            var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
            if (encodingValue is Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.MediaType.EncodingEntity encodingValue__)
            {
                builder.Add(JsonPropertyNames.EncodingValue, encodingValue__.AsAny);
            }

            if (example is Corvus.Json.JsonAny example__)
            {
                builder.Add(JsonPropertyNames.Example, example__.AsAny);
            }

            if (examples is Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Examples.ExamplesEntity examples__)
            {
                builder.Add(JsonPropertyNames.Examples, examples__.AsAny);
            }

            if (schema is Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Schema schema__)
            {
                builder.Add(JsonPropertyNames.Schema, schema__.AsAny);
            }

            return new(builder.ToImmutable());
        }

        /// <summary>
        /// Sets encoding.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public MediaType WithEncodingValue(in Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.MediaType.EncodingEntity value)
        {
            return this.SetProperty(JsonPropertyNames.EncodingValue, value);
        }

        /// <summary>
        /// Sets example.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public MediaType WithExample(in Corvus.Json.JsonAny value)
        {
            return this.SetProperty(JsonPropertyNames.Example, value);
        }

        /// <summary>
        /// Sets examples.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public MediaType WithExamples(in Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Examples.ExamplesEntity value)
        {
            return this.SetProperty(JsonPropertyNames.Examples, value);
        }

        /// <summary>
        /// Sets schema.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public MediaType WithSchema(in Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Schema value)
        {
            return this.SetProperty(JsonPropertyNames.Schema, value);
        }

        private static ValidationContext __CorvusValidateSchema(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Schema>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateEncodingValue(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.MediaType.EncodingEntity>().Validate(validationContext, level);
        }

        /// <summary>
        /// Tries to get the validator for the given property.
        /// </summary>
        /// <param name = "property">The property for which to get the validator.</param>
        /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
        /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
        /// <returns><c>True</c> if the validator was found.</returns>
        private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
        {
            if (hasJsonElementBacking)
            {
                if (property.NameEquals(JsonPropertyNames.SchemaUtf8))
                {
                    propertyValidator = __CorvusValidateSchema;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.EncodingValueUtf8))
                {
                    propertyValidator = __CorvusValidateEncodingValue;
                    return true;
                }
            }
            else
            {
                if (property.NameEquals(JsonPropertyNames.Schema))
                {
                    propertyValidator = __CorvusValidateSchema;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.EncodingValue))
                {
                    propertyValidator = __CorvusValidateEncodingValue;
                    return true;
                }
            }

            propertyValidator = null;
            return false;
        }
    }
}