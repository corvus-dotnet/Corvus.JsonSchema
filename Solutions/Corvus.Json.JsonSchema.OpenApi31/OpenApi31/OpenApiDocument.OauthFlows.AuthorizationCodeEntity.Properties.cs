//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.OpenApi31;
public readonly partial struct OpenApiDocument
{
    public readonly partial struct OauthFlows
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        public readonly partial struct AuthorizationCodeEntity
        {
            /// <summary>
            /// The well-known property names in the JSON object.
            /// </summary>
            public static class JsonPropertyNames
            {
                /// <summary>
                /// JSON property name for <see cref = "AuthorizationUrl"/>.
                /// </summary>
                public static ReadOnlySpan<byte> AuthorizationUrlUtf8 => "authorizationUrl"u8;

                /// <summary>
                /// JSON property name for <see cref = "AuthorizationUrl"/>.
                /// </summary>
                public const string AuthorizationUrl = "authorizationUrl";
                /// <summary>
                /// JSON property name for <see cref = "RefreshUrl"/>.
                /// </summary>
                public static ReadOnlySpan<byte> RefreshUrlUtf8 => "refreshUrl"u8;

                /// <summary>
                /// JSON property name for <see cref = "RefreshUrl"/>.
                /// </summary>
                public const string RefreshUrl = "refreshUrl";
                /// <summary>
                /// JSON property name for <see cref = "Scopes"/>.
                /// </summary>
                public static ReadOnlySpan<byte> ScopesUtf8 => "scopes"u8;

                /// <summary>
                /// JSON property name for <see cref = "Scopes"/>.
                /// </summary>
                public const string Scopes = "scopes";
                /// <summary>
                /// JSON property name for <see cref = "TokenUrl"/>.
                /// </summary>
                public static ReadOnlySpan<byte> TokenUrlUtf8 => "tokenUrl"u8;

                /// <summary>
                /// JSON property name for <see cref = "TokenUrl"/>.
                /// </summary>
                public const string TokenUrl = "tokenUrl";
            }

            /// <summary>
            /// Gets the <c>authorizationUrl</c> property. If the instance is valid, this property will be not be <c>undefined</c>.
            /// </summary>
            public Corvus.Json.JsonUri AuthorizationUrl
            {
                get
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            return default;
                        }

                        if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.AuthorizationUrlUtf8, out JsonElement result))
                        {
                            return new Corvus.Json.JsonUri(result);
                        }
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(JsonPropertyNames.AuthorizationUrl, out JsonAny result))
                        {
                            return result.As<Corvus.Json.JsonUri>();
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets the (optional) <c>refreshUrl</c> property.
            /// </summary>
            public Corvus.Json.JsonUri RefreshUrl
            {
                get
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            return default;
                        }

                        if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.RefreshUrlUtf8, out JsonElement result))
                        {
                            return new Corvus.Json.JsonUri(result);
                        }
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(JsonPropertyNames.RefreshUrl, out JsonAny result))
                        {
                            return result.As<Corvus.Json.JsonUri>();
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets the <c>scopes</c> property. If the instance is valid, this property will be not be <c>undefined</c>.
            /// </summary>
            public Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.MapOfStrings Scopes
            {
                get
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            return default;
                        }

                        if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ScopesUtf8, out JsonElement result))
                        {
                            return new Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.MapOfStrings(result);
                        }
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(JsonPropertyNames.Scopes, out JsonAny result))
                        {
                            return result.As<Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.MapOfStrings>();
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets the <c>tokenUrl</c> property. If the instance is valid, this property will be not be <c>undefined</c>.
            /// </summary>
            public Corvus.Json.JsonUri TokenUrl
            {
                get
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            return default;
                        }

                        if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.TokenUrlUtf8, out JsonElement result))
                        {
                            return new Corvus.Json.JsonUri(result);
                        }
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(JsonPropertyNames.TokenUrl, out JsonAny result))
                        {
                            return result.As<Corvus.Json.JsonUri>();
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Creates an instance of a <see cref = "AuthorizationCodeEntity"/>.
            /// </summary>
            public static AuthorizationCodeEntity Create(Corvus.Json.JsonUri authorizationUrl, Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.MapOfStrings scopes, Corvus.Json.JsonUri tokenUrl, Corvus.Json.JsonUri? refreshUrl = null)
            {
                var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
                builder.Add(JsonPropertyNames.AuthorizationUrl, authorizationUrl.AsAny);
                builder.Add(JsonPropertyNames.Scopes, scopes.AsAny);
                builder.Add(JsonPropertyNames.TokenUrl, tokenUrl.AsAny);
                if (refreshUrl is Corvus.Json.JsonUri refreshUrl__)
                {
                    builder.Add(JsonPropertyNames.RefreshUrl, refreshUrl__.AsAny);
                }

                return new(builder.ToImmutable());
            }

            /// <summary>
            /// Sets authorizationUrl.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public AuthorizationCodeEntity WithAuthorizationUrl(in Corvus.Json.JsonUri value)
            {
                return this.SetProperty(JsonPropertyNames.AuthorizationUrl, value);
            }

            /// <summary>
            /// Sets refreshUrl.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public AuthorizationCodeEntity WithRefreshUrl(in Corvus.Json.JsonUri value)
            {
                return this.SetProperty(JsonPropertyNames.RefreshUrl, value);
            }

            /// <summary>
            /// Sets scopes.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public AuthorizationCodeEntity WithScopes(in Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.MapOfStrings value)
            {
                return this.SetProperty(JsonPropertyNames.Scopes, value);
            }

            /// <summary>
            /// Sets tokenUrl.
            /// </summary>
            /// <param name = "value">The value to set.</param>
            /// <returns>The entity with the updated property.</returns>
            public AuthorizationCodeEntity WithTokenUrl(in Corvus.Json.JsonUri value)
            {
                return this.SetProperty(JsonPropertyNames.TokenUrl, value);
            }

            private static ValidationContext __CorvusValidateAuthorizationUrl(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
            {
                return property.ValueAs<Corvus.Json.JsonUri>().Validate(validationContext, level);
            }

            private static ValidationContext __CorvusValidateTokenUrl(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
            {
                return property.ValueAs<Corvus.Json.JsonUri>().Validate(validationContext, level);
            }

            private static ValidationContext __CorvusValidateScopes(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
            {
                return property.ValueAs<Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.MapOfStrings>().Validate(validationContext, level);
            }

            private static ValidationContext __CorvusValidateRefreshUrl(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
            {
                return property.ValueAs<Corvus.Json.JsonUri>().Validate(validationContext, level);
            }

            /// <summary>
            /// Tries to get the validator for the given property.
            /// </summary>
            /// <param name = "property">The property for which to get the validator.</param>
            /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
            /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
            /// <returns><c>True</c> if the validator was found.</returns>
            private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
            {
                if (hasJsonElementBacking)
                {
                    if (property.NameEquals(JsonPropertyNames.AuthorizationUrlUtf8))
                    {
                        propertyValidator = __CorvusValidateAuthorizationUrl;
                        return true;
                    }
                    else if (property.NameEquals(JsonPropertyNames.TokenUrlUtf8))
                    {
                        propertyValidator = __CorvusValidateTokenUrl;
                        return true;
                    }
                    else if (property.NameEquals(JsonPropertyNames.ScopesUtf8))
                    {
                        propertyValidator = __CorvusValidateScopes;
                        return true;
                    }
                    else if (property.NameEquals(JsonPropertyNames.RefreshUrlUtf8))
                    {
                        propertyValidator = __CorvusValidateRefreshUrl;
                        return true;
                    }
                }
                else
                {
                    if (property.NameEquals(JsonPropertyNames.AuthorizationUrl))
                    {
                        propertyValidator = __CorvusValidateAuthorizationUrl;
                        return true;
                    }
                    else if (property.NameEquals(JsonPropertyNames.TokenUrl))
                    {
                        propertyValidator = __CorvusValidateTokenUrl;
                        return true;
                    }
                    else if (property.NameEquals(JsonPropertyNames.Scopes))
                    {
                        propertyValidator = __CorvusValidateScopes;
                        return true;
                    }
                    else if (property.NameEquals(JsonPropertyNames.RefreshUrl))
                    {
                        propertyValidator = __CorvusValidateRefreshUrl;
                        return true;
                    }
                }

                propertyValidator = null;
                return false;
            }
        }
    }
}