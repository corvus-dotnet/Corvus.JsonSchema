//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.OpenApi31;
public readonly partial struct OpenApiDocument
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct OauthFlows
    {
        /// <summary>
        /// The well-known property names in the JSON object.
        /// </summary>
        public static class JsonPropertyNames
        {
            /// <summary>
            /// JSON property name for <see cref = "AuthorizationCode"/>.
            /// </summary>
            public static ReadOnlySpan<byte> AuthorizationCodeUtf8 => "authorizationCode"u8;

            /// <summary>
            /// JSON property name for <see cref = "AuthorizationCode"/>.
            /// </summary>
            public const string AuthorizationCode = "authorizationCode";
            /// <summary>
            /// JSON property name for <see cref = "ClientCredentials"/>.
            /// </summary>
            public static ReadOnlySpan<byte> ClientCredentialsUtf8 => "clientCredentials"u8;

            /// <summary>
            /// JSON property name for <see cref = "ClientCredentials"/>.
            /// </summary>
            public const string ClientCredentials = "clientCredentials";
            /// <summary>
            /// JSON property name for <see cref = "Implicit"/>.
            /// </summary>
            public static ReadOnlySpan<byte> ImplicitUtf8 => "implicit"u8;

            /// <summary>
            /// JSON property name for <see cref = "Implicit"/>.
            /// </summary>
            public const string Implicit = "implicit";
            /// <summary>
            /// JSON property name for <see cref = "Password"/>.
            /// </summary>
            public static ReadOnlySpan<byte> PasswordUtf8 => "password"u8;

            /// <summary>
            /// JSON property name for <see cref = "Password"/>.
            /// </summary>
            public const string Password = "password";
        }

        /// <summary>
        /// Gets the (optional) <c>authorizationCode</c> property.
        /// </summary>
        public Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.AuthorizationCodeEntity AuthorizationCode
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.AuthorizationCodeUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.AuthorizationCodeEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.AuthorizationCode, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.AuthorizationCodeEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>clientCredentials</c> property.
        /// </summary>
        public Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.RequiredTokenUrlAndScopes ClientCredentials
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ClientCredentialsUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.RequiredTokenUrlAndScopes(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.ClientCredentials, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.RequiredTokenUrlAndScopes>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>implicit</c> property.
        /// </summary>
        public Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.RequiredAuthorizationUrlAndScopes Implicit
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ImplicitUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.RequiredAuthorizationUrlAndScopes(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Implicit, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.RequiredAuthorizationUrlAndScopes>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Gets the (optional) <c>password</c> property.
        /// </summary>
        public Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.DefsRequiredTokenUrlAndScopes Password
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.PasswordUtf8, out JsonElement result))
                    {
                        return new Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.DefsRequiredTokenUrlAndScopes(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Password, out JsonAny result))
                    {
                        return result.As<Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.DefsRequiredTokenUrlAndScopes>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Creates an instance of a <see cref = "OauthFlows"/>.
        /// </summary>
        public static OauthFlows Create(Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.AuthorizationCodeEntity? authorizationCode = null, Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.RequiredTokenUrlAndScopes? clientCredentials = null, Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.RequiredAuthorizationUrlAndScopes? @implicit = null, Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.DefsRequiredTokenUrlAndScopes? password = null)
        {
            var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
            if (authorizationCode is Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.AuthorizationCodeEntity authorizationCode__)
            {
                builder.Add(JsonPropertyNames.AuthorizationCode, authorizationCode__.AsAny);
            }

            if (clientCredentials is Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.RequiredTokenUrlAndScopes clientCredentials__)
            {
                builder.Add(JsonPropertyNames.ClientCredentials, clientCredentials__.AsAny);
            }

            if (@implicit is Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.RequiredAuthorizationUrlAndScopes @implicit__)
            {
                builder.Add(JsonPropertyNames.Implicit, @implicit__.AsAny);
            }

            if (password is Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.DefsRequiredTokenUrlAndScopes password__)
            {
                builder.Add(JsonPropertyNames.Password, password__.AsAny);
            }

            return new(builder.ToImmutable());
        }

        /// <summary>
        /// Sets authorizationCode.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public OauthFlows WithAuthorizationCode(in Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.AuthorizationCodeEntity value)
        {
            return this.SetProperty(JsonPropertyNames.AuthorizationCode, value);
        }

        /// <summary>
        /// Sets clientCredentials.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public OauthFlows WithClientCredentials(in Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.RequiredTokenUrlAndScopes value)
        {
            return this.SetProperty(JsonPropertyNames.ClientCredentials, value);
        }

        /// <summary>
        /// Sets implicit.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public OauthFlows WithImplicit(in Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.RequiredAuthorizationUrlAndScopes value)
        {
            return this.SetProperty(JsonPropertyNames.Implicit, value);
        }

        /// <summary>
        /// Sets password.
        /// </summary>
        /// <param name = "value">The value to set.</param>
        /// <returns>The entity with the updated property.</returns>
        public OauthFlows WithPassword(in Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.DefsRequiredTokenUrlAndScopes value)
        {
            return this.SetProperty(JsonPropertyNames.Password, value);
        }

        private static ValidationContext __CorvusValidateImplicit(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.RequiredAuthorizationUrlAndScopes>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidatePassword(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.DefsRequiredTokenUrlAndScopes>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateClientCredentials(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.RequiredTokenUrlAndScopes>().Validate(validationContext, level);
        }

        private static ValidationContext __CorvusValidateAuthorizationCode(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.OauthFlows.AuthorizationCodeEntity>().Validate(validationContext, level);
        }

        /// <summary>
        /// Tries to get the validator for the given property.
        /// </summary>
        /// <param name = "property">The property for which to get the validator.</param>
        /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
        /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
        /// <returns><c>True</c> if the validator was found.</returns>
        private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
        {
            if (hasJsonElementBacking)
            {
                if (property.NameEquals(JsonPropertyNames.ImplicitUtf8))
                {
                    propertyValidator = __CorvusValidateImplicit;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.PasswordUtf8))
                {
                    propertyValidator = __CorvusValidatePassword;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.ClientCredentialsUtf8))
                {
                    propertyValidator = __CorvusValidateClientCredentials;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.AuthorizationCodeUtf8))
                {
                    propertyValidator = __CorvusValidateAuthorizationCode;
                    return true;
                }
            }
            else
            {
                if (property.NameEquals(JsonPropertyNames.Implicit))
                {
                    propertyValidator = __CorvusValidateImplicit;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.Password))
                {
                    propertyValidator = __CorvusValidatePassword;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.ClientCredentials))
                {
                    propertyValidator = __CorvusValidateClientCredentials;
                    return true;
                }
                else if (property.NameEquals(JsonPropertyNames.AuthorizationCode))
                {
                    propertyValidator = __CorvusValidateAuthorizationCode;
                    return true;
                }
            }

            propertyValidator = null;
            return false;
        }
    }
}