//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.OpenApi31;
public readonly partial struct OpenApiDocument
{
    public readonly partial struct Parameter
    {
        public readonly partial struct SchemaEntity
        {
            /// <summary>
            /// Generated from JSON Schema.
            /// </summary>
            public readonly partial struct StylesForFormEntity
            {
                /// <summary>
                /// The well-known property names in the JSON object.
                /// </summary>
                public static class JsonPropertyNames
                {
                    /// <summary>
                    /// JSON property name for <see cref = "Explode"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> ExplodeUtf8 => "explode"u8;

                    /// <summary>
                    /// JSON property name for <see cref = "Explode"/>.
                    /// </summary>
                    public const string Explode = "explode";
                }

                /// <summary>
                /// Gets the (optional) <c>explode</c> property.
                /// </summary>
                public Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForFormEntity.ElseEntity.DefaultValuefalse Explode
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ExplodeUtf8, out JsonElement result))
                            {
                                return new Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForFormEntity.ElseEntity.DefaultValuefalse(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.Explode, out JsonAny result))
                            {
                                return result.As<Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForFormEntity.ElseEntity.DefaultValuefalse>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Creates an instance of a <see cref = "StylesForFormEntity"/>.
                /// </summary>
                public static StylesForFormEntity Create(Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForFormEntity.ElseEntity.DefaultValuefalse? explode = null)
                {
                    var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
                    if (explode is Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForFormEntity.ElseEntity.DefaultValuefalse explode__)
                    {
                        builder.Add(JsonPropertyNames.Explode, explode__.AsAny);
                    }

                    return new(builder.ToImmutable());
                }

                /// <summary>
                /// Sets explode.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public StylesForFormEntity WithExplode(in Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForFormEntity.ElseEntity.DefaultValuefalse value)
                {
                    return this.SetProperty(JsonPropertyNames.Explode, value);
                }

                /// <summary>
                /// Tries to get the validator for the given property.
                /// </summary>
                /// <param name = "property">The property for which to get the validator.</param>
                /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
                /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
                /// <returns><c>True</c> if the validator was found.</returns>
                private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
                {
                    if (hasJsonElementBacking)
                    {
                    }
                    else
                    {
                    }

                    propertyValidator = null;
                    return false;
                }
            }
        }
    }
}