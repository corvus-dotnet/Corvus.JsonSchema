//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.OpenApi31;
public readonly partial struct OpenApiDocument
{
    public readonly partial struct Parameter
    {
        public readonly partial struct SchemaEntity
        {
            public readonly partial struct StylesForHeaderEntity
            {
                /// <summary>
                /// Generated from JSON Schema.
                /// </summary>
                public readonly partial struct RequiredIn
                {
                    /// <summary>
                    /// The well-known property names in the JSON object.
                    /// </summary>
                    public static class JsonPropertyNames
                    {
                        /// <summary>
                        /// JSON property name for <see cref = "In"/>.
                        /// </summary>
                        public static ReadOnlySpan<byte> InUtf8 => "in"u8;

                        /// <summary>
                        /// JSON property name for <see cref = "In"/>.
                        /// </summary>
                        public const string In = "in";
                    }

                    /// <summary>
                    /// Gets the <c>in</c> property. If the instance is valid, this property will be not be <c>undefined</c>.
                    /// </summary>
                    public Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForHeaderEntity.RequiredIn.InEntity In
                    {
                        get
                        {
                            if ((this.backing & Backing.JsonElement) != 0)
                            {
                                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                                {
                                    return default;
                                }

                                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.InUtf8, out JsonElement result))
                                {
                                    return new Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForHeaderEntity.RequiredIn.InEntity(result);
                                }
                            }

                            if ((this.backing & Backing.Object) != 0)
                            {
                                if (this.objectBacking.TryGetValue(JsonPropertyNames.In, out JsonAny result))
                                {
                                    return result.As<Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForHeaderEntity.RequiredIn.InEntity>();
                                }
                            }

                            return default;
                        }
                    }

                    /// <summary>
                    /// Creates an instance of a <see cref = "RequiredIn"/>.
                    /// </summary>
                    public static RequiredIn Create()
                    {
                        var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
                        builder.Add(JsonPropertyNames.In, new Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForHeaderEntity.RequiredIn.InEntity().AsAny);
                        return new(builder.ToImmutable());
                    }

                    private static ValidationContext __CorvusValidateIn(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
                    {
                        return property.ValueAs<Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForHeaderEntity.RequiredIn.InEntity>().Validate(validationContext, level);
                    }

                    /// <summary>
                    /// Tries to get the validator for the given property.
                    /// </summary>
                    /// <param name = "property">The property for which to get the validator.</param>
                    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
                    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
                    /// <returns><c>True</c> if the validator was found.</returns>
                    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
                    {
                        if (hasJsonElementBacking)
                        {
                            if (property.NameEquals(JsonPropertyNames.InUtf8))
                            {
                                propertyValidator = __CorvusValidateIn;
                                return true;
                            }
                        }
                        else
                        {
                            if (property.NameEquals(JsonPropertyNames.In))
                            {
                                propertyValidator = __CorvusValidateIn;
                                return true;
                            }
                        }

                        propertyValidator = null;
                        return false;
                    }
                }
            }
        }
    }
}