//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.OpenApi31;
public readonly partial struct OpenApiDocument
{
    public readonly partial struct Parameter
    {
        public readonly partial struct SchemaEntity
        {
            /// <summary>
            /// Generated from JSON Schema.
            /// </summary>
            public readonly partial struct StylesForPathEntity
            {
                /// <summary>
                /// The well-known property names in the JSON object.
                /// </summary>
                public static class JsonPropertyNames
                {
                    /// <summary>
                    /// JSON property name for <see cref = "Name"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> NameUtf8 => "name"u8;

                    /// <summary>
                    /// JSON property name for <see cref = "Name"/>.
                    /// </summary>
                    public const string Name = "name";
                    /// <summary>
                    /// JSON property name for <see cref = "Required"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> RequiredUtf8 => "required"u8;

                    /// <summary>
                    /// JSON property name for <see cref = "Required"/>.
                    /// </summary>
                    public const string Required = "required";
                    /// <summary>
                    /// JSON property name for <see cref = "Style"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> StyleUtf8 => "style"u8;

                    /// <summary>
                    /// JSON property name for <see cref = "Style"/>.
                    /// </summary>
                    public const string Style = "style";
                }

                /// <summary>
                /// Gets the (optional) <c>name</c> property.
                /// </summary>
                public Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForPathEntity.RequiredRequired.NameEntity Name
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.NameUtf8, out JsonElement result))
                            {
                                return new Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForPathEntity.RequiredRequired.NameEntity(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.Name, out JsonAny result))
                            {
                                return result.As<Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForPathEntity.RequiredRequired.NameEntity>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>required</c> property.
                /// </summary>
                public Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForPathEntity.RequiredRequired.RequiredEntity Required
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.RequiredUtf8, out JsonElement result))
                            {
                                return new Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForPathEntity.RequiredRequired.RequiredEntity(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.Required, out JsonAny result))
                            {
                                return result.As<Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForPathEntity.RequiredRequired.RequiredEntity>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>style</c> property.
                /// </summary>
                public Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForPathEntity.RequiredRequired.StyleEntity Style
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.StyleUtf8, out JsonElement result))
                            {
                                return new Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForPathEntity.RequiredRequired.StyleEntity(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.Style, out JsonAny result))
                            {
                                return result.As<Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForPathEntity.RequiredRequired.StyleEntity>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Creates an instance of a <see cref = "StylesForPathEntity"/>.
                /// </summary>
                public static StylesForPathEntity Create(Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForPathEntity.RequiredRequired.NameEntity? name = null, Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForPathEntity.RequiredRequired.RequiredEntity? required = null, Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForPathEntity.RequiredRequired.StyleEntity? style = null)
                {
                    var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
                    if (name is Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForPathEntity.RequiredRequired.NameEntity name__)
                    {
                        builder.Add(JsonPropertyNames.Name, name__.AsAny);
                    }

                    if (required is Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForPathEntity.RequiredRequired.RequiredEntity required__)
                    {
                        builder.Add(JsonPropertyNames.Required, required__.AsAny);
                    }

                    if (style is Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForPathEntity.RequiredRequired.StyleEntity style__)
                    {
                        builder.Add(JsonPropertyNames.Style, style__.AsAny);
                    }

                    return new(builder.ToImmutable());
                }

                /// <summary>
                /// Sets name.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public StylesForPathEntity WithName(in Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForPathEntity.RequiredRequired.NameEntity value)
                {
                    return this.SetProperty(JsonPropertyNames.Name, value);
                }

                /// <summary>
                /// Sets style.
                /// </summary>
                /// <param name = "value">The value to set.</param>
                /// <returns>The entity with the updated property.</returns>
                public StylesForPathEntity WithStyle(in Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForPathEntity.RequiredRequired.StyleEntity value)
                {
                    return this.SetProperty(JsonPropertyNames.Style, value);
                }

                /// <summary>
                /// Tries to get the validator for the given property.
                /// </summary>
                /// <param name = "property">The property for which to get the validator.</param>
                /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
                /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
                /// <returns><c>True</c> if the validator was found.</returns>
                private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
                {
                    if (hasJsonElementBacking)
                    {
                    }
                    else
                    {
                    }

                    propertyValidator = null;
                    return false;
                }
            }
        }
    }
}