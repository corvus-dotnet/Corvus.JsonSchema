//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace Corvus.Json.JsonSchema.OpenApi31;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
/// <remarks>
/// <para>
/// The description of OpenAPI v3.1.x documents without schema validation, as defined by https://spec.openapis.org/oas/v3.1.0
/// </para>
/// </remarks>
public readonly partial struct OpenApiDocument
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct Parameter
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        public readonly partial struct SchemaEntity
        {
            /// <summary>
            /// Generated from JSON Schema.
            /// </summary>
            public readonly partial struct StylesForPathEntity
            {
                /// <summary>
                /// Generated from JSON Schema.
                /// </summary>
                public readonly partial struct RequiredRequired
                {
                    /// <summary>
                    /// Generated from JSON Schema.
                    /// </summary>
                    /// <remarks>
                    /// <para>
                    /// Examples:
                    /// <example>
                    /// <code>
                    /// "simple"
                    /// </code>
                    /// </example>
                    /// </para>
                    /// </remarks>
                    public readonly partial struct StyleEntity
                    {
                        /// <inheritdoc/>
                        public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
                        {
                            ValidationContext result = validationContext;
                            if (level > ValidationLevel.Flag)
                            {
                                result = result.UsingResults();
                            }

                            if (level > ValidationLevel.Basic)
                            {
                                result = result.UsingStack();
                                result = result.PushSchemaLocation("https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/parameter/dependentSchemas/schema/$defs/styles-for-path/then/properties/style");
                            }

                            result = CorvusValidation.CompositionAnyOfValidationHandler(this, result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            if (level > ValidationLevel.Basic)
                            {
                                result = result.PopLocation();
                            }

                            return result;
                        }

                        /// <summary>
                        /// Constant values for the enum keyword.
                        /// </summary>
                        public static class EnumValues
                        {
                            /// <summary>
                            /// Gets the string 'matrix'
                            /// as a <see cref="Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForPathEntity.RequiredRequired.StyleEntity"/>.
                            /// </summary>
                            public static StyleEntity Matrix { get; } = CorvusValidation.Enum1.As<StyleEntity>();

                            /// <summary>
                            /// Gets the string 'matrix'
                            /// as a UTF8 byte array.
                            /// </summary>
                            public static ReadOnlySpan<byte> MatrixUtf8 => CorvusValidation.Enum1Utf8;

                            /// <summary>
                            /// Gets the string 'label'
                            /// as a <see cref="Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForPathEntity.RequiredRequired.StyleEntity"/>.
                            /// </summary>
                            public static StyleEntity Label { get; } = CorvusValidation.Enum2.As<StyleEntity>();

                            /// <summary>
                            /// Gets the string 'label'
                            /// as a UTF8 byte array.
                            /// </summary>
                            public static ReadOnlySpan<byte> LabelUtf8 => CorvusValidation.Enum2Utf8;

                            /// <summary>
                            /// Gets the string 'simple'
                            /// as a <see cref="Corvus.Json.JsonSchema.OpenApi31.OpenApiDocument.Parameter.SchemaEntity.StylesForPathEntity.RequiredRequired.StyleEntity"/>.
                            /// </summary>
                            public static StyleEntity Simple { get; } = CorvusValidation.Enum3.As<StyleEntity>();

                            /// <summary>
                            /// Gets the string 'simple'
                            /// as a UTF8 byte array.
                            /// </summary>
                            public static ReadOnlySpan<byte> SimpleUtf8 => CorvusValidation.Enum3Utf8;
                        }

                        /// <summary>
                        /// Validation constants for the type.
                        /// </summary>
                        public static partial class CorvusValidation
                        {
                            /// <summary>
                            /// A constant for the <c>enum</c> keyword.
                            /// </summary>
                            public static readonly JsonString Enum1 = JsonString.ParseValue("\"matrix\"");
                            /// <summary>
                            /// A constant for the <c>enum</c> keyword.
                            /// </summary>
                            public static readonly JsonString Enum2 = JsonString.ParseValue("\"label\"");
                            /// <summary>
                            /// A constant for the <c>enum</c> keyword.
                            /// </summary>
                            public static readonly JsonString Enum3 = JsonString.ParseValue("\"simple\"");

                            /// <summary>
                            /// A constant for the <c>enum</c> keyword.
                            /// </summary>
                            public static ReadOnlySpan<byte> Enum1Utf8 => "\"matrix\""u8;
                            /// <summary>
                            /// A constant for the <c>enum</c> keyword.
                            /// </summary>
                            public static ReadOnlySpan<byte> Enum2Utf8 => "\"label\""u8;
                            /// <summary>
                            /// A constant for the <c>enum</c> keyword.
                            /// </summary>
                            public static ReadOnlySpan<byte> Enum3Utf8 => "\"simple\""u8;

                            /// <summary>
                            /// Composition validation (any-of).
                            /// </summary>
                            /// <param name="value">The value to validate.</param>
                            /// <param name="validationContext">The current validation context.</param>
                            /// <param name="level">The current validation level.</param>
                            /// <returns>The resulting validation context after validation.</returns>
                            [MethodImpl(MethodImplOptions.AggressiveInlining)]
                            internal static ValidationContext CompositionAnyOfValidationHandler(
                                in StyleEntity value,
                                in ValidationContext validationContext,
                                ValidationLevel level = ValidationLevel.Flag)
                            {
                                ValidationContext result = validationContext;
                                result = ValidateEnum(value, result, level);
                                if (!result.IsValid && level == ValidationLevel.Flag)
                                {
                                    return result;
                                }

                                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                                static ValidationContext ValidateEnum(in StyleEntity value, in ValidationContext validationContext, ValidationLevel level)
                                {
                                    ValidationContext result = validationContext;
                                    bool enumFoundValid = false;
                                    enumFoundValid = value.Equals(CorvusValidation.Enum1);
                                    if (!enumFoundValid)
                                    {
                                        enumFoundValid = value.Equals(CorvusValidation.Enum2);
                                    }
                                    if (!enumFoundValid)
                                    {
                                        enumFoundValid = value.Equals(CorvusValidation.Enum3);
                                    }

                                    if (level >= ValidationLevel.Basic)
                                    {
                                        result.PushValidationLocationProperty("enum");
                                    }

                                    if (enumFoundValid)
                                    {
                                        if (level >= ValidationLevel.Verbose)
                                        {
                                            result = result.WithResult(isValid: true, "Validation enum - validated against the enumeration.");
                                        }
                                    }
                                    else
                                    {
                                        if (level >= ValidationLevel.Basic)
                                        {
                                            result = result.WithResult(isValid: false, "Validation enum - did not validate against the enumeration.");
                                        }
                                        else
                                        {
                                            result = result.WithResult(isValid: false);
                                        }
                                    }

                                    if (level >= ValidationLevel.Basic)
                                    {
                                        result.PopLocation();
                                    }

                                    return result;
                                }

                                return result;
                            }
                        }
                    }
                }
            }
        }
    }
}
