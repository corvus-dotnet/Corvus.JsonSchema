//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Buffers;
using System.ComponentModel;
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.OpenApi31;
public readonly partial struct OpenApiDocument
{
    public readonly partial struct Parameter
    {
        public readonly partial struct SchemaEntity
        {
            public readonly partial struct StylesForPathEntity
            {
                /// <summary>
                /// Generated from JSON Schema.
                /// </summary>
                [System.Text.Json.Serialization.JsonConverter(typeof(Corvus.Json.Internal.JsonValueConverter<RequiredRequired>))]
                public readonly partial struct RequiredRequired
                {
                    private readonly Backing backing;
                    private readonly JsonElement jsonElementBacking;
                    private readonly ImmutableList<JsonObjectProperty> objectBacking;
                    /// <summary>
                    /// Initializes a new instance of the <see cref = "RequiredRequired"/> struct.
                    /// </summary>
                    public RequiredRequired()
                    {
                        this.jsonElementBacking = default;
                        this.backing = Backing.JsonElement;
                        this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref = "RequiredRequired"/> struct.
                    /// </summary>
                    /// <param name = "value">The value from which to construct the instance.</param>
                    public RequiredRequired(in JsonElement value)
                    {
                        this.jsonElementBacking = value;
                        this.backing = Backing.JsonElement;
                        this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
                    }

                    /// <summary>
                    /// Gets the schema location from which this type was generated.
                    /// </summary>
                    public static string SchemaLocation { get; } = "https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/parameter/dependentSchemas/schema/$defs/styles-for-path/then";
                    /// <summary>
                    /// Gets a Null instance.
                    /// </summary>
                    public static RequiredRequired Null { get; } = new(JsonValueHelpers.NullElement);
                    /// <summary>
                    /// Gets an Undefined instance.
                    /// </summary>
                    public static RequiredRequired Undefined { get; }
                    /// <summary>
                    /// Gets the default instance of the type.
                    /// </summary>
                    public static RequiredRequired DefaultInstance { get; }

                    /// <inheritdoc/>
                    public JsonAny AsAny
                    {
                        get
                        {
                            if ((this.backing & Backing.JsonElement) != 0)
                            {
                                return new(this.jsonElementBacking);
                            }

                            if ((this.backing & Backing.Object) != 0)
                            {
                                return new(this.objectBacking);
                            }

                            if ((this.backing & Backing.Null) != 0)
                            {
                                return JsonAny.Null;
                            }

                            return JsonAny.Undefined;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonElement AsJsonElement
                    {
                        get
                        {
                            if ((this.backing & Backing.JsonElement) != 0)
                            {
                                return this.jsonElementBacking;
                            }

                            if ((this.backing & Backing.Object) != 0)
                            {
                                return JsonValueHelpers.ObjectToJsonElement(this.objectBacking);
                            }

                            if ((this.backing & Backing.Null) != 0)
                            {
                                return JsonValueHelpers.NullElement;
                            }

                            return default;
                        }
                    }

                    /// <inheritdoc/>
                    JsonString IJsonValue.AsString
                    {
                        get
                        {
                            if ((this.backing & Backing.JsonElement) != 0)
                            {
                                return new(this.jsonElementBacking);
                            }

                            throw new InvalidOperationException();
                        }
                    }

                    /// <inheritdoc/>
                    JsonBoolean IJsonValue.AsBoolean
                    {
                        get
                        {
                            if ((this.backing & Backing.JsonElement) != 0)
                            {
                                return new(this.jsonElementBacking);
                            }

                            throw new InvalidOperationException();
                        }
                    }

                    /// <inheritdoc/>
                    JsonNumber IJsonValue.AsNumber
                    {
                        get
                        {
                            if ((this.backing & Backing.JsonElement) != 0)
                            {
                                return new(this.jsonElementBacking);
                            }

                            throw new InvalidOperationException();
                        }
                    }

                    /// <inheritdoc/>
                    public JsonObject AsObject
                    {
                        get
                        {
                            if ((this.backing & Backing.JsonElement) != 0)
                            {
                                return new(this.jsonElementBacking);
                            }

                            if ((this.backing & Backing.Object) != 0)
                            {
                                return new(this.objectBacking);
                            }

                            throw new InvalidOperationException();
                        }
                    }

                    /// <inheritdoc/>
                    JsonArray IJsonValue.AsArray
                    {
                        get
                        {
                            if ((this.backing & Backing.JsonElement) != 0)
                            {
                                return new(this.jsonElementBacking);
                            }

                            throw new InvalidOperationException();
                        }
                    }

                    /// <inheritdoc/>
                    public bool HasJsonElementBacking
                    {
                        get
                        {
                            return (this.backing & Backing.JsonElement) != 0;
                        }
                    }

                    /// <inheritdoc/>
                    public bool HasDotnetBacking
                    {
                        get
                        {
                            return (this.backing & Backing.Dotnet) != 0;
                        }
                    }

                    /// <inheritdoc/>
                    public JsonValueKind ValueKind
                    {
                        get
                        {
                            if ((this.backing & Backing.JsonElement) != 0)
                            {
                                return this.jsonElementBacking.ValueKind;
                            }

                            if ((this.backing & Backing.Object) != 0)
                            {
                                return JsonValueKind.Object;
                            }

                            if ((this.backing & Backing.Null) != 0)
                            {
                                return JsonValueKind.Null;
                            }

                            return JsonValueKind.Undefined;
                        }
                    }

                    /// <summary>
                    /// Conversion from JsonAny.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    /// <exception cref = "InvalidOperationException">The value was not compatible with this type.</exception>
                    public static implicit operator RequiredRequired(in JsonAny value)
                    {
                        return value.As<RequiredRequired>();
                    }

                    /// <summary>
                    /// Conversion to JsonAny.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    /// <exception cref = "InvalidOperationException">The value was not compatible with this type.</exception>
                    public static implicit operator JsonAny(in RequiredRequired value)
                    {
                        return value.AsAny;
                    }

                    /// <summary>
                    /// Equality operator.
                    /// </summary>
                    /// <param name = "left">The lhs.</param>
                    /// <param name = "right">The rhs.</param>
                    /// <returns><c>True</c> if the values are equal.</returns>
                    public static bool operator ==(in RequiredRequired left, in RequiredRequired right)
                    {
                        return left.Equals(right);
                    }

                    /// <summary>
                    /// Inequality operator.
                    /// </summary>
                    /// <param name = "left">The lhs.</param>
                    /// <param name = "right">The rhs.</param>
                    /// <returns><c>True</c> if the values are equal.</returns>
                    public static bool operator !=(in RequiredRequired left, in RequiredRequired right)
                    {
                        return !left.Equals(right);
                    }

                    /// <summary>
                    /// Gets an instance of the JSON value from a JsonAny value.
                    /// </summary>
                    /// <param name = "value">The <see cref = "JsonAny"/> value from which to instantiate the instance.</param>
                    /// <returns>An instance of this type, initialized from the <see cref = "JsonAny"/>.</returns>
                    /// <remarks>The returned value will have a <see cref = "IJsonValue.ValueKind"/> of <see cref = "JsonValueKind.Undefined"/> if the
                    /// value cannot be constructed from the given instance (e.g. because they have an incompatible dotnet backing type.
                    /// </remarks>
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    public static RequiredRequired FromAny(in JsonAny value)
                    {
                        if (value.HasJsonElementBacking)
                        {
                            return new(value.AsJsonElement);
                        }

                        JsonValueKind valueKind = value.ValueKind;
                        return valueKind switch
                        {
                            JsonValueKind.Object => new(value.AsObject.AsPropertyBacking()),
                            JsonValueKind.Null => Null,
                            _ => Undefined,
                        };
                    }

                    /// <summary>
                    /// Gets an instance of the JSON value from a <see cref = "JsonElement"/> value.
                    /// </summary>
                    /// <param name = "value">The <see cref = "JsonElement"/> value from which to instantiate the instance.</param>
                    /// <returns>An instance of this type, initialized from the <see cref = "JsonElement"/>.</returns>
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    public static RequiredRequired FromJson(in JsonElement value)
                    {
                        return new(value);
                    }

#if NET8_0_OR_GREATER
    /// <summary>
    /// Gets an instance of the JSON value from a boolean value.
    /// </summary>
    /// <typeparam name = "TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the value.</returns>
    /// <remarks>This will be RequiredRequired.Undefined if the type is not compatible.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static RequiredRequired IJsonValue<RequiredRequired>.FromBoolean<TValue>(in TValue value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return Undefined;
    }
#endif
#if NET8_0_OR_GREATER
    /// <summary>
    /// Gets an instance of the JSON value from a string value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the value.</returns>
    /// <remarks>This will be RequiredRequired.Undefined if the type is not compatible.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static RequiredRequired IJsonValue<RequiredRequired>.FromString<TValue>(in TValue value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return Undefined;
    }
#endif
#if NET8_0_OR_GREATER
    /// <summary>
    /// Gets an instance of the JSON value from a number value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the value.</returns>
    /// <remarks>This will be RequiredRequired.Undefined if the type is not compatible.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static RequiredRequired IJsonValue<RequiredRequired>.FromNumber<TValue>(in TValue value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return Undefined;
    }
#endif
#if NET8_0_OR_GREATER
    /// <summary>
    /// Gets an instance of the JSON value from an array value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the value.</returns>
    /// <remarks>This will be RequiredRequired.Undefined if the type is not compatible.</remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static RequiredRequired IJsonValue<RequiredRequired>.FromArray<TValue>(in TValue value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return Undefined;
    }
#endif
                    /// <summary>
                    /// Gets an instance of the JSON value from an object value.
                    /// </summary>
                    /// <typeparam name = "TValue">The type of the value.</typeparam>
                    /// <param name = "value">The value from which to instantiate the instance.</param>
                    /// <returns>An instance of this type, initialized from the value.</returns>
                    /// <remarks>This will be RequiredRequired.Undefined if the type is not compatible.</remarks>
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    public static RequiredRequired FromObject<TValue>(in TValue value)
                        where TValue : struct, IJsonObject<TValue>
                    {
                        if (value.HasJsonElementBacking)
                        {
                            return new(value.AsJsonElement);
                        }

                        if (value.ValueKind == JsonValueKind.Object)
                        {
                            return new(value.AsPropertyBacking());
                        }

                        return Undefined;
                    }

                    /// <summary>
                    /// Parses a JSON string into a RequiredRequired.
                    /// </summary>
                    /// <param name = "json">The json string to parse.</param>
                    /// <param name = "options">The (optional) JsonDocumentOptions.</param>
                    /// <returns>A <see cref = "RequiredRequired"/> instance built from the JSON string.</returns>
                    public static RequiredRequired Parse(string json, JsonDocumentOptions options = default)
                    {
                        using var jsonDocument = JsonDocument.Parse(json, options);
                        return new RequiredRequired(jsonDocument.RootElement.Clone());
                    }

                    /// <summary>
                    /// Parses a JSON string into a RequiredRequired.
                    /// </summary>
                    /// <param name = "utf8Json">The json string to parse.</param>
                    /// <param name = "options">The (optional) JsonDocumentOptions.</param>
                    /// <returns>A <see cref = "RequiredRequired"/> instance built from the JSON string.</returns>
                    public static RequiredRequired Parse(Stream utf8Json, JsonDocumentOptions options = default)
                    {
                        using var jsonDocument = JsonDocument.Parse(utf8Json, options);
                        return new RequiredRequired(jsonDocument.RootElement.Clone());
                    }

                    /// <summary>
                    /// Parses a JSON string into a RequiredRequired.
                    /// </summary>
                    /// <param name = "utf8Json">The json string to parse.</param>
                    /// <param name = "options">The (optional) JsonDocumentOptions.</param>
                    /// <returns>A <see cref = "RequiredRequired"/> instance built from the JSON string.</returns>
                    public static RequiredRequired Parse(ReadOnlyMemory<byte> utf8Json, JsonDocumentOptions options = default)
                    {
                        using var jsonDocument = JsonDocument.Parse(utf8Json, options);
                        return new RequiredRequired(jsonDocument.RootElement.Clone());
                    }

                    /// <summary>
                    /// Parses a JSON string into a RequiredRequired.
                    /// </summary>
                    /// <param name = "json">The json string to parse.</param>
                    /// <param name = "options">The (optional) JsonDocumentOptions.</param>
                    /// <returns>A <see cref = "RequiredRequired"/> instance built from the JSON string.</returns>
                    public static RequiredRequired Parse(ReadOnlyMemory<char> json, JsonDocumentOptions options = default)
                    {
                        using var jsonDocument = JsonDocument.Parse(json, options);
                        return new RequiredRequired(jsonDocument.RootElement.Clone());
                    }

                    /// <summary>
                    /// Parses a JSON string into a RequiredRequired.
                    /// </summary>
                    /// <param name = "utf8Json">The json string to parse.</param>
                    /// <param name = "options">The (optional) JsonDocumentOptions.</param>
                    /// <returns>A <see cref = "RequiredRequired"/> instance built from the JSON string.</returns>
                    public static RequiredRequired Parse(ReadOnlySequence<byte> utf8Json, JsonDocumentOptions options = default)
                    {
                        using var jsonDocument = JsonDocument.Parse(utf8Json, options);
                        return new RequiredRequired(jsonDocument.RootElement.Clone());
                    }

                    /// <summary>
                    /// Parses a JSON value from a buffer.
                    /// </summary>
                    /// <param name = "buffer">The buffer from which to parse the value.</param>
                    /// <returns>The parsed value.</returns>
                    static RequiredRequired ParseValue(ReadOnlySpan<char> buffer)
                    {
#if NET8_0_OR_GREATER
        return IJsonValue<RequiredRequired>.ParseValue(buffer);
#else
                        return JsonValueHelpers.ParseValue<RequiredRequired>(buffer);
#endif
                    }

                    /// <summary>
                    /// Parses a JSON value from a buffer.
                    /// </summary>
                    /// <param name = "buffer">The buffer from which to parse the value.</param>
                    /// <returns>The parsed value.</returns>
                    static RequiredRequired ParseValue(ReadOnlySpan<byte> buffer)
                    {
#if NET8_0_OR_GREATER
        return IJsonValue<RequiredRequired>.ParseValue(buffer);
#else
                        return JsonValueHelpers.ParseValue<RequiredRequired>(buffer);
#endif
                    }

                    /// <summary>
                    /// Parses a JSON value from a buffer.
                    /// </summary>
                    /// <param name = "reader">The reader from which to parse the value.</param>
                    /// <returns>The parsed value.</returns>
                    static RequiredRequired ParseValue(ref Utf8JsonReader reader)
                    {
#if NET8_0_OR_GREATER
        return IJsonValue<RequiredRequired>.ParseValue(ref reader);
#else
                        return JsonValueHelpers.ParseValue<RequiredRequired>(ref reader);
#endif
                    }

                    /// <summary>
                    /// Gets the value as an instance of the target value.
                    /// </summary>
                    /// <typeparam name = "TTarget">The type of the target.</typeparam>
                    /// <returns>An instance of the target type.</returns>
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    public TTarget As<TTarget>()
                        where TTarget : struct, IJsonValue<TTarget>
                    {
#if NET8_0_OR_GREATER
        if ((this.backing & Backing.JsonElement) != 0)
        {
            return TTarget.FromJson(this.jsonElementBacking);
        }

        if ((this.backing & Backing.Object) != 0)
        {
            return TTarget.FromObject(this);
        }

        if ((this.backing & Backing.Null) != 0)
        {
            return TTarget.Null;
        }

        return TTarget.Undefined;
#else
                        return this.As<RequiredRequired, TTarget>();
#endif
                    }

                    /// <inheritdoc/>
                    public override bool Equals(object? obj)
                    {
                        return (obj is IJsonValue jv && this.Equals(jv.AsAny)) || (obj is null && this.IsNull());
                    }

                    /// <inheritdoc/>
                    public bool Equals<T>(in T other)
                        where T : struct, IJsonValue<T>
                    {
                        return JsonValueHelpers.CompareValues(this, other);
                    }

                    /// <summary>
                    /// Equality comparison.
                    /// </summary>
                    /// <param name = "other">The other item with which to compare.</param>
                    /// <returns><see langword="true"/> if the values were equal.</returns>
                    public bool Equals(in RequiredRequired other)
                    {
                        return JsonValueHelpers.CompareValues(this, other);
                    }

                    /// <inheritdoc/>
                    public void WriteTo(Utf8JsonWriter writer)
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                            {
                                this.jsonElementBacking.WriteTo(writer);
                            }

                            return;
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            JsonValueHelpers.WriteProperties(this.objectBacking, writer);
                            return;
                        }

                        if ((this.backing & Backing.Null) != 0)
                        {
                            writer.WriteNullValue();
                            return;
                        }
                    }

                    /// <inheritdoc/>
                    public override int GetHashCode()
                    {
                        return JsonValueHelpers.GetHashCode(this);
                    }

                    /// <inheritdoc/>
                    public override string ToString()
                    {
                        return this.Serialize();
                    }
                }
            }
        }
    }
}