//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using System.Text.RegularExpressions;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.OpenApi31;
public readonly partial struct OpenApiDocument
{
    public readonly partial struct Responses
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        public readonly partial struct IfEntity
        {
            /// <summary>
            /// A pattern property matching ^[1-5](?:[0-9]{2}|XX)$ producing a <see cref = "Corvus.Json.JsonNotAny"/>.
            /// </summary>
            public static Regex PatternPropertyJsonNotAny => new("^[1-5](?:[0-9]{2}|XX)$", RegexOptions.Compiled, TimeSpan.FromSeconds(1));

            private static readonly ImmutableDictionary<Regex, PatternPropertyValidator> __CorvusPatternProperties = CreatePatternPropertiesValidators();
            /// <summary>
            /// Determines if a property matches ^[1-5](?:[0-9]{2}|XX)$ producing a <see cref = "Corvus.Json.JsonNotAny"/>.
            /// </summary>
            public bool MatchesPatternJsonNotAny(in JsonObjectProperty property)
            {
                return property.Name.IsMatch(PatternPropertyJsonNotAny);
            }

            /// <summary>
            /// Get a property value as the type matching the given pattern property ^[1-5](?:[0-9]{2}|XX)$ as a <see cref = "Corvus.Json.JsonNotAny"/>.
            /// </summary>
            public bool TryAsPatternJsonNotAny(in JsonObjectProperty property, out Corvus.Json.JsonNotAny result)
            {
                if (property.Name.IsMatch(PatternPropertyJsonNotAny))
                {
                    result = property.ValueAs<Corvus.Json.JsonNotAny>();
                    return true;
                }
                else
                {
                    result = Corvus.Json.JsonNotAny.Undefined;
                    return false;
                }
            }

            /// <summary>
            /// Try to get a property value as the type matching the given pattern property ^[1-5](?:[0-9]{2}|XX)$ as a <see cref = "Corvus.Json.JsonNotAny"/>.
            /// </summary>
            public Corvus.Json.JsonNotAny AsPatternJsonNotAny(in JsonObjectProperty property)
            {
                return property.ValueAs<Corvus.Json.JsonNotAny>();
            }

            private static ImmutableDictionary<Regex, PatternPropertyValidator> CreatePatternPropertiesValidators()
            {
                ImmutableDictionary<Regex, PatternPropertyValidator>.Builder builder = ImmutableDictionary.CreateBuilder<Regex, PatternPropertyValidator>();
                builder.Add(PatternPropertyJsonNotAny, __CorvusValidatePatternPropertyJsonNotAny);
                return builder.ToImmutable();
            }

            private static ValidationContext __CorvusValidatePatternPropertyJsonNotAny(in JsonObjectProperty that, in ValidationContext validationContext, ValidationLevel level)
            {
                return that.ValueAs<Corvus.Json.JsonNotAny>().Validate(validationContext, level);
            }
        }
    }
}