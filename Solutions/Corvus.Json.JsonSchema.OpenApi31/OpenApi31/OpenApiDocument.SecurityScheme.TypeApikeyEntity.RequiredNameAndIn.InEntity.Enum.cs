//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.OpenApi31;
public readonly partial struct OpenApiDocument
{
    public readonly partial struct SecurityScheme
    {
        public readonly partial struct TypeApikeyEntity
        {
            public readonly partial struct RequiredNameAndIn
            {
                /// <summary>
                /// Generated from JSON Schema.
                /// </summary>
                public readonly partial struct InEntity
                {
                    /// <summary>
                    /// Matches the value against each of the enumeration values, and returns the result of calling the provided match function for the first match found.
                    /// </summary>
                    /// <param name = "context">The context to pass to the match function.</param>
                    /// <param name = "matchQuery">The function to call if the value matches the JSON value "\"query\"".</param>
                    /// <param name = "matchHeader">The function to call if the value matches the JSON value "\"header\"".</param>
                    /// <param name = "matchCookie">The function to call if the value matches the JSON value "\"cookie\"".</param>
                    /// <param name = "defaultMatch">The fallback match.</param>
                    public TOut Match<TIn, TOut>(in TIn context, Func<TIn, TOut> matchQuery, Func<TIn, TOut> matchHeader, Func<TIn, TOut> matchCookie, Func<TIn, TOut> defaultMatch)
                    {
                        if (this.ValueKind == JsonValueKind.String)
                        {
                            if (this.HasJsonElementBacking)
                            {
                                if (this.jsonElementBacking.ValueEquals(EnumValues.QueryUtf8))
                                {
                                    return matchQuery(context);
                                }

                                if (this.jsonElementBacking.ValueEquals(EnumValues.HeaderUtf8))
                                {
                                    return matchHeader(context);
                                }

                                if (this.jsonElementBacking.ValueEquals(EnumValues.CookieUtf8))
                                {
                                    return matchCookie(context);
                                }
                            }
                            else
                            {
                                switch (this.stringBacking)
                                {
                                    case "query":
                                        return matchQuery(context);
                                    case "header":
                                        return matchHeader(context);
                                    case "cookie":
                                        return matchCookie(context);
                                    default:
                                        break;
                                }
                            }
                        }

                        return defaultMatch(context);
                    }

                    /// <summary>
                    /// Matches the value against each of the enumeration values, and returns the result of calling the provided match function for the first match found.
                    /// </summary>
                    /// <param name = "matchQuery">The function to call if the value matches the JSON value "\"query\"".</param>
                    /// <param name = "matchHeader">The function to call if the value matches the JSON value "\"header\"".</param>
                    /// <param name = "matchCookie">The function to call if the value matches the JSON value "\"cookie\"".</param>
                    /// <param name = "defaultMatch">The fallback match.</param>
                    public TOut Match<TOut>(Func<TOut> matchQuery, Func<TOut> matchHeader, Func<TOut> matchCookie, Func<TOut> defaultMatch)
                    {
                        if (this.ValueKind == JsonValueKind.String)
                        {
                            if (this.HasJsonElementBacking)
                            {
                                if (this.jsonElementBacking.ValueEquals(EnumValues.QueryUtf8))
                                {
                                    return matchQuery();
                                }

                                if (this.jsonElementBacking.ValueEquals(EnumValues.HeaderUtf8))
                                {
                                    return matchHeader();
                                }

                                if (this.jsonElementBacking.ValueEquals(EnumValues.CookieUtf8))
                                {
                                    return matchCookie();
                                }
                            }
                            else
                            {
                                switch (this.stringBacking)
                                {
                                    case "query":
                                        return matchQuery();
                                    case "header":
                                        return matchHeader();
                                    case "cookie":
                                        return matchCookie();
                                    default:
                                        break;
                                }
                            }
                        }

                        return defaultMatch();
                    }

                    /// <summary>
                    /// Permitted values.
                    /// </summary>
                    public static class EnumValues
                    {
                        /// <summary>
                        /// Gets "query" as a JSON value.
                        /// </summary>
                        public static readonly InEntity Query = InEntity.Parse("\"query\"");
                        /// <summary>
                        /// Gets "query" as a UTF8 string.
                        /// </summary>
                        public static ReadOnlySpan<byte> QueryUtf8 => "query"u8;

                        /// <summary>
                        /// Gets "header" as a JSON value.
                        /// </summary>
                        public static readonly InEntity Header = InEntity.Parse("\"header\"");
                        /// <summary>
                        /// Gets "header" as a UTF8 string.
                        /// </summary>
                        public static ReadOnlySpan<byte> HeaderUtf8 => "header"u8;

                        /// <summary>
                        /// Gets "cookie" as a JSON value.
                        /// </summary>
                        public static readonly InEntity Cookie = InEntity.Parse("\"cookie\"");
                        /// <summary>
                        /// Gets "cookie" as a UTF8 string.
                        /// </summary>
                        public static ReadOnlySpan<byte> CookieUtf8 => "cookie"u8;

                        /// <summary>
                        /// Gets "query" as a JSON value.
                        /// </summary>
                        internal static readonly InEntity Item0 = InEntity.Parse("\"query\"");
                        /// <summary>
                        /// Gets "header" as a JSON value.
                        /// </summary>
                        internal static readonly InEntity Item1 = InEntity.Parse("\"header\"");
                        /// <summary>
                        /// Gets "cookie" as a JSON value.
                        /// </summary>
                        internal static readonly InEntity Item2 = InEntity.Parse("\"cookie\"");
                    }
                }
            }
        }
    }
}