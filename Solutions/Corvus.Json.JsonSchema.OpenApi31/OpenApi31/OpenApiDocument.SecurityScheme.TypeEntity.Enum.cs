//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.OpenApi31;
public readonly partial struct OpenApiDocument
{
    public readonly partial struct SecurityScheme
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        public readonly partial struct TypeEntity
        {
            /// <summary>
            /// Matches the value against each of the enumeration values, and returns the result of calling the provided match function for the first match found.
            /// </summary>
            /// <param name = "context">The context to pass to the match function.</param>
            /// <param name = "matchApiKey">The function to call if the value matches the JSON value "\"apiKey\"".</param>
            /// <param name = "matchHttp">The function to call if the value matches the JSON value "\"http\"".</param>
            /// <param name = "matchMutualTls">The function to call if the value matches the JSON value "\"mutualTLS\"".</param>
            /// <param name = "matchOauth2">The function to call if the value matches the JSON value "\"oauth2\"".</param>
            /// <param name = "matchOpenIdConnect">The function to call if the value matches the JSON value "\"openIdConnect\"".</param>
            /// <param name = "defaultMatch">The fallback match.</param>
            public TOut Match<TIn, TOut>(in TIn context, Func<TIn, TOut> matchApiKey, Func<TIn, TOut> matchHttp, Func<TIn, TOut> matchMutualTls, Func<TIn, TOut> matchOauth2, Func<TIn, TOut> matchOpenIdConnect, Func<TIn, TOut> defaultMatch)
            {
                if (this.ValueKind == JsonValueKind.String)
                {
                    if (this.HasJsonElementBacking)
                    {
                        if (this.jsonElementBacking.ValueEquals(EnumValues.ApiKeyUtf8))
                        {
                            return matchApiKey(context);
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.HttpUtf8))
                        {
                            return matchHttp(context);
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.MutualTlsUtf8))
                        {
                            return matchMutualTls(context);
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.Oauth2Utf8))
                        {
                            return matchOauth2(context);
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.OpenIdConnectUtf8))
                        {
                            return matchOpenIdConnect(context);
                        }
                    }
                    else
                    {
                        switch (this.stringBacking)
                        {
                            case "apiKey":
                                return matchApiKey(context);
                            case "http":
                                return matchHttp(context);
                            case "mutualTLS":
                                return matchMutualTls(context);
                            case "oauth2":
                                return matchOauth2(context);
                            case "openIdConnect":
                                return matchOpenIdConnect(context);
                            default:
                                break;
                        }
                    }
                }

                return defaultMatch(context);
            }

            /// <summary>
            /// Matches the value against each of the enumeration values, and returns the result of calling the provided match function for the first match found.
            /// </summary>
            /// <param name = "matchApiKey">The function to call if the value matches the JSON value "\"apiKey\"".</param>
            /// <param name = "matchHttp">The function to call if the value matches the JSON value "\"http\"".</param>
            /// <param name = "matchMutualTls">The function to call if the value matches the JSON value "\"mutualTLS\"".</param>
            /// <param name = "matchOauth2">The function to call if the value matches the JSON value "\"oauth2\"".</param>
            /// <param name = "matchOpenIdConnect">The function to call if the value matches the JSON value "\"openIdConnect\"".</param>
            /// <param name = "defaultMatch">The fallback match.</param>
            public TOut Match<TOut>(Func<TOut> matchApiKey, Func<TOut> matchHttp, Func<TOut> matchMutualTls, Func<TOut> matchOauth2, Func<TOut> matchOpenIdConnect, Func<TOut> defaultMatch)
            {
                if (this.ValueKind == JsonValueKind.String)
                {
                    if (this.HasJsonElementBacking)
                    {
                        if (this.jsonElementBacking.ValueEquals(EnumValues.ApiKeyUtf8))
                        {
                            return matchApiKey();
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.HttpUtf8))
                        {
                            return matchHttp();
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.MutualTlsUtf8))
                        {
                            return matchMutualTls();
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.Oauth2Utf8))
                        {
                            return matchOauth2();
                        }

                        if (this.jsonElementBacking.ValueEquals(EnumValues.OpenIdConnectUtf8))
                        {
                            return matchOpenIdConnect();
                        }
                    }
                    else
                    {
                        switch (this.stringBacking)
                        {
                            case "apiKey":
                                return matchApiKey();
                            case "http":
                                return matchHttp();
                            case "mutualTLS":
                                return matchMutualTls();
                            case "oauth2":
                                return matchOauth2();
                            case "openIdConnect":
                                return matchOpenIdConnect();
                            default:
                                break;
                        }
                    }
                }

                return defaultMatch();
            }

            /// <summary>
            /// Permitted values.
            /// </summary>
            public static class EnumValues
            {
                /// <summary>
                /// Gets "apiKey" as a JSON value.
                /// </summary>
                public static readonly TypeEntity ApiKey = TypeEntity.Parse("\"apiKey\"");
                /// <summary>
                /// Gets "apiKey" as a UTF8 string.
                /// </summary>
                public static ReadOnlySpan<byte> ApiKeyUtf8 => "apiKey"u8;

                /// <summary>
                /// Gets "http" as a JSON value.
                /// </summary>
                public static readonly TypeEntity Http = TypeEntity.Parse("\"http\"");
                /// <summary>
                /// Gets "http" as a UTF8 string.
                /// </summary>
                public static ReadOnlySpan<byte> HttpUtf8 => "http"u8;

                /// <summary>
                /// Gets "mutualTLS" as a JSON value.
                /// </summary>
                public static readonly TypeEntity MutualTls = TypeEntity.Parse("\"mutualTLS\"");
                /// <summary>
                /// Gets "mutualTLS" as a UTF8 string.
                /// </summary>
                public static ReadOnlySpan<byte> MutualTlsUtf8 => "mutualTLS"u8;

                /// <summary>
                /// Gets "oauth2" as a JSON value.
                /// </summary>
                public static readonly TypeEntity Oauth2 = TypeEntity.Parse("\"oauth2\"");
                /// <summary>
                /// Gets "oauth2" as a UTF8 string.
                /// </summary>
                public static ReadOnlySpan<byte> Oauth2Utf8 => "oauth2"u8;

                /// <summary>
                /// Gets "openIdConnect" as a JSON value.
                /// </summary>
                public static readonly TypeEntity OpenIdConnect = TypeEntity.Parse("\"openIdConnect\"");
                /// <summary>
                /// Gets "openIdConnect" as a UTF8 string.
                /// </summary>
                public static ReadOnlySpan<byte> OpenIdConnectUtf8 => "openIdConnect"u8;

                /// <summary>
                /// Gets "apiKey" as a JSON value.
                /// </summary>
                internal static readonly TypeEntity Item0 = TypeEntity.Parse("\"apiKey\"");
                /// <summary>
                /// Gets "http" as a JSON value.
                /// </summary>
                internal static readonly TypeEntity Item1 = TypeEntity.Parse("\"http\"");
                /// <summary>
                /// Gets "mutualTLS" as a JSON value.
                /// </summary>
                internal static readonly TypeEntity Item2 = TypeEntity.Parse("\"mutualTLS\"");
                /// <summary>
                /// Gets "oauth2" as a JSON value.
                /// </summary>
                internal static readonly TypeEntity Item3 = TypeEntity.Parse("\"oauth2\"");
                /// <summary>
                /// Gets "openIdConnect" as a JSON value.
                /// </summary>
                internal static readonly TypeEntity Item4 = TypeEntity.Parse("\"openIdConnect\"");
            }
        }
    }
}