//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace Corvus.Json.JsonSchema.OpenApi31;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
/// <remarks>
/// <para>
/// The description of OpenAPI v3.1.x documents without schema validation, as defined by https://spec.openapis.org/oas/v3.1.0
/// </para>
/// </remarks>
public readonly partial struct OpenApiDocument
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct StylesForForm
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        public readonly partial struct RequiredStyle
        {
            /// <summary>
            /// Generated from JSON Schema.
            /// </summary>
            public readonly partial struct StyleEntity
            {
                /// <summary>
                /// Gets the const instance.
                /// </summary>
                public static StyleEntity ConstInstance => CorvusValidation.Const.As<StyleEntity>();

                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext;
                    if (level > ValidationLevel.Flag)
                    {
                        result = result.UsingResults();
                    }

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.UsingStack();
                        result = result.PushSchemaLocation("https://spec.openapis.org/oas/3.1/schema/2022-10-07#/$defs/styles-for-form/if/properties/style");
                    }

                    result = CorvusValidation.ConstValidationHandler(this, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = CorvusValidation.CompositionAnyOfValidationHandler(this, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }

                    return result;
                }

                /// <summary>
                /// Validation constants for the type.
                /// </summary>
                public static partial class CorvusValidation
                {
                    /// <summary>
                    /// A constant for the <c>const</c> keyword.
                    /// </summary>
                    public static readonly JsonString Const = JsonString.ParseValue("\"form\"");

                    /// <summary>
                    /// A constant for the <c>const</c> keyword.
                    /// </summary>
                    public static ReadOnlySpan<byte> ConstUtf8 => "\"form\""u8;

                    /// <summary>
                    /// Constant value validation.
                    /// </summary>
                    /// <param name="value">The value to validate.</param>
                    /// <param name="validationContext">The current validation context.</param>
                    /// <param name="level">The current validation level.</param>
                    /// <returns>The resulting validation context after validation.</returns>
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    internal static ValidationContext ConstValidationHandler(
                        in StyleEntity value,
                        in ValidationContext validationContext,
                        ValidationLevel level = ValidationLevel.Flag)
                    {
                        return ValidateConst(value, validationContext, level);

                        static ValidationContext ValidateConst(
                            in StyleEntity value,
                            in ValidationContext validationContext,
                            ValidationLevel level = ValidationLevel.Flag)
                        {
                            ValidationContext result = validationContext;
                            if (level > ValidationLevel.Basic)
                            {
                                result = result.PushValidationLocationReducedPathModifier(new("#/const"));
                            }

                            if (value.Equals(CorvusValidation.Const))
                            {
                                if (level == ValidationLevel.Verbose)
                                {
                                    result = result.WithResult(isValid: true, $"Validation const - the value '{value}' matched '\"form\'.");
                                }

                                if (level > ValidationLevel.Basic)
                                {
                                    result = result.PopLocation();
                                }

                                return result;
                            }

                            if (level >= ValidationLevel.Detailed)
                            {
                                result = result.WithResult(isValid: false, $"Validation const - the value '{value}' did not match '\"form\'.");
                            }
                            else if (level == ValidationLevel.Basic)
                            {
                                result = result.WithResult(isValid: false, "Validation const - the value did not match '\"form\'.");
                            }
                            else
                            {
                                return ValidationContext.InvalidContext;
                            }

                            if (level > ValidationLevel.Basic)
                            {
                                result = result.PopLocation();
                            }

                            return result;
                        }
                    }

                    /// <summary>
                    /// Composition validation (any-of).
                    /// </summary>
                    /// <param name="value">The value to validate.</param>
                    /// <param name="validationContext">The current validation context.</param>
                    /// <param name="level">The current validation level.</param>
                    /// <returns>The resulting validation context after validation.</returns>
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    internal static ValidationContext CompositionAnyOfValidationHandler(
                        in StyleEntity value,
                        in ValidationContext validationContext,
                        ValidationLevel level = ValidationLevel.Flag)
                    {
                        ValidationContext result = validationContext;
                        return result;
                    }
                }
            }
        }
    }
}
