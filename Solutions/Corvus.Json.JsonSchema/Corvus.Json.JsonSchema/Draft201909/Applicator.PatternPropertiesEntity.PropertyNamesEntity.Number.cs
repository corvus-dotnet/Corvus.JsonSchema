//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.Draft201909;
public readonly partial struct Applicator
{
    public readonly partial struct PatternPropertiesEntity
    {
        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly partial struct PropertyNamesEntity : IJsonNumber<PropertyNamesEntity>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref = "PropertyNamesEntity"/> struct.
            /// </summary>
            /// <param name = "value">The value from which to construct the instance.</param>
            public PropertyNamesEntity(BinaryJsonNumber value)
            {
                this.jsonElementBacking = default;
                this.backing = Backing.Number;
                this.numberBacking = value;
                this.stringBacking = string.Empty;
                this.arrayBacking = ImmutableList<JsonAny>.Empty;
                this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="PropertyNamesEntity"/> struct.
            /// </summary>
            /// <param name="value">The value from which to initialize the number.</param>
            public PropertyNamesEntity(byte value)
            {
                this.jsonElementBacking = default;
                this.backing = Backing.Number;
                this.numberBacking = new(value);
                this.stringBacking = string.Empty;
                this.arrayBacking = ImmutableList<JsonAny>.Empty;
                this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="PropertyNamesEntity"/> struct.
            /// </summary>
            /// <param name="value">The value from which to initialize the number.</param>
            public PropertyNamesEntity(decimal value)
            {
                this.jsonElementBacking = default;
                this.backing = Backing.Number;
                this.numberBacking = new(value);
                this.stringBacking = string.Empty;
                this.arrayBacking = ImmutableList<JsonAny>.Empty;
                this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="PropertyNamesEntity"/> struct.
            /// </summary>
            /// <param name="value">The value from which to initialize the number.</param>
            public PropertyNamesEntity(double value)
            {
                this.jsonElementBacking = default;
                this.backing = Backing.Number;
                this.numberBacking = new(value);
                this.stringBacking = string.Empty;
                this.arrayBacking = ImmutableList<JsonAny>.Empty;
                this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="PropertyNamesEntity"/> struct.
            /// </summary>
            /// <param name="value">The value from which to initialize the number.</param>
            public PropertyNamesEntity(Half value)
            {
                this.jsonElementBacking = default;
                this.backing = Backing.Number;
                this.numberBacking = new(value);
                this.stringBacking = string.Empty;
                this.arrayBacking = ImmutableList<JsonAny>.Empty;
                this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="PropertyNamesEntity"/> struct.
            /// </summary>
            /// <param name="value">The value from which to initialize the number.</param>
            public PropertyNamesEntity(short value)
            {
                this.jsonElementBacking = default;
                this.backing = Backing.Number;
                this.numberBacking = new(value);
                this.stringBacking = string.Empty;
                this.arrayBacking = ImmutableList<JsonAny>.Empty;
                this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="PropertyNamesEntity"/> struct.
            /// </summary>
            /// <param name="value">The value from which to initialize the number.</param>
            public PropertyNamesEntity(int value)
            {
                this.jsonElementBacking = default;
                this.backing = Backing.Number;
                this.numberBacking = new(value);
                this.stringBacking = string.Empty;
                this.arrayBacking = ImmutableList<JsonAny>.Empty;
                this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="PropertyNamesEntity"/> struct.
            /// </summary>
            /// <param name="value">The value from which to initialize the number.</param>
            public PropertyNamesEntity(long value)
            {
                this.jsonElementBacking = default;
                this.backing = Backing.Number;
                this.numberBacking = new(value);
                this.stringBacking = string.Empty;
                this.arrayBacking = ImmutableList<JsonAny>.Empty;
                this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="PropertyNamesEntity"/> struct.
            /// </summary>
            /// <param name="value">The value from which to initialize the number.</param>
            public PropertyNamesEntity(sbyte value)
            {
                this.jsonElementBacking = default;
                this.backing = Backing.Number;
                this.numberBacking = new(value);
                this.stringBacking = string.Empty;
                this.arrayBacking = ImmutableList<JsonAny>.Empty;
                this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="PropertyNamesEntity"/> struct.
            /// </summary>
            /// <param name="value">The value from which to initialize the number.</param>
            public PropertyNamesEntity(float value)
            {
                this.jsonElementBacking = default;
                this.backing = Backing.Number;
                this.numberBacking = new(value);
                this.stringBacking = string.Empty;
                this.arrayBacking = ImmutableList<JsonAny>.Empty;
                this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="PropertyNamesEntity"/> struct.
            /// </summary>
            /// <param name="value">The value from which to initialize the number.</param>
            public PropertyNamesEntity(ushort value)
            {
                this.jsonElementBacking = default;
                this.backing = Backing.Number;
                this.numberBacking = new(value);
                this.stringBacking = string.Empty;
                this.arrayBacking = ImmutableList<JsonAny>.Empty;
                this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="PropertyNamesEntity"/> struct.
            /// </summary>
            /// <param name="value">The value from which to initialize the number.</param>
            public PropertyNamesEntity(uint value)
            {
                this.jsonElementBacking = default;
                this.backing = Backing.Number;
                this.numberBacking = new(value);
                this.stringBacking = string.Empty;
                this.arrayBacking = ImmutableList<JsonAny>.Empty;
                this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="PropertyNamesEntity"/> struct.
            /// </summary>
            /// <param name="value">The value from which to initialize the number.</param>
            public PropertyNamesEntity(ulong value)
            {
                this.jsonElementBacking = default;
                this.backing = Backing.Number;
                this.numberBacking = new(value);
                this.stringBacking = string.Empty;
                this.arrayBacking = ImmutableList<JsonAny>.Empty;
                this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
            }

            /// <summary>
            /// Conversion to JsonNumber.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonNumber(PropertyNamesEntity value)
            {
                return JsonNumber.FromNumber(value);
            }

            /// <summary>
            /// Conversion from JsonNumber.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator PropertyNamesEntity(JsonNumber value)
            {
                if (value.HasJsonElementBacking)
                {
                    return new(value.AsJsonElement);
                }

                return new(value.AsBinaryJsonNumber);
            }

            /// <summary>
            /// Conversion to byte.
            /// </summary>
            /// <param name="value">The value to convert.</param>
            /// <exception cref="InvalidOperationException">The value was not a number.</exception>
            /// <exception cref="FormatException">The value was not formatted as a byte.</exception>
            public static explicit operator byte(PropertyNamesEntity value)
            {
                if ((value.backing & Backing.JsonElement) != 0)
                {
                    return value.jsonElementBacking.SafeGetByte();
                }

                if ((value.backing & Backing.Number) != 0)
                {
                    return value.numberBacking.CreateChecked<byte>();
                }

                throw new InvalidOperationException();
            }

            /// <summary>
            /// Conversion to decimal.
            /// </summary>
            /// <param name="value">The value to convert.</param>
            /// <exception cref="InvalidOperationException">The value was not a number.</exception>
            /// <exception cref="FormatException">The value was not formatted as a decimal.</exception>
            public static explicit operator decimal(PropertyNamesEntity value)
            {
                if ((value.backing & Backing.JsonElement) != 0)
                {
                    return value.jsonElementBacking.SafeGetDecimal();
                }

                if ((value.backing & Backing.Number) != 0)
                {
                    return value.numberBacking.CreateChecked<decimal>();
                }

                throw new InvalidOperationException();
            }

            /// <summary>
            /// Conversion to double.
            /// </summary>
            /// <param name="value">The value to convert.</param>
            /// <exception cref="InvalidOperationException">The value was not a number.</exception>
            /// <exception cref="FormatException">The value was not formatted as a double.</exception>
            public static explicit operator double(PropertyNamesEntity value)
            {
                if ((value.backing & Backing.JsonElement) != 0)
                {
                    return value.jsonElementBacking.SafeGetDouble();
                }

                if ((value.backing & Backing.Number) != 0)
                {
                    return value.numberBacking.CreateChecked<double>();
                }

                throw new InvalidOperationException();
            }

            /// <summary>
            /// Conversion to Int16.
            /// </summary>
            /// <param name="value">The value to convert.</param>
            /// <exception cref="InvalidOperationException">The value was not a number.</exception>
            /// <exception cref="FormatException">The value was not formatted as an Int16.</exception>
            public static explicit operator short(PropertyNamesEntity value)
            {
                if ((value.backing & Backing.JsonElement) != 0)
                {
                    return value.jsonElementBacking.SafeGetInt16();
                }

                if ((value.backing & Backing.Number) != 0)
                {
                    return value.numberBacking.CreateChecked<short>();
                }

                throw new InvalidOperationException();
            }

            /// <summary>
            /// Conversion to Int32.
            /// </summary>
            /// <param name="value">The value to convert.</param>
            /// <exception cref="InvalidOperationException">The value was not a number.</exception>
            /// <exception cref="FormatException">The value was not formatted as an Int32.</exception>
            public static explicit operator int(PropertyNamesEntity value)
            {
                if ((value.backing & Backing.JsonElement) != 0)
                {
                    return value.jsonElementBacking.SafeGetInt32();
                }

                if ((value.backing & Backing.Number) != 0)
                {
                    return value.numberBacking.CreateChecked<int>();
                }

                throw new InvalidOperationException();
            }

            /// <summary>
            /// Conversion to Int64.
            /// </summary>
            /// <param name="value">The value to convert.</param>
            /// <exception cref="InvalidOperationException">The value was not a number.</exception>
            /// <exception cref="FormatException">The value was not formatted as an Int64.</exception>
            public static explicit operator long(PropertyNamesEntity value)
            {
                if ((value.backing & Backing.JsonElement) != 0)
                {
                    return value.jsonElementBacking.SafeGetInt64();
                }

                if ((value.backing & Backing.Number) != 0)
                {
                    return value.numberBacking.CreateChecked<long>();
                }

                throw new InvalidOperationException();
            }

            /// <summary>
            /// Conversion to SByte.
            /// </summary>
            /// <param name="value">The value to convert.</param>
            /// <exception cref="InvalidOperationException">The value was not a number.</exception>
            /// <exception cref="FormatException">The value was not formatted as an SByte.</exception>
            public static explicit operator sbyte(PropertyNamesEntity value)
            {
                if ((value.backing & Backing.JsonElement) != 0)
                {
                    return value.jsonElementBacking.SafeGetSByte();
                }

                if ((value.backing & Backing.Number) != 0)
                {
                    return value.numberBacking.CreateChecked<sbyte>();
                }

                throw new InvalidOperationException();
            }

            /// <summary>
            /// Conversion to Half.
            /// </summary>
            /// <param name="value">The value to convert.</param>
            /// <exception cref="InvalidOperationException">The value was not a number.</exception>
            /// <exception cref="FormatException">The value was not formatted as a Single.</exception>
            public static explicit operator Half(PropertyNamesEntity value)
            {
                if ((value.backing & Backing.JsonElement) != 0)
                {
                    return value.jsonElementBacking.SafeGetHalf();
                }

                if ((value.backing & Backing.Number) != 0)
                {
                    return value.numberBacking.CreateChecked<Half>();
                }

                throw new InvalidOperationException();
            }

            /// <summary>
            /// Conversion to Single.
            /// </summary>
            /// <param name="value">The value to convert.</param>
            /// <exception cref="InvalidOperationException">The value was not a number.</exception>
            /// <exception cref="FormatException">The value was not formatted as a Single.</exception>
            public static explicit operator float(PropertyNamesEntity value)
            {
                if ((value.backing & Backing.JsonElement) != 0)
                {
                    return value.jsonElementBacking.SafeGetSingle();
                }

                if ((value.backing & Backing.Number) != 0)
                {
                    return value.numberBacking.CreateChecked<float>();
                }

                throw new InvalidOperationException();
            }

            /// <summary>
            /// Conversion to UInt16.
            /// </summary>
            /// <param name="value">The value to convert.</param>
            /// <exception cref="InvalidOperationException">The value was not a number.</exception>
            /// <exception cref="FormatException">The value was not formatted as an UInt16.</exception>
            public static explicit operator ushort(PropertyNamesEntity value)
            {
                if ((value.backing & Backing.JsonElement) != 0)
                {
                    return value.jsonElementBacking.SafeGetUInt16();
                }

                if ((value.backing & Backing.Number) != 0)
                {
                    return value.numberBacking.CreateChecked<ushort>();
                }

                throw new InvalidOperationException();
            }

            /// <summary>
            /// Conversion to UInt32.
            /// </summary>
            /// <param name="value">The value to convert.</param>
            /// <exception cref="InvalidOperationException">The value was not a number.</exception>
            /// <exception cref="FormatException">The value was not formatted as an UInt32.</exception>
            public static explicit operator uint(PropertyNamesEntity value)
            {
                if ((value.backing & Backing.JsonElement) != 0)
                {
                    return value.jsonElementBacking.SafeGetUInt32();
                }

                if ((value.backing & Backing.Number) != 0)
                {
                    return value.numberBacking.CreateChecked<uint>();
                }

                throw new InvalidOperationException();
            }

            /// <summary>
            /// Conversion to UInt64.
            /// </summary>
            /// <param name="value">The value to convert.</param>
            /// <exception cref="InvalidOperationException">The value was not a number.</exception>
            /// <exception cref="FormatException">The value was not formatted as an UInt64.</exception>
            public static explicit operator ulong(PropertyNamesEntity value)
            {
                if ((value.backing & Backing.JsonElement) != 0)
                {
                    return value.jsonElementBacking.SafeGetUInt64();
                }

                if ((value.backing & Backing.Number) != 0)
                {
                    return value.numberBacking.CreateChecked<ulong>();
                }

                throw new InvalidOperationException();
            }

            /// <summary>
            /// Conversion from byte.
            /// </summary>
            /// <param name="value">The value to convert.</param>
            public static implicit operator PropertyNamesEntity(byte value)
            {
                return new(value);
            }

            /// <summary>
            /// Conversion from decimal.
            /// </summary>
            /// <param name="value">The value to convert.</param>
            public static implicit operator PropertyNamesEntity(decimal value)
            {
                return new(value);
            }

            /// <summary>
            /// Conversion from double.
            /// </summary>
            /// <param name="value">The value to convert.</param>
            public static implicit operator PropertyNamesEntity(double value)
            {
                return new(value);
            }

            /// <summary>
            /// Conversion from Half.
            /// </summary>
            /// <param name="value">The value to convert.</param>
            public static implicit operator PropertyNamesEntity(Half value)
            {
                return new(value);
            }

            /// <summary>
            /// Conversion from short.
            /// </summary>
            /// <param name="value">The value to convert.</param>
            public static implicit operator PropertyNamesEntity(short value)
            {
                return new(value);
            }

            /// <summary>
            /// Conversion from int.
            /// </summary>
            /// <param name="value">The value to convert.</param>
            public static implicit operator PropertyNamesEntity(int value)
            {
                return new(value);
            }

            /// <summary>
            /// Conversion from long.
            /// </summary>
            /// <param name="value">The value to convert.</param>
            public static implicit operator PropertyNamesEntity(long value)
            {
                return new(value);
            }

            /// <summary>
            /// Conversion from sbyte.
            /// </summary>
            /// <param name="value">The value to convert.</param>
            public static implicit operator PropertyNamesEntity(sbyte value)
            {
                return new(value);
            }

            /// <summary>
            /// Conversion from float.
            /// </summary>
            /// <param name="value">The value to convert.</param>
            public static implicit operator PropertyNamesEntity(float value)
            {
                return new(value);
            }

            /// <summary>
            /// Conversion from ushort.
            /// </summary>
            /// <param name="value">The value to convert.</param>
            public static implicit operator PropertyNamesEntity(ushort value)
            {
                return new(value);
            }

            /// <summary>
            /// Conversion from uint.
            /// </summary>
            /// <param name="value">The value to convert.</param>
            public static implicit operator PropertyNamesEntity(uint value)
            {
                return new(value);
            }

            /// <summary>
            /// Conversion from ulong.
            /// </summary>
            /// <param name="value">The value to convert.</param>
            public static implicit operator PropertyNamesEntity(ulong value)
            {
                return new(value);
            }

            /// <inheritdoc/>
            public BinaryJsonNumber AsBinaryJsonNumber => this.HasDotnetBacking ? this.numberBacking : BinaryJsonNumber.FromJson(this.jsonElementBacking);
        }
    }
}