//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.Draft201909;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct Applicator
{
    /// <summary>
    /// JSON property name for <see cref = "AdditionalItems"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> AdditionalItemsUtf8JsonPropertyName = new byte[]{97, 100, 100, 105, 116, 105, 111, 110, 97, 108, 73, 116, 101, 109, 115};
    /// <summary>
    /// JSON property name for <see cref = "AdditionalItems"/>.
    /// </summary>
    public const string AdditionalItemsJsonPropertyName = "additionalItems";
    /// <summary>
    /// JSON property name for <see cref = "UnevaluatedItems"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> UnevaluatedItemsUtf8JsonPropertyName = new byte[]{117, 110, 101, 118, 97, 108, 117, 97, 116, 101, 100, 73, 116, 101, 109, 115};
    /// <summary>
    /// JSON property name for <see cref = "UnevaluatedItems"/>.
    /// </summary>
    public const string UnevaluatedItemsJsonPropertyName = "unevaluatedItems";
    /// <summary>
    /// JSON property name for <see cref = "Items"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> ItemsUtf8JsonPropertyName = new byte[]{105, 116, 101, 109, 115};
    /// <summary>
    /// JSON property name for <see cref = "Items"/>.
    /// </summary>
    public const string ItemsJsonPropertyName = "items";
    /// <summary>
    /// JSON property name for <see cref = "Contains"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> ContainsUtf8JsonPropertyName = new byte[]{99, 111, 110, 116, 97, 105, 110, 115};
    /// <summary>
    /// JSON property name for <see cref = "Contains"/>.
    /// </summary>
    public const string ContainsJsonPropertyName = "contains";
    /// <summary>
    /// JSON property name for <see cref = "AdditionalProperties"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> AdditionalPropertiesUtf8JsonPropertyName = new byte[]{97, 100, 100, 105, 116, 105, 111, 110, 97, 108, 80, 114, 111, 112, 101, 114, 116, 105, 101, 115};
    /// <summary>
    /// JSON property name for <see cref = "AdditionalProperties"/>.
    /// </summary>
    public const string AdditionalPropertiesJsonPropertyName = "additionalProperties";
    /// <summary>
    /// JSON property name for <see cref = "UnevaluatedProperties"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> UnevaluatedPropertiesUtf8JsonPropertyName = new byte[]{117, 110, 101, 118, 97, 108, 117, 97, 116, 101, 100, 80, 114, 111, 112, 101, 114, 116, 105, 101, 115};
    /// <summary>
    /// JSON property name for <see cref = "UnevaluatedProperties"/>.
    /// </summary>
    public const string UnevaluatedPropertiesJsonPropertyName = "unevaluatedProperties";
    /// <summary>
    /// JSON property name for <see cref = "Properties"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> PropertiesUtf8JsonPropertyName = new byte[]{112, 114, 111, 112, 101, 114, 116, 105, 101, 115};
    /// <summary>
    /// JSON property name for <see cref = "Properties"/>.
    /// </summary>
    public const string PropertiesJsonPropertyName = "properties";
    /// <summary>
    /// JSON property name for <see cref = "PatternProperties"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> PatternPropertiesUtf8JsonPropertyName = new byte[]{112, 97, 116, 116, 101, 114, 110, 80, 114, 111, 112, 101, 114, 116, 105, 101, 115};
    /// <summary>
    /// JSON property name for <see cref = "PatternProperties"/>.
    /// </summary>
    public const string PatternPropertiesJsonPropertyName = "patternProperties";
    /// <summary>
    /// JSON property name for <see cref = "DependentSchemas"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> DependentSchemasUtf8JsonPropertyName = new byte[]{100, 101, 112, 101, 110, 100, 101, 110, 116, 83, 99, 104, 101, 109, 97, 115};
    /// <summary>
    /// JSON property name for <see cref = "DependentSchemas"/>.
    /// </summary>
    public const string DependentSchemasJsonPropertyName = "dependentSchemas";
    /// <summary>
    /// JSON property name for <see cref = "PropertyNames"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> PropertyNamesUtf8JsonPropertyName = new byte[]{112, 114, 111, 112, 101, 114, 116, 121, 78, 97, 109, 101, 115};
    /// <summary>
    /// JSON property name for <see cref = "PropertyNames"/>.
    /// </summary>
    public const string PropertyNamesJsonPropertyName = "propertyNames";
    /// <summary>
    /// JSON property name for <see cref = "If"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> IfUtf8JsonPropertyName = new byte[]{105, 102};
    /// <summary>
    /// JSON property name for <see cref = "If"/>.
    /// </summary>
    public const string IfJsonPropertyName = "if";
    /// <summary>
    /// JSON property name for <see cref = "Then"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> ThenUtf8JsonPropertyName = new byte[]{116, 104, 101, 110};
    /// <summary>
    /// JSON property name for <see cref = "Then"/>.
    /// </summary>
    public const string ThenJsonPropertyName = "then";
    /// <summary>
    /// JSON property name for <see cref = "Else"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> ElseUtf8JsonPropertyName = new byte[]{101, 108, 115, 101};
    /// <summary>
    /// JSON property name for <see cref = "Else"/>.
    /// </summary>
    public const string ElseJsonPropertyName = "else";
    /// <summary>
    /// JSON property name for <see cref = "AllOf"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> AllOfUtf8JsonPropertyName = new byte[]{97, 108, 108, 79, 102};
    /// <summary>
    /// JSON property name for <see cref = "AllOf"/>.
    /// </summary>
    public const string AllOfJsonPropertyName = "allOf";
    /// <summary>
    /// JSON property name for <see cref = "AnyOf"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> AnyOfUtf8JsonPropertyName = new byte[]{97, 110, 121, 79, 102};
    /// <summary>
    /// JSON property name for <see cref = "AnyOf"/>.
    /// </summary>
    public const string AnyOfJsonPropertyName = "anyOf";
    /// <summary>
    /// JSON property name for <see cref = "OneOf"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> OneOfUtf8JsonPropertyName = new byte[]{111, 110, 101, 79, 102};
    /// <summary>
    /// JSON property name for <see cref = "OneOf"/>.
    /// </summary>
    public const string OneOfJsonPropertyName = "oneOf";
    /// <summary>
    /// JSON property name for <see cref = "Not"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> NotUtf8JsonPropertyName = new byte[]{110, 111, 116};
    /// <summary>
    /// JSON property name for <see cref = "Not"/>.
    /// </summary>
    public const string NotJsonPropertyName = "not";
    /// <summary>
    /// Gets AdditionalItems.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Schema AdditionalItems
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(AdditionalItemsUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(AdditionalItemsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets UnevaluatedItems.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Schema UnevaluatedItems
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(UnevaluatedItemsUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(UnevaluatedItemsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Items.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Applicator.ItemsEntity Items
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ItemsUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Applicator.ItemsEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ItemsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Applicator.ItemsEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Contains.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Schema Contains
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ContainsUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ContainsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets AdditionalProperties.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Schema AdditionalProperties
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(AdditionalPropertiesUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(AdditionalPropertiesJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets UnevaluatedProperties.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Schema UnevaluatedProperties
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(UnevaluatedPropertiesUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(UnevaluatedPropertiesJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Properties.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Applicator.PropertiesEntity Properties
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PropertiesUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Applicator.PropertiesEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PropertiesJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Applicator.PropertiesEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PatternProperties.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Applicator.PatternPropertiesEntity PatternProperties
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PatternPropertiesUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Applicator.PatternPropertiesEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PatternPropertiesJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Applicator.PatternPropertiesEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets DependentSchemas.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Applicator.DependentSchemasEntity DependentSchemas
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(DependentSchemasUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Applicator.DependentSchemasEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(DependentSchemasJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Applicator.DependentSchemasEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets PropertyNames.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Schema PropertyNames
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PropertyNamesUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PropertyNamesJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets If.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Schema If
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(IfUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(IfJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Then.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Schema Then
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ThenUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ThenJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Else.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Schema Else
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ElseUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ElseJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets AllOf.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray AllOf
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(AllOfUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(AllOfJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets AnyOf.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray AnyOf
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(AnyOfUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(AnyOfJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets OneOf.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray OneOf
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(OneOfUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(OneOfJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Not.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft201909.Schema Not
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(NotUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft201909.Schema(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(NotJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft201909.Schema>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "Applicator"/>.
    /// </summary>
    public static Applicator Create(Corvus.Json.JsonSchema.Draft201909.Schema? additionalItems = null, Corvus.Json.JsonSchema.Draft201909.Schema? unevaluatedItems = null, Corvus.Json.JsonSchema.Draft201909.Applicator.ItemsEntity? items = null, Corvus.Json.JsonSchema.Draft201909.Schema? contains = null, Corvus.Json.JsonSchema.Draft201909.Schema? additionalProperties = null, Corvus.Json.JsonSchema.Draft201909.Schema? unevaluatedProperties = null, Corvus.Json.JsonSchema.Draft201909.Applicator.PropertiesEntity? properties = null, Corvus.Json.JsonSchema.Draft201909.Applicator.PatternPropertiesEntity? patternProperties = null, Corvus.Json.JsonSchema.Draft201909.Applicator.DependentSchemasEntity? dependentSchemas = null, Corvus.Json.JsonSchema.Draft201909.Schema? propertyNames = null, Corvus.Json.JsonSchema.Draft201909.Schema? @if = null, Corvus.Json.JsonSchema.Draft201909.Schema? then = null, Corvus.Json.JsonSchema.Draft201909.Schema? @else = null, Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray? allOf = null, Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray? anyOf = null, Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray? oneOf = null, Corvus.Json.JsonSchema.Draft201909.Schema? not = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        if (additionalItems is Corvus.Json.JsonSchema.Draft201909.Schema additionalItems__)
        {
            builder.Add(AdditionalItemsJsonPropertyName, additionalItems__.AsAny);
        }

        if (unevaluatedItems is Corvus.Json.JsonSchema.Draft201909.Schema unevaluatedItems__)
        {
            builder.Add(UnevaluatedItemsJsonPropertyName, unevaluatedItems__.AsAny);
        }

        if (items is Corvus.Json.JsonSchema.Draft201909.Applicator.ItemsEntity items__)
        {
            builder.Add(ItemsJsonPropertyName, items__.AsAny);
        }

        if (contains is Corvus.Json.JsonSchema.Draft201909.Schema contains__)
        {
            builder.Add(ContainsJsonPropertyName, contains__.AsAny);
        }

        if (additionalProperties is Corvus.Json.JsonSchema.Draft201909.Schema additionalProperties__)
        {
            builder.Add(AdditionalPropertiesJsonPropertyName, additionalProperties__.AsAny);
        }

        if (unevaluatedProperties is Corvus.Json.JsonSchema.Draft201909.Schema unevaluatedProperties__)
        {
            builder.Add(UnevaluatedPropertiesJsonPropertyName, unevaluatedProperties__.AsAny);
        }

        if (properties is Corvus.Json.JsonSchema.Draft201909.Applicator.PropertiesEntity properties__)
        {
            builder.Add(PropertiesJsonPropertyName, properties__.AsAny);
        }

        if (patternProperties is Corvus.Json.JsonSchema.Draft201909.Applicator.PatternPropertiesEntity patternProperties__)
        {
            builder.Add(PatternPropertiesJsonPropertyName, patternProperties__.AsAny);
        }

        if (dependentSchemas is Corvus.Json.JsonSchema.Draft201909.Applicator.DependentSchemasEntity dependentSchemas__)
        {
            builder.Add(DependentSchemasJsonPropertyName, dependentSchemas__.AsAny);
        }

        if (propertyNames is Corvus.Json.JsonSchema.Draft201909.Schema propertyNames__)
        {
            builder.Add(PropertyNamesJsonPropertyName, propertyNames__.AsAny);
        }

        if (@if is Corvus.Json.JsonSchema.Draft201909.Schema @if__)
        {
            builder.Add(IfJsonPropertyName, @if__.AsAny);
        }

        if (then is Corvus.Json.JsonSchema.Draft201909.Schema then__)
        {
            builder.Add(ThenJsonPropertyName, then__.AsAny);
        }

        if (@else is Corvus.Json.JsonSchema.Draft201909.Schema @else__)
        {
            builder.Add(ElseJsonPropertyName, @else__.AsAny);
        }

        if (allOf is Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray allOf__)
        {
            builder.Add(AllOfJsonPropertyName, allOf__.AsAny);
        }

        if (anyOf is Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray anyOf__)
        {
            builder.Add(AnyOfJsonPropertyName, anyOf__.AsAny);
        }

        if (oneOf is Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray oneOf__)
        {
            builder.Add(OneOfJsonPropertyName, oneOf__.AsAny);
        }

        if (not is Corvus.Json.JsonSchema.Draft201909.Schema not__)
        {
            builder.Add(NotJsonPropertyName, not__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets additionalItems.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithAdditionalItems(in Corvus.Json.JsonSchema.Draft201909.Schema value)
    {
        return this.SetProperty(AdditionalItemsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets unevaluatedItems.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithUnevaluatedItems(in Corvus.Json.JsonSchema.Draft201909.Schema value)
    {
        return this.SetProperty(UnevaluatedItemsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets items.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithItems(in Corvus.Json.JsonSchema.Draft201909.Applicator.ItemsEntity value)
    {
        return this.SetProperty(ItemsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets contains.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithContains(in Corvus.Json.JsonSchema.Draft201909.Schema value)
    {
        return this.SetProperty(ContainsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets additionalProperties.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithAdditionalProperties(in Corvus.Json.JsonSchema.Draft201909.Schema value)
    {
        return this.SetProperty(AdditionalPropertiesJsonPropertyName, value);
    }

    /// <summary>
    /// Sets unevaluatedProperties.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithUnevaluatedProperties(in Corvus.Json.JsonSchema.Draft201909.Schema value)
    {
        return this.SetProperty(UnevaluatedPropertiesJsonPropertyName, value);
    }

    /// <summary>
    /// Sets properties.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithProperties(in Corvus.Json.JsonSchema.Draft201909.Applicator.PropertiesEntity value)
    {
        return this.SetProperty(PropertiesJsonPropertyName, value);
    }

    /// <summary>
    /// Sets patternProperties.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithPatternProperties(in Corvus.Json.JsonSchema.Draft201909.Applicator.PatternPropertiesEntity value)
    {
        return this.SetProperty(PatternPropertiesJsonPropertyName, value);
    }

    /// <summary>
    /// Sets dependentSchemas.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithDependentSchemas(in Corvus.Json.JsonSchema.Draft201909.Applicator.DependentSchemasEntity value)
    {
        return this.SetProperty(DependentSchemasJsonPropertyName, value);
    }

    /// <summary>
    /// Sets propertyNames.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithPropertyNames(in Corvus.Json.JsonSchema.Draft201909.Schema value)
    {
        return this.SetProperty(PropertyNamesJsonPropertyName, value);
    }

    /// <summary>
    /// Sets if.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithIf(in Corvus.Json.JsonSchema.Draft201909.Schema value)
    {
        return this.SetProperty(IfJsonPropertyName, value);
    }

    /// <summary>
    /// Sets then.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithThen(in Corvus.Json.JsonSchema.Draft201909.Schema value)
    {
        return this.SetProperty(ThenJsonPropertyName, value);
    }

    /// <summary>
    /// Sets else.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithElse(in Corvus.Json.JsonSchema.Draft201909.Schema value)
    {
        return this.SetProperty(ElseJsonPropertyName, value);
    }

    /// <summary>
    /// Sets allOf.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithAllOf(in Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray value)
    {
        return this.SetProperty(AllOfJsonPropertyName, value);
    }

    /// <summary>
    /// Sets anyOf.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithAnyOf(in Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray value)
    {
        return this.SetProperty(AnyOfJsonPropertyName, value);
    }

    /// <summary>
    /// Sets oneOf.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithOneOf(in Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray value)
    {
        return this.SetProperty(OneOfJsonPropertyName, value);
    }

    /// <summary>
    /// Sets not.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Applicator WithNot(in Corvus.Json.JsonSchema.Draft201909.Schema value)
    {
        return this.SetProperty(NotJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateAdditionalItems(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Schema>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateUnevaluatedItems(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Schema>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateItems(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Applicator.ItemsEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateContains(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Schema>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateAdditionalProperties(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Schema>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateUnevaluatedProperties(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Schema>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateProperties(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Applicator.PropertiesEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePatternProperties(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Applicator.PatternPropertiesEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateDependentSchemas(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Applicator.DependentSchemasEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePropertyNames(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Schema>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateIf(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Schema>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateThen(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Schema>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateElse(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Schema>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateAllOf(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateAnyOf(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateOneOf(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Applicator.SchemaArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateNot(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft201909.Schema>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(AdditionalItemsUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateAdditionalItems;
                return true;
            }
            else if (property.NameEquals(UnevaluatedItemsUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateUnevaluatedItems;
                return true;
            }
            else if (property.NameEquals(ItemsUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateItems;
                return true;
            }
            else if (property.NameEquals(ContainsUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateContains;
                return true;
            }
            else if (property.NameEquals(AdditionalPropertiesUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateAdditionalProperties;
                return true;
            }
            else if (property.NameEquals(UnevaluatedPropertiesUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateUnevaluatedProperties;
                return true;
            }
            else if (property.NameEquals(PropertiesUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateProperties;
                return true;
            }
            else if (property.NameEquals(PatternPropertiesUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidatePatternProperties;
                return true;
            }
            else if (property.NameEquals(DependentSchemasUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateDependentSchemas;
                return true;
            }
            else if (property.NameEquals(PropertyNamesUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidatePropertyNames;
                return true;
            }
            else if (property.NameEquals(IfUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateIf;
                return true;
            }
            else if (property.NameEquals(ThenUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateThen;
                return true;
            }
            else if (property.NameEquals(ElseUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateElse;
                return true;
            }
            else if (property.NameEquals(AllOfUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateAllOf;
                return true;
            }
            else if (property.NameEquals(AnyOfUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateAnyOf;
                return true;
            }
            else if (property.NameEquals(OneOfUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateOneOf;
                return true;
            }
            else if (property.NameEquals(NotUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateNot;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(AdditionalItemsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateAdditionalItems;
                return true;
            }
            else if (property.NameEquals(UnevaluatedItemsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateUnevaluatedItems;
                return true;
            }
            else if (property.NameEquals(ItemsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateItems;
                return true;
            }
            else if (property.NameEquals(ContainsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateContains;
                return true;
            }
            else if (property.NameEquals(AdditionalPropertiesJsonPropertyName))
            {
                propertyValidator = __CorvusValidateAdditionalProperties;
                return true;
            }
            else if (property.NameEquals(UnevaluatedPropertiesJsonPropertyName))
            {
                propertyValidator = __CorvusValidateUnevaluatedProperties;
                return true;
            }
            else if (property.NameEquals(PropertiesJsonPropertyName))
            {
                propertyValidator = __CorvusValidateProperties;
                return true;
            }
            else if (property.NameEquals(PatternPropertiesJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePatternProperties;
                return true;
            }
            else if (property.NameEquals(DependentSchemasJsonPropertyName))
            {
                propertyValidator = __CorvusValidateDependentSchemas;
                return true;
            }
            else if (property.NameEquals(PropertyNamesJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePropertyNames;
                return true;
            }
            else if (property.NameEquals(IfJsonPropertyName))
            {
                propertyValidator = __CorvusValidateIf;
                return true;
            }
            else if (property.NameEquals(ThenJsonPropertyName))
            {
                propertyValidator = __CorvusValidateThen;
                return true;
            }
            else if (property.NameEquals(ElseJsonPropertyName))
            {
                propertyValidator = __CorvusValidateElse;
                return true;
            }
            else if (property.NameEquals(AllOfJsonPropertyName))
            {
                propertyValidator = __CorvusValidateAllOf;
                return true;
            }
            else if (property.NameEquals(AnyOfJsonPropertyName))
            {
                propertyValidator = __CorvusValidateAnyOf;
                return true;
            }
            else if (property.NameEquals(OneOfJsonPropertyName))
            {
                propertyValidator = __CorvusValidateOneOf;
                return true;
            }
            else if (property.NameEquals(NotJsonPropertyName))
            {
                propertyValidator = __CorvusValidateNot;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}