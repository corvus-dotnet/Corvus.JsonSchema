//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.Draft202012;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct Validation
{
    /// <summary>
    /// JSON property name for <see cref = "Type"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> TypeUtf8JsonPropertyName = new byte[]{116, 121, 112, 101};
    /// <summary>
    /// JSON property name for <see cref = "Type"/>.
    /// </summary>
    public const string TypeJsonPropertyName = "type";
    /// <summary>
    /// JSON property name for <see cref = "Const"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> ConstUtf8JsonPropertyName = new byte[]{99, 111, 110, 115, 116};
    /// <summary>
    /// JSON property name for <see cref = "Const"/>.
    /// </summary>
    public const string ConstJsonPropertyName = "const";
    /// <summary>
    /// JSON property name for <see cref = "Enum"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> EnumUtf8JsonPropertyName = new byte[]{101, 110, 117, 109};
    /// <summary>
    /// JSON property name for <see cref = "Enum"/>.
    /// </summary>
    public const string EnumJsonPropertyName = "enum";
    /// <summary>
    /// JSON property name for <see cref = "MultipleOf"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> MultipleOfUtf8JsonPropertyName = new byte[]{109, 117, 108, 116, 105, 112, 108, 101, 79, 102};
    /// <summary>
    /// JSON property name for <see cref = "MultipleOf"/>.
    /// </summary>
    public const string MultipleOfJsonPropertyName = "multipleOf";
    /// <summary>
    /// JSON property name for <see cref = "Maximum"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> MaximumUtf8JsonPropertyName = new byte[]{109, 97, 120, 105, 109, 117, 109};
    /// <summary>
    /// JSON property name for <see cref = "Maximum"/>.
    /// </summary>
    public const string MaximumJsonPropertyName = "maximum";
    /// <summary>
    /// JSON property name for <see cref = "ExclusiveMaximum"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> ExclusiveMaximumUtf8JsonPropertyName = new byte[]{101, 120, 99, 108, 117, 115, 105, 118, 101, 77, 97, 120, 105, 109, 117, 109};
    /// <summary>
    /// JSON property name for <see cref = "ExclusiveMaximum"/>.
    /// </summary>
    public const string ExclusiveMaximumJsonPropertyName = "exclusiveMaximum";
    /// <summary>
    /// JSON property name for <see cref = "Minimum"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> MinimumUtf8JsonPropertyName = new byte[]{109, 105, 110, 105, 109, 117, 109};
    /// <summary>
    /// JSON property name for <see cref = "Minimum"/>.
    /// </summary>
    public const string MinimumJsonPropertyName = "minimum";
    /// <summary>
    /// JSON property name for <see cref = "ExclusiveMinimum"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> ExclusiveMinimumUtf8JsonPropertyName = new byte[]{101, 120, 99, 108, 117, 115, 105, 118, 101, 77, 105, 110, 105, 109, 117, 109};
    /// <summary>
    /// JSON property name for <see cref = "ExclusiveMinimum"/>.
    /// </summary>
    public const string ExclusiveMinimumJsonPropertyName = "exclusiveMinimum";
    /// <summary>
    /// JSON property name for <see cref = "MaxLength"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> MaxLengthUtf8JsonPropertyName = new byte[]{109, 97, 120, 76, 101, 110, 103, 116, 104};
    /// <summary>
    /// JSON property name for <see cref = "MaxLength"/>.
    /// </summary>
    public const string MaxLengthJsonPropertyName = "maxLength";
    /// <summary>
    /// JSON property name for <see cref = "MinLength"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> MinLengthUtf8JsonPropertyName = new byte[]{109, 105, 110, 76, 101, 110, 103, 116, 104};
    /// <summary>
    /// JSON property name for <see cref = "MinLength"/>.
    /// </summary>
    public const string MinLengthJsonPropertyName = "minLength";
    /// <summary>
    /// JSON property name for <see cref = "Pattern"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> PatternUtf8JsonPropertyName = new byte[]{112, 97, 116, 116, 101, 114, 110};
    /// <summary>
    /// JSON property name for <see cref = "Pattern"/>.
    /// </summary>
    public const string PatternJsonPropertyName = "pattern";
    /// <summary>
    /// JSON property name for <see cref = "MaxItems"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> MaxItemsUtf8JsonPropertyName = new byte[]{109, 97, 120, 73, 116, 101, 109, 115};
    /// <summary>
    /// JSON property name for <see cref = "MaxItems"/>.
    /// </summary>
    public const string MaxItemsJsonPropertyName = "maxItems";
    /// <summary>
    /// JSON property name for <see cref = "MinItems"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> MinItemsUtf8JsonPropertyName = new byte[]{109, 105, 110, 73, 116, 101, 109, 115};
    /// <summary>
    /// JSON property name for <see cref = "MinItems"/>.
    /// </summary>
    public const string MinItemsJsonPropertyName = "minItems";
    /// <summary>
    /// JSON property name for <see cref = "UniqueItems"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> UniqueItemsUtf8JsonPropertyName = new byte[]{117, 110, 105, 113, 117, 101, 73, 116, 101, 109, 115};
    /// <summary>
    /// JSON property name for <see cref = "UniqueItems"/>.
    /// </summary>
    public const string UniqueItemsJsonPropertyName = "uniqueItems";
    /// <summary>
    /// JSON property name for <see cref = "MaxContains"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> MaxContainsUtf8JsonPropertyName = new byte[]{109, 97, 120, 67, 111, 110, 116, 97, 105, 110, 115};
    /// <summary>
    /// JSON property name for <see cref = "MaxContains"/>.
    /// </summary>
    public const string MaxContainsJsonPropertyName = "maxContains";
    /// <summary>
    /// JSON property name for <see cref = "MinContains"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> MinContainsUtf8JsonPropertyName = new byte[]{109, 105, 110, 67, 111, 110, 116, 97, 105, 110, 115};
    /// <summary>
    /// JSON property name for <see cref = "MinContains"/>.
    /// </summary>
    public const string MinContainsJsonPropertyName = "minContains";
    /// <summary>
    /// JSON property name for <see cref = "MaxProperties"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> MaxPropertiesUtf8JsonPropertyName = new byte[]{109, 97, 120, 80, 114, 111, 112, 101, 114, 116, 105, 101, 115};
    /// <summary>
    /// JSON property name for <see cref = "MaxProperties"/>.
    /// </summary>
    public const string MaxPropertiesJsonPropertyName = "maxProperties";
    /// <summary>
    /// JSON property name for <see cref = "MinProperties"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> MinPropertiesUtf8JsonPropertyName = new byte[]{109, 105, 110, 80, 114, 111, 112, 101, 114, 116, 105, 101, 115};
    /// <summary>
    /// JSON property name for <see cref = "MinProperties"/>.
    /// </summary>
    public const string MinPropertiesJsonPropertyName = "minProperties";
    /// <summary>
    /// JSON property name for <see cref = "Required"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> RequiredUtf8JsonPropertyName = new byte[]{114, 101, 113, 117, 105, 114, 101, 100};
    /// <summary>
    /// JSON property name for <see cref = "Required"/>.
    /// </summary>
    public const string RequiredJsonPropertyName = "required";
    /// <summary>
    /// JSON property name for <see cref = "DependentRequired"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> DependentRequiredUtf8JsonPropertyName = new byte[]{100, 101, 112, 101, 110, 100, 101, 110, 116, 82, 101, 113, 117, 105, 114, 101, 100};
    /// <summary>
    /// JSON property name for <see cref = "DependentRequired"/>.
    /// </summary>
    public const string DependentRequiredJsonPropertyName = "dependentRequired";
    /// <summary>
    /// Gets Type.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity Type
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(TypeUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(TypeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Const.
    /// </summary>
    public Corvus.Json.JsonAny Const
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ConstUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonAny(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ConstJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonAny>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Enum.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray Enum
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(EnumUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(EnumJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets MultipleOf.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity MultipleOf
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(MultipleOfUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(MultipleOfJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Maximum.
    /// </summary>
    public Corvus.Json.JsonNumber Maximum
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(MaximumUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonNumber(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(MaximumJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonNumber>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ExclusiveMaximum.
    /// </summary>
    public Corvus.Json.JsonNumber ExclusiveMaximum
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ExclusiveMaximumUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonNumber(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ExclusiveMaximumJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonNumber>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Minimum.
    /// </summary>
    public Corvus.Json.JsonNumber Minimum
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(MinimumUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonNumber(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(MinimumJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonNumber>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets ExclusiveMinimum.
    /// </summary>
    public Corvus.Json.JsonNumber ExclusiveMinimum
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(ExclusiveMinimumUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonNumber(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(ExclusiveMinimumJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonNumber>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets MaxLength.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger MaxLength
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(MaxLengthUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(MaxLengthJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets MinLength.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0 MinLength
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(MinLengthUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(MinLengthJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Pattern.
    /// </summary>
    public Corvus.Json.JsonRegex Pattern
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(PatternUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonRegex(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(PatternJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonRegex>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets MaxItems.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger MaxItems
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(MaxItemsUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(MaxItemsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets MinItems.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0 MinItems
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(MinItemsUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(MinItemsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets UniqueItems.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity UniqueItems
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(UniqueItemsUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(UniqueItemsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets MaxContains.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger MaxContains
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(MaxContainsUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(MaxContainsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets MinContains.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity MinContains
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(MinContainsUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(MinContainsJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets MaxProperties.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger MaxProperties
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(MaxPropertiesUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(MaxPropertiesJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets MinProperties.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0 MinProperties
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(MinPropertiesUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(MinPropertiesJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Required.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.StringArray Required
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(RequiredUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.StringArray(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(RequiredJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.StringArray>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets DependentRequired.
    /// </summary>
    public Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity DependentRequired
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(DependentRequiredUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(DependentRequiredJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "Validation"/>.
    /// </summary>
    public static Validation Create(Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity? type = null, Corvus.Json.JsonAny? @const = null, Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray? @enum = null, Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity? multipleOf = null, Corvus.Json.JsonNumber? maximum = null, Corvus.Json.JsonNumber? exclusiveMaximum = null, Corvus.Json.JsonNumber? minimum = null, Corvus.Json.JsonNumber? exclusiveMinimum = null, Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger? maxLength = null, Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0? minLength = null, Corvus.Json.JsonRegex? pattern = null, Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger? maxItems = null, Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0? minItems = null, Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity? uniqueItems = null, Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger? maxContains = null, Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity? minContains = null, Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger? maxProperties = null, Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0? minProperties = null, Corvus.Json.JsonSchema.Draft202012.Validation.StringArray? required = null, Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity? dependentRequired = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        if (type is Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity type__)
        {
            builder.Add(TypeJsonPropertyName, type__.AsAny);
        }

        if (@const is Corvus.Json.JsonAny @const__)
        {
            builder.Add(ConstJsonPropertyName, @const__.AsAny);
        }

        if (@enum is Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray @enum__)
        {
            builder.Add(EnumJsonPropertyName, @enum__.AsAny);
        }

        if (multipleOf is Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity multipleOf__)
        {
            builder.Add(MultipleOfJsonPropertyName, multipleOf__.AsAny);
        }

        if (maximum is Corvus.Json.JsonNumber maximum__)
        {
            builder.Add(MaximumJsonPropertyName, maximum__.AsAny);
        }

        if (exclusiveMaximum is Corvus.Json.JsonNumber exclusiveMaximum__)
        {
            builder.Add(ExclusiveMaximumJsonPropertyName, exclusiveMaximum__.AsAny);
        }

        if (minimum is Corvus.Json.JsonNumber minimum__)
        {
            builder.Add(MinimumJsonPropertyName, minimum__.AsAny);
        }

        if (exclusiveMinimum is Corvus.Json.JsonNumber exclusiveMinimum__)
        {
            builder.Add(ExclusiveMinimumJsonPropertyName, exclusiveMinimum__.AsAny);
        }

        if (maxLength is Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger maxLength__)
        {
            builder.Add(MaxLengthJsonPropertyName, maxLength__.AsAny);
        }

        if (minLength is Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0 minLength__)
        {
            builder.Add(MinLengthJsonPropertyName, minLength__.AsAny);
        }

        if (pattern is Corvus.Json.JsonRegex pattern__)
        {
            builder.Add(PatternJsonPropertyName, pattern__.AsAny);
        }

        if (maxItems is Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger maxItems__)
        {
            builder.Add(MaxItemsJsonPropertyName, maxItems__.AsAny);
        }

        if (minItems is Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0 minItems__)
        {
            builder.Add(MinItemsJsonPropertyName, minItems__.AsAny);
        }

        if (uniqueItems is Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity uniqueItems__)
        {
            builder.Add(UniqueItemsJsonPropertyName, uniqueItems__.AsAny);
        }

        if (maxContains is Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger maxContains__)
        {
            builder.Add(MaxContainsJsonPropertyName, maxContains__.AsAny);
        }

        if (minContains is Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity minContains__)
        {
            builder.Add(MinContainsJsonPropertyName, minContains__.AsAny);
        }

        if (maxProperties is Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger maxProperties__)
        {
            builder.Add(MaxPropertiesJsonPropertyName, maxProperties__.AsAny);
        }

        if (minProperties is Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0 minProperties__)
        {
            builder.Add(MinPropertiesJsonPropertyName, minProperties__.AsAny);
        }

        if (required is Corvus.Json.JsonSchema.Draft202012.Validation.StringArray required__)
        {
            builder.Add(RequiredJsonPropertyName, required__.AsAny);
        }

        if (dependentRequired is Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity dependentRequired__)
        {
            builder.Add(DependentRequiredJsonPropertyName, dependentRequired__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets type.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithType(in Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity value)
    {
        return this.SetProperty(TypeJsonPropertyName, value);
    }

    /// <summary>
    /// Sets const.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithConst(in Corvus.Json.JsonAny value)
    {
        return this.SetProperty(ConstJsonPropertyName, value);
    }

    /// <summary>
    /// Sets enum.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithEnum(in Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray value)
    {
        return this.SetProperty(EnumJsonPropertyName, value);
    }

    /// <summary>
    /// Sets multipleOf.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithMultipleOf(in Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity value)
    {
        return this.SetProperty(MultipleOfJsonPropertyName, value);
    }

    /// <summary>
    /// Sets maximum.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithMaximum(in Corvus.Json.JsonNumber value)
    {
        return this.SetProperty(MaximumJsonPropertyName, value);
    }

    /// <summary>
    /// Sets exclusiveMaximum.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithExclusiveMaximum(in Corvus.Json.JsonNumber value)
    {
        return this.SetProperty(ExclusiveMaximumJsonPropertyName, value);
    }

    /// <summary>
    /// Sets minimum.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithMinimum(in Corvus.Json.JsonNumber value)
    {
        return this.SetProperty(MinimumJsonPropertyName, value);
    }

    /// <summary>
    /// Sets exclusiveMinimum.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithExclusiveMinimum(in Corvus.Json.JsonNumber value)
    {
        return this.SetProperty(ExclusiveMinimumJsonPropertyName, value);
    }

    /// <summary>
    /// Sets maxLength.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithMaxLength(in Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger value)
    {
        return this.SetProperty(MaxLengthJsonPropertyName, value);
    }

    /// <summary>
    /// Sets minLength.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithMinLength(in Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0 value)
    {
        return this.SetProperty(MinLengthJsonPropertyName, value);
    }

    /// <summary>
    /// Sets pattern.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithPattern(in Corvus.Json.JsonRegex value)
    {
        return this.SetProperty(PatternJsonPropertyName, value);
    }

    /// <summary>
    /// Sets maxItems.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithMaxItems(in Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger value)
    {
        return this.SetProperty(MaxItemsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets minItems.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithMinItems(in Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0 value)
    {
        return this.SetProperty(MinItemsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets uniqueItems.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithUniqueItems(in Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity value)
    {
        return this.SetProperty(UniqueItemsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets maxContains.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithMaxContains(in Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger value)
    {
        return this.SetProperty(MaxContainsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets minContains.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithMinContains(in Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity value)
    {
        return this.SetProperty(MinContainsJsonPropertyName, value);
    }

    /// <summary>
    /// Sets maxProperties.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithMaxProperties(in Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger value)
    {
        return this.SetProperty(MaxPropertiesJsonPropertyName, value);
    }

    /// <summary>
    /// Sets minProperties.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithMinProperties(in Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0 value)
    {
        return this.SetProperty(MinPropertiesJsonPropertyName, value);
    }

    /// <summary>
    /// Sets required.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithRequired(in Corvus.Json.JsonSchema.Draft202012.Validation.StringArray value)
    {
        return this.SetProperty(RequiredJsonPropertyName, value);
    }

    /// <summary>
    /// Sets dependentRequired.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Validation WithDependentRequired(in Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity value)
    {
        return this.SetProperty(DependentRequiredJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateType(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft202012.Validation.TypeEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateConst(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonAny>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEnum(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft202012.Validation.JsonAnyArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMultipleOf(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft202012.Validation.MultipleOfEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMaximum(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonNumber>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateExclusiveMaximum(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonNumber>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMinimum(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonNumber>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateExclusiveMinimum(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonNumber>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMaxLength(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMinLength(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidatePattern(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonRegex>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMaxItems(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMinItems(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateUniqueItems(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft202012.Validation.UniqueItemsEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMaxContains(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMinContains(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft202012.Validation.MinContainsEntity>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMaxProperties(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeInteger>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateMinProperties(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft202012.Validation.NonNegativeIntegerDefault0>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateRequired(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft202012.Validation.StringArray>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateDependentRequired(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonSchema.Draft202012.Validation.DependentRequiredEntity>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(TypeUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateType;
                return true;
            }
            else if (property.NameEquals(ConstUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateConst;
                return true;
            }
            else if (property.NameEquals(EnumUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateEnum;
                return true;
            }
            else if (property.NameEquals(MultipleOfUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateMultipleOf;
                return true;
            }
            else if (property.NameEquals(MaximumUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateMaximum;
                return true;
            }
            else if (property.NameEquals(ExclusiveMaximumUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateExclusiveMaximum;
                return true;
            }
            else if (property.NameEquals(MinimumUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateMinimum;
                return true;
            }
            else if (property.NameEquals(ExclusiveMinimumUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateExclusiveMinimum;
                return true;
            }
            else if (property.NameEquals(MaxLengthUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateMaxLength;
                return true;
            }
            else if (property.NameEquals(MinLengthUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateMinLength;
                return true;
            }
            else if (property.NameEquals(PatternUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidatePattern;
                return true;
            }
            else if (property.NameEquals(MaxItemsUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateMaxItems;
                return true;
            }
            else if (property.NameEquals(MinItemsUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateMinItems;
                return true;
            }
            else if (property.NameEquals(UniqueItemsUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateUniqueItems;
                return true;
            }
            else if (property.NameEquals(MaxContainsUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateMaxContains;
                return true;
            }
            else if (property.NameEquals(MinContainsUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateMinContains;
                return true;
            }
            else if (property.NameEquals(MaxPropertiesUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateMaxProperties;
                return true;
            }
            else if (property.NameEquals(MinPropertiesUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateMinProperties;
                return true;
            }
            else if (property.NameEquals(RequiredUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateRequired;
                return true;
            }
            else if (property.NameEquals(DependentRequiredUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateDependentRequired;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(TypeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateType;
                return true;
            }
            else if (property.NameEquals(ConstJsonPropertyName))
            {
                propertyValidator = __CorvusValidateConst;
                return true;
            }
            else if (property.NameEquals(EnumJsonPropertyName))
            {
                propertyValidator = __CorvusValidateEnum;
                return true;
            }
            else if (property.NameEquals(MultipleOfJsonPropertyName))
            {
                propertyValidator = __CorvusValidateMultipleOf;
                return true;
            }
            else if (property.NameEquals(MaximumJsonPropertyName))
            {
                propertyValidator = __CorvusValidateMaximum;
                return true;
            }
            else if (property.NameEquals(ExclusiveMaximumJsonPropertyName))
            {
                propertyValidator = __CorvusValidateExclusiveMaximum;
                return true;
            }
            else if (property.NameEquals(MinimumJsonPropertyName))
            {
                propertyValidator = __CorvusValidateMinimum;
                return true;
            }
            else if (property.NameEquals(ExclusiveMinimumJsonPropertyName))
            {
                propertyValidator = __CorvusValidateExclusiveMinimum;
                return true;
            }
            else if (property.NameEquals(MaxLengthJsonPropertyName))
            {
                propertyValidator = __CorvusValidateMaxLength;
                return true;
            }
            else if (property.NameEquals(MinLengthJsonPropertyName))
            {
                propertyValidator = __CorvusValidateMinLength;
                return true;
            }
            else if (property.NameEquals(PatternJsonPropertyName))
            {
                propertyValidator = __CorvusValidatePattern;
                return true;
            }
            else if (property.NameEquals(MaxItemsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateMaxItems;
                return true;
            }
            else if (property.NameEquals(MinItemsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateMinItems;
                return true;
            }
            else if (property.NameEquals(UniqueItemsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateUniqueItems;
                return true;
            }
            else if (property.NameEquals(MaxContainsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateMaxContains;
                return true;
            }
            else if (property.NameEquals(MinContainsJsonPropertyName))
            {
                propertyValidator = __CorvusValidateMinContains;
                return true;
            }
            else if (property.NameEquals(MaxPropertiesJsonPropertyName))
            {
                propertyValidator = __CorvusValidateMaxProperties;
                return true;
            }
            else if (property.NameEquals(MinPropertiesJsonPropertyName))
            {
                propertyValidator = __CorvusValidateMinProperties;
                return true;
            }
            else if (property.NameEquals(RequiredJsonPropertyName))
            {
                propertyValidator = __CorvusValidateRequired;
                return true;
            }
            else if (property.NameEquals(DependentRequiredJsonPropertyName))
            {
                propertyValidator = __CorvusValidateDependentRequired;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}