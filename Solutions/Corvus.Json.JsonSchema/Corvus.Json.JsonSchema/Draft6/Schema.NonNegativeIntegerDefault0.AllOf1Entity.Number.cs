//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.Draft6;
public readonly partial struct Schema
{
    public readonly partial struct NonNegativeIntegerDefault0
    {
        /// <summary>
        /// A type generated from a JsonSchema specification.
        /// </summary>
        public readonly partial struct AllOf1Entity : IJsonNumber<AllOf1Entity>
        {
            /// <summary>
            /// Initializes a new instance of the <see cref = "AllOf1Entity"/> struct.
            /// </summary>
            /// <param name = "value">The value from which to construct the instance.</param>
            public AllOf1Entity(double value)
            {
                this.jsonElementBacking = default;
                this.backing = Backing.Number;
                this.numberBacking = value;
                this.boolBacking = default;
                this.stringBacking = string.Empty;
                this.arrayBacking = ImmutableList<JsonAny>.Empty;
                this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
            }

            /// <summary>
            /// Conversion from JsonNumber.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator JsonNumber(AllOf1Entity value)
            {
                return JsonNumber.FromNumber(value);
            }

            /// <summary>
            /// Conversion to JsonNumber.
            /// </summary>
            /// <param name = "value">The value from which to convert.</param>
            public static implicit operator AllOf1Entity(JsonNumber value)
            {
                if (value.HasJsonElementBacking)
                {
                    return new(value.AsJsonElement);
                }

                return new((double)value);
            }

            /// <summary>
            /// Conversion from double.
            /// </summary>
            /// <param name = "value">The value to convert.</param>
            public static implicit operator AllOf1Entity(double value)
            {
                return new(value);
            }

            /// <summary>
            /// Conversion to double.
            /// </summary>
            /// <param name = "value">The value to convert.</param>
            /// <exception cref = "InvalidOperationException">The value was not a number.</exception>
            /// <exception cref = "FormatException">The value was not formatted as a double.</exception>
            public static explicit operator double (AllOf1Entity value)
            {
                if ((value.backing & Backing.JsonElement) != 0)
                {
                    return value.jsonElementBacking.GetDouble();
                }

                if ((value.backing & Backing.Number) != 0)
                {
                    return value.numberBacking;
                }

                throw new InvalidOperationException();
            }

            /// <summary>
            /// Conversion from long.
            /// </summary>
            /// <param name = "value">The value to convert.</param>
            public static implicit operator AllOf1Entity(long value)
            {
                return new(value);
            }

            /// <summary>
            /// Conversion to double.
            /// </summary>
            /// <param name = "value">The value to convert.</param>
            /// <exception cref = "InvalidOperationException">The value was not a number.</exception>
            /// <exception cref = "FormatException">The value was not formatted as a double.</exception>
            public static explicit operator long (AllOf1Entity value)
            {
                if ((value.backing & Backing.JsonElement) != 0)
                {
                    return value.jsonElementBacking.SafeGetInt64();
                }

                if ((value.backing & Backing.Number) != 0)
                {
                    return (long)value.numberBacking;
                }

                throw new InvalidOperationException();
            }

            /// <summary>
            /// Less than operator.
            /// </summary>
            /// <param name = "left">The LHS of the comparison.</param>
            /// <param name = "right">The RHS of the comparison.</param>
            /// <returns><see langword="true"/> if the left is less than the right, otherwise <see langword="false"/>.</returns>
            public static bool operator <(in AllOf1Entity left, in AllOf1Entity right)
            {
                return left.IsNotNullOrUndefined() && right.IsNotNullOrUndefined() && (double)left < (double)right;
            }

            /// <summary>
            /// Greater than operator.
            /// </summary>
            /// <param name = "left">The LHS of the comparison.</param>
            /// <param name = "right">The RHS of the comparison.</param>
            /// <returns><see langword="true"/> if the left is greater than the right, otherwise <see langword="false"/>.</returns>
            public static bool operator>(in AllOf1Entity left, in AllOf1Entity right)
            {
                return left.IsNotNullOrUndefined() && right.IsNotNullOrUndefined() && (double)left > (double)right;
            }
        }
    }
}