//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.Draft7;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct Schema
{
    private static readonly ImmutableDictionary<JsonPropertyName, JsonAny> __CorvusDefaults = BuildDefaults();
    /// <inheritdoc/>
    public bool TryGetDefault(in JsonPropertyName name, out JsonAny value)
    {
        return __CorvusDefaults.TryGetValue(name, out value);
    }

    /// <inheritdoc/>
    public bool TryGetDefault(string name, out JsonAny value)
    {
        return __CorvusDefaults.TryGetValue(name, out value);
    }

    /// <inheritdoc/>
    public bool TryGetDefault(ReadOnlySpan<char> name, out JsonAny value)
    {
        return __CorvusDefaults.TryGetValue(name, out value);
    }

    /// <inheritdoc/>
    public bool TryGetDefault(ReadOnlySpan<byte> utf8Name, out JsonAny value)
    {
        return __CorvusDefaults.TryGetValue(utf8Name, out value);
    }

    /// <inheritdoc/>
    public bool HasDefault(in JsonPropertyName name)
    {
        return __CorvusDefaults.TryGetValue(name, out _);
    }

    /// <inheritdoc/>
    public bool HasDefault(string name)
    {
        return __CorvusDefaults.TryGetValue(name, out _);
    }

    /// <inheritdoc/>
    public bool HasDefault(ReadOnlySpan<char> name)
    {
        return __CorvusDefaults.TryGetValue(name, out _);
    }

    /// <inheritdoc/>
    public bool HasDefault(ReadOnlySpan<byte> utf8Name)
    {
        return __CorvusDefaults.TryGetValue(utf8Name, out _);
    }

    private static ImmutableDictionary<JsonPropertyName, JsonAny> BuildDefaults()
    {
        ImmutableDictionary<JsonPropertyName, JsonAny>.Builder builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(AdditionalItemsJsonPropertyName, Corvus.Json.JsonSchema.Draft7.Schema.DefaultInstance);
        builder.Add(AdditionalPropertiesJsonPropertyName, Corvus.Json.JsonSchema.Draft7.Schema.DefaultInstance);
        builder.Add(ContainsJsonPropertyName, Corvus.Json.JsonSchema.Draft7.Schema.DefaultInstance);
        builder.Add(DefinitionsJsonPropertyName, Corvus.Json.JsonSchema.Draft7.Schema.DefinitionsEntity.DefaultInstance);
        builder.Add(ElseJsonPropertyName, Corvus.Json.JsonSchema.Draft7.Schema.DefaultInstance);
        builder.Add(IfJsonPropertyName, Corvus.Json.JsonSchema.Draft7.Schema.DefaultInstance);
        builder.Add(ItemsJsonPropertyName, Corvus.Json.JsonSchema.Draft7.Schema.ItemsEntity.DefaultInstance);
        builder.Add(NotJsonPropertyName, Corvus.Json.JsonSchema.Draft7.Schema.DefaultInstance);
        builder.Add(PatternPropertiesJsonPropertyName, Corvus.Json.JsonSchema.Draft7.Schema.PatternPropertiesEntity.DefaultInstance);
        builder.Add(PropertiesJsonPropertyName, Corvus.Json.JsonSchema.Draft7.Schema.PropertiesEntity.DefaultInstance);
        builder.Add(PropertyNamesJsonPropertyName, Corvus.Json.JsonSchema.Draft7.Schema.DefaultInstance);
        builder.Add(ReadOnlyJsonPropertyName, Corvus.Json.JsonSchema.Draft7.Schema.ReadOnlyEntity.DefaultInstance);
        builder.Add(RequiredJsonPropertyName, Corvus.Json.JsonSchema.Draft7.Schema.StringArray.DefaultInstance);
        builder.Add(ThenJsonPropertyName, Corvus.Json.JsonSchema.Draft7.Schema.DefaultInstance);
        builder.Add(UniqueItemsJsonPropertyName, Corvus.Json.JsonSchema.Draft7.Schema.UniqueItemsEntity.DefaultInstance);
        builder.Add(WriteOnlyJsonPropertyName, Corvus.Json.JsonSchema.Draft7.Schema.WriteOnlyEntity.DefaultInstance);
        return builder.ToImmutable();
    }
}