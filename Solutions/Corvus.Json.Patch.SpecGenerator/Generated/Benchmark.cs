//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:6.0.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Corvus.Json;
using Corvus.Json.Patch;
using Corvus.Json.Patch.SpecGenerator;
using System;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;

public partial class Benchmark : BenchmarkBase {
    
    public virtual string TransformText() {
        this.GenerationEnvironment = null;
        
        #line 9 "Benchmark.tt"
        this.Write("// <copyright file=\"GeneratedBenchmark");
        
        #line default
        #line hidden
        
        #line 9 "Benchmark.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Index ));
        
        #line default
        #line hidden
        
        #line 9 "Benchmark.tt"
        this.Write(@".cs"" company=""Endjin Limited"">
// Copyright (c) Endjin Limited. All rights reserved.
// </copyright>
#pragma warning disable
namespace Benchmarks
{
    using System.Threading.Tasks;
    using BenchmarkDotNet.Attributes;
    using BenchmarkDotNet.Diagnosers;

    /// <summary>
    /// ");
        
        #line default
        #line hidden
        
        #line 20 "Benchmark.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( FeatureName ));
        
        #line default
        #line hidden
        
        #line 20 "Benchmark.tt"
        this.Write(" - ");
        
        #line default
        #line hidden
        
        #line 20 "Benchmark.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( ScenarioName ));
        
        #line default
        #line hidden
        
        #line 20 "Benchmark.tt"
        this.Write(".\r\n    /// </summary>\r\n    [MemoryDiagnoser]\r\n    public class GeneratedBenchmark" +
                "");
        
        #line default
        #line hidden
        
        #line 23 "Benchmark.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Index ));
        
        #line default
        #line hidden
        
        #line 23 "Benchmark.tt"
        this.Write(@" : BenchmarkBase
    {
        private Corvus.Json.Patch.Model.JsonPatchDocument corvusPatch;
        private Json.Patch.JsonPatch? jePatch;

        /// <summary>
        /// Global setup.
        /// </summary>
        /// <returns>A <see cref=""Task""/> which completes once setup is complete.</returns>
        [GlobalSetup]
        public async Task GlobalSetup()
        {
            this.jePatch = BuildJEPatch(""");
        
        #line default
        #line hidden
        
        #line 35 "Benchmark.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Escape(Scenario.Patch.ToString()) ));
        
        #line default
        #line hidden
        
        #line 35 "Benchmark.tt"
        this.Write("\");\r\n                \r\n            this.corvusPatch = Corvus.Json.JsonAny.Parse(\"" +
                "");
        
        #line default
        #line hidden
        
        #line 37 "Benchmark.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Escape(Scenario.Patch.ToString()) ));
        
        #line default
        #line hidden
        
        #line 37 "Benchmark.tt"
        this.Write("\");\r\n\r\n            await this.GlobalSetupJson(\"");
        
        #line default
        #line hidden
        
        #line 39 "Benchmark.tt"
        this.Write(this.ToStringHelper.ToStringWithCulture( Escape(Scenario.Doc.ToString()) ));
        
        #line default
        #line hidden
        
        #line 39 "Benchmark.tt"
        this.Write(@""").ConfigureAwait(false);
        }

        /// <summary>
        /// Validates using the Corvus types.
        /// </summary>
        [Benchmark]
        public void PatchCorvus()
        {
            bool result = Corvus.Json.Patch.JsonPatchExtensions.TryApplyPatch(this.Any, this.corvusPatch, out Corvus.Json.JsonAny output);
        }

        /// <summary>
        /// Validates using the Newtonsoft types.
        /// </summary>
        [Benchmark(Baseline = true)]
        public void PatchJsonEverything()
        {
            Json.Patch.PatchResult? patchResult = this.jePatch?.Apply(ElementAsNode());
        }
    }
}
");
        
        #line default
        #line hidden
        return this.GenerationEnvironment.ToString();
    }
    
    public virtual void Initialize() {
    }
}

public class BenchmarkBase {
    
    private global::System.Text.StringBuilder builder;
    
    private global::System.Collections.Generic.IDictionary<string, object> session;
    
    private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
    
    private string currentIndent = string.Empty;
    
    private global::System.Collections.Generic.Stack<int> indents;
    
    private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
    
    public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
        get {
            return this.session;
        }
        set {
            this.session = value;
        }
    }
    
    public global::System.Text.StringBuilder GenerationEnvironment {
        get {
            if ((this.builder == null)) {
                this.builder = new global::System.Text.StringBuilder();
            }
            return this.builder;
        }
        set {
            this.builder = value;
        }
    }
    
    protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
        get {
            if ((this.errors == null)) {
                this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
            }
            return this.errors;
        }
    }
    
    public string CurrentIndent {
        get {
            return this.currentIndent;
        }
    }
    
    private global::System.Collections.Generic.Stack<int> Indents {
        get {
            if ((this.indents == null)) {
                this.indents = new global::System.Collections.Generic.Stack<int>();
            }
            return this.indents;
        }
    }
    
    public ToStringInstanceHelper ToStringHelper {
        get {
            return this._toStringHelper;
        }
    }
    
    public void Error(string message) {
        this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
    }
    
    public void Warning(string message) {
        global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
        val.IsWarning = true;
        this.Errors.Add(val);
    }
    
    public string PopIndent() {
        if ((this.Indents.Count == 0)) {
            return string.Empty;
        }
        int lastPos = (this.currentIndent.Length - this.Indents.Pop());
        string last = this.currentIndent.Substring(lastPos);
        this.currentIndent = this.currentIndent.Substring(0, lastPos);
        return last;
    }
    
    public void PushIndent(string indent) {
        this.Indents.Push(indent.Length);
        this.currentIndent = (this.currentIndent + indent);
    }
    
    public void ClearIndent() {
        this.currentIndent = string.Empty;
        this.Indents.Clear();
    }
    
    public void Write(string textToAppend) {
        this.GenerationEnvironment.Append(textToAppend);
    }
    
    public void Write(string format, params object[] args) {
        this.GenerationEnvironment.AppendFormat(format, args);
    }
    
    public void WriteLine(string textToAppend) {
        this.GenerationEnvironment.Append(this.currentIndent);
        this.GenerationEnvironment.AppendLine(textToAppend);
    }
    
    public void WriteLine(string format, params object[] args) {
        this.GenerationEnvironment.Append(this.currentIndent);
        this.GenerationEnvironment.AppendFormat(format, args);
        this.GenerationEnvironment.AppendLine();
    }
    
    public class ToStringInstanceHelper {
        
        private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
        
        public global::System.IFormatProvider FormatProvider {
            get {
                return this.formatProvider;
            }
            set {
                if ((value != null)) {
                    this.formatProvider = value;
                }
            }
        }
        
        public string ToStringWithCulture(object objectToConvert) {
            if ((objectToConvert == null)) {
                throw new global::System.ArgumentNullException("objectToConvert");
            }
            global::System.Type type = objectToConvert.GetType();
            global::System.Type iConvertibleType = typeof(global::System.IConvertible);
            if (iConvertibleType.IsAssignableFrom(type)) {
                return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
            }
            global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                        iConvertibleType});
            if ((methInfo != null)) {
                return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                            this.formatProvider})));
            }
            return objectToConvert.ToString();
        }
    }
}
