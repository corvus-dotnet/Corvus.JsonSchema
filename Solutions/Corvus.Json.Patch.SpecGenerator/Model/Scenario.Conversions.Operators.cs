//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.Patch.SpecGenerator;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
public readonly partial struct Scenario
{
    /// <summary>
    /// Conversion to <see cref = "Corvus.Json.Patch.SpecGenerator.ScenarioCommon"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Corvus.Json.Patch.SpecGenerator.ScenarioCommon(Scenario value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Object) != 0)
        {
            return new(value.objectBacking);
        }

        return Corvus.Json.Patch.SpecGenerator.ScenarioCommon.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Corvus.Json.Patch.SpecGenerator.ScenarioCommon"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Scenario(Corvus.Json.Patch.SpecGenerator.ScenarioCommon value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Object => new(value.AsPropertyBacking()),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Corvus.Json.Patch.SpecGenerator.ScenarioWithResult"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Corvus.Json.Patch.SpecGenerator.ScenarioWithResult(Scenario value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Object) != 0)
        {
            return new(value.objectBacking);
        }

        return Corvus.Json.Patch.SpecGenerator.ScenarioWithResult.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Corvus.Json.Patch.SpecGenerator.ScenarioWithResult"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Scenario(Corvus.Json.Patch.SpecGenerator.ScenarioWithResult value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Object => new(value.AsPropertyBacking()),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Corvus.Json.Patch.SpecGenerator.NotDisabled"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Corvus.Json.Patch.SpecGenerator.NotDisabled(Scenario value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Object) != 0)
        {
            return new(value.objectBacking);
        }

        return Corvus.Json.Patch.SpecGenerator.NotDisabled.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Corvus.Json.Patch.SpecGenerator.NotDisabled"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Scenario(Corvus.Json.Patch.SpecGenerator.NotDisabled value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Object => new(value.AsPropertyBacking()),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Corvus.Json.Patch.SpecGenerator.ScenarioWithError"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Corvus.Json.Patch.SpecGenerator.ScenarioWithError(Scenario value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Object) != 0)
        {
            return new(value.objectBacking);
        }

        return Corvus.Json.Patch.SpecGenerator.ScenarioWithError.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Corvus.Json.Patch.SpecGenerator.ScenarioWithError"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Scenario(Corvus.Json.Patch.SpecGenerator.ScenarioWithError value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Object => new(value.AsPropertyBacking()),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Corvus.Json.Patch.SpecGenerator.DisabledScenario"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Corvus.Json.Patch.SpecGenerator.DisabledScenario(Scenario value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Object) != 0)
        {
            return new(value.objectBacking);
        }

        return Corvus.Json.Patch.SpecGenerator.DisabledScenario.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Corvus.Json.Patch.SpecGenerator.DisabledScenario"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Scenario(Corvus.Json.Patch.SpecGenerator.DisabledScenario value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Object => new(value.AsPropertyBacking()),
            _ => Undefined
        };
    }
}