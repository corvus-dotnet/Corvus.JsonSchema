//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.Patch.SpecGenerator;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
public readonly partial struct Scenario
{
    /// <summary>
    /// The well-known property names in the JSON object.
    /// </summary>
    public static class JsonPropertyNames
    {
        /// <summary>
        /// JSON property name for <see cref = "Comment"/>.
        /// </summary>
        public static ReadOnlySpan<byte> CommentUtf8 => "comment"u8;

        /// <summary>
        /// JSON property name for <see cref = "Comment"/>.
        /// </summary>
        public const string Comment = "comment";
        /// <summary>
        /// JSON property name for <see cref = "Doc"/>.
        /// </summary>
        public static ReadOnlySpan<byte> DocUtf8 => "doc"u8;

        /// <summary>
        /// JSON property name for <see cref = "Doc"/>.
        /// </summary>
        public const string Doc = "doc";
        /// <summary>
        /// JSON property name for <see cref = "Patch"/>.
        /// </summary>
        public static ReadOnlySpan<byte> PatchUtf8 => "patch"u8;

        /// <summary>
        /// JSON property name for <see cref = "Patch"/>.
        /// </summary>
        public const string Patch = "patch";
    }

    /// <summary>
    /// Gets the (optional) <c>comment</c> property.
    /// </summary>
    public Corvus.Json.JsonString Comment
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.CommentUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Comment, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>doc</c> property. If the instance is valid, this property will be not be <c>undefined</c>.
    /// </summary>
    public Corvus.Json.JsonAny Doc
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DocUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonAny(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Doc, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonAny>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>patch</c> property. If the instance is valid, this property will be not be <c>undefined</c>.
    /// </summary>
    public Corvus.Json.JsonAny Patch
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.PatchUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonAny(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Patch, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonAny>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "Scenario"/>.
    /// </summary>
    public static Scenario Create(Corvus.Json.JsonAny doc, Corvus.Json.JsonAny patch, Corvus.Json.JsonString? comment = null)
    {
        var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
        builder.Add(JsonPropertyNames.Doc, doc.AsAny);
        builder.Add(JsonPropertyNames.Patch, patch.AsAny);
        if (comment is Corvus.Json.JsonString comment__)
        {
            builder.Add(JsonPropertyNames.Comment, comment__.AsAny);
        }

        return new(builder.ToImmutable());
    }

    /// <summary>
    /// Sets comment.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Scenario WithComment(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(JsonPropertyNames.Comment, value);
    }

    /// <summary>
    /// Sets doc.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Scenario WithDoc(in Corvus.Json.JsonAny value)
    {
        return this.SetProperty(JsonPropertyNames.Doc, value);
    }

    /// <summary>
    /// Sets patch.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Scenario WithPatch(in Corvus.Json.JsonAny value)
    {
        return this.SetProperty(JsonPropertyNames.Patch, value);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
        }
        else
        {
        }

        propertyValidator = null;
        return false;
    }
}