//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace Corvus.Json.Patch.SpecGenerator;

/// <summary>
/// Generated from JSON Schema.
/// </summary>
public readonly partial struct Scenario
{
    /// <inheritdoc/>
    public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
    {
        ValidationContext result = validationContext;
        if (level > ValidationLevel.Flag)
        {
            result = result.UsingResults();
        }

        if (level > ValidationLevel.Basic)
        {
            result = result.UsingStack();
            result = result.PushSchemaLocation("#/$defs/Scenario");
        }

        result = CorvusValidation.CompositionAllOfValidationHandler(this, result, level);
        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }

        result = CorvusValidation.CompositionOneOfValidationHandler(this, result, level);
        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }

        if (level > ValidationLevel.Basic)
        {
            result = result.PopLocation();
        }

        return result;
    }

    private static partial class CorvusValidation
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ValidationContext CompositionAllOfValidationHandler(
            in Scenario value,
            in ValidationContext validationContext,
            ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext;
            ValidationContext childContextBase = result;
            ValidationContext allOfResult0 = childContextBase.CreateChildContext();
            if (level > ValidationLevel.Basic)
            {
                allOfResult0 = allOfResult0.PushValidationLocationReducedPathModifier(new("#/allOf/0/$ref"));
            }

            allOfResult0 = value.As<Corvus.Json.Patch.SpecGenerator.ScenarioCommon>().Validate(allOfResult0, level);
            if (!allOfResult0.IsValid)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.MergeChildContext(allOfResult0, true).WithResult(isValid: false, "Validation - allOf failed to validate against the schema.");
                }
                else
                {
                    result = result.MergeChildContext(allOfResult0, false).WithResult(isValid: false);
                    return result;
                }
            }
            else
            {
                result = result.MergeChildContext(allOfResult0, level >= ValidationLevel.Detailed);
            }

            return result;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ValidationContext CompositionOneOfValidationHandler(
            in Scenario value,
            in ValidationContext validationContext,
            ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext;
            int oneOfFoundValid = 0;
            ValidationContext oneOfChildContext0 = validationContext.CreateChildContext();
            if (level > ValidationLevel.Basic)
            {
                oneOfChildContext0 = oneOfChildContext0.PushValidationLocationReducedPathModifier(new("#/oneOf/0/$ref"));
            }

            ValidationContext oneOfResult0 = value.As<Corvus.Json.Patch.SpecGenerator.ScenarioWithResult>().Validate(oneOfChildContext0, level);
            if (oneOfResult0.IsValid)
            {
                result = result.MergeChildContext(oneOfResult0, level >= ValidationLevel.Verbose);
                oneOfFoundValid++;
            }
            else
            {
                if (level >= ValidationLevel.Verbose)
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult0);
                }
            }

            ValidationContext oneOfChildContext1 = validationContext.CreateChildContext();
            if (level > ValidationLevel.Basic)
            {
                oneOfChildContext1 = oneOfChildContext1.PushValidationLocationReducedPathModifier(new("#/oneOf/1/$ref"));
            }

            ValidationContext oneOfResult1 = value.As<Corvus.Json.Patch.SpecGenerator.ScenarioWithError>().Validate(oneOfChildContext1, level);
            if (oneOfResult1.IsValid)
            {
                result = result.MergeChildContext(oneOfResult1, level >= ValidationLevel.Verbose);
                oneOfFoundValid++;
            }
            else
            {
                if (level >= ValidationLevel.Verbose)
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult1);
                }
            }

            ValidationContext oneOfChildContext2 = validationContext.CreateChildContext();
            if (level > ValidationLevel.Basic)
            {
                oneOfChildContext2 = oneOfChildContext2.PushValidationLocationReducedPathModifier(new("#/oneOf/2/$ref"));
            }

            ValidationContext oneOfResult2 = value.As<Corvus.Json.Patch.SpecGenerator.DisabledScenario>().Validate(oneOfChildContext2, level);
            if (oneOfResult2.IsValid)
            {
                result = result.MergeChildContext(oneOfResult2, level >= ValidationLevel.Verbose);
                oneOfFoundValid++;
            }
            else
            {
                if (level >= ValidationLevel.Verbose)
                {
                    result = result.MergeResults(result.IsValid, level, oneOfResult2);
                }
            }

            if (level >= ValidationLevel.Basic)
            {
                result.PushValidationLocationProperty("oneOf");
            }

            if (oneOfFoundValid == 1)
            {
                if (level >= ValidationLevel.Verbose)
                {
                    result = result.WithResult(isValid: true, "Validation oneOf - validated against the schema.");
                }
            }
            else if (oneOfFoundValid > 1)
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation oneOf - validated against more than 1 of the schema.");
                }
                else
                {
                    result = result.WithResult(isValid: false);
                }
            }
            else
            {
                if (level >= ValidationLevel.Basic)
                {
                    result = result.WithResult(isValid: false, "Validation oneOf - did not validate against any of the schema.");
                }
                else
                {
                    result = result.WithResult(isValid: false);
                }
            }

            if (level >= ValidationLevel.Basic)
            {
                result.PopLocation();
            }

            return result;
        }
    }
}
