//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.Patch.Model;
public readonly partial struct JsonPatchDocument
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    /// <remarks>
    /// <para>
    /// A single JSON Patch operation
    /// </para>
    /// </remarks>
    public readonly partial struct PatchOperation
    {
        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.AddEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static explicit operator Corvus.Json.Patch.Model.JsonPatchDocument.AddEntity(PatchOperation value)
        {
            if ((value.backing & Backing.JsonElement) != 0)
            {
                return new(value.AsJsonElement);
            }

            if ((value.backing & Backing.Object) != 0)
            {
                return new(value.objectBacking);
            }

            return Corvus.Json.Patch.Model.JsonPatchDocument.AddEntity.Undefined;
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.AddEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PatchOperation(Corvus.Json.Patch.Model.JsonPatchDocument.AddEntity value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.Object => new(value.AsPropertyBacking()),
                _ => Undefined
            };
        }

        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.PatchOperationCommon"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator Corvus.Json.Patch.Model.JsonPatchDocument.PatchOperationCommon(PatchOperation value)
        {
            if ((value.backing & Backing.JsonElement) != 0)
            {
                return new(value.AsJsonElement);
            }

            if ((value.backing & Backing.Object) != 0)
            {
                return new(value.objectBacking);
            }

            return Corvus.Json.Patch.Model.JsonPatchDocument.PatchOperationCommon.Undefined;
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.PatchOperationCommon"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static explicit operator PatchOperation(Corvus.Json.Patch.Model.JsonPatchDocument.PatchOperationCommon value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.Object => new(value.AsPropertyBacking()),
                _ => Undefined
            };
        }

        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.RemoveEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static explicit operator Corvus.Json.Patch.Model.JsonPatchDocument.RemoveEntity(PatchOperation value)
        {
            if ((value.backing & Backing.JsonElement) != 0)
            {
                return new(value.AsJsonElement);
            }

            if ((value.backing & Backing.Object) != 0)
            {
                return new(value.objectBacking);
            }

            return Corvus.Json.Patch.Model.JsonPatchDocument.RemoveEntity.Undefined;
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.RemoveEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PatchOperation(Corvus.Json.Patch.Model.JsonPatchDocument.RemoveEntity value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.Object => new(value.AsPropertyBacking()),
                _ => Undefined
            };
        }

        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static explicit operator Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceEntity(PatchOperation value)
        {
            if ((value.backing & Backing.JsonElement) != 0)
            {
                return new(value.AsJsonElement);
            }

            if ((value.backing & Backing.Object) != 0)
            {
                return new(value.objectBacking);
            }

            return Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceEntity.Undefined;
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceEntity"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PatchOperation(Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceEntity value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.Object => new(value.AsPropertyBacking()),
                _ => Undefined
            };
        }

        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.Move"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static explicit operator Corvus.Json.Patch.Model.JsonPatchDocument.Move(PatchOperation value)
        {
            if ((value.backing & Backing.JsonElement) != 0)
            {
                return new(value.AsJsonElement);
            }

            if ((value.backing & Backing.Object) != 0)
            {
                return new(value.objectBacking);
            }

            return Corvus.Json.Patch.Model.JsonPatchDocument.Move.Undefined;
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.Move"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PatchOperation(Corvus.Json.Patch.Model.JsonPatchDocument.Move value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.Object => new(value.AsPropertyBacking()),
                _ => Undefined
            };
        }

        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.Copy"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static explicit operator Corvus.Json.Patch.Model.JsonPatchDocument.Copy(PatchOperation value)
        {
            if ((value.backing & Backing.JsonElement) != 0)
            {
                return new(value.AsJsonElement);
            }

            if ((value.backing & Backing.Object) != 0)
            {
                return new(value.objectBacking);
            }

            return Corvus.Json.Patch.Model.JsonPatchDocument.Copy.Undefined;
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.Copy"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PatchOperation(Corvus.Json.Patch.Model.JsonPatchDocument.Copy value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.Object => new(value.AsPropertyBacking()),
                _ => Undefined
            };
        }

        /// <summary>
        /// Conversion to <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.Test"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static explicit operator Corvus.Json.Patch.Model.JsonPatchDocument.Test(PatchOperation value)
        {
            if ((value.backing & Backing.JsonElement) != 0)
            {
                return new(value.AsJsonElement);
            }

            if ((value.backing & Backing.Object) != 0)
            {
                return new(value.objectBacking);
            }

            return Corvus.Json.Patch.Model.JsonPatchDocument.Test.Undefined;
        }

        /// <summary>
        /// Conversion from <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.Test"/>.
        /// </summary>
        /// <param name = "value">The value from which to convert.</param>
        public static implicit operator PatchOperation(Corvus.Json.Patch.Model.JsonPatchDocument.Test value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.Object => new(value.AsPropertyBacking()),
                _ => Undefined
            };
        }
    }
}