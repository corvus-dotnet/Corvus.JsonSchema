//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.Patch.Model;
public readonly partial struct JsonPatchDocument
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    /// <remarks>
    /// <para>
    /// A single JSON Patch operation
    /// </para>
    /// </remarks>
    public readonly partial struct PatchOperation
    {
        /// <summary>
        /// Matches the value against each of the any of values, and returns the result of calling the provided match function for the first match found.
        /// </summary>
        /// <param name = "context">The context to pass to the match function.</param>
        /// <param name = "match0">The function to call if the value matches the <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.AddEntity"/> type.</param>
        /// <param name = "match1">The function to call if the value matches the <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.RemoveEntity"/> type.</param>
        /// <param name = "match2">The function to call if the value matches the <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceEntity"/> type.</param>
        /// <param name = "match3">The function to call if the value matches the <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.Move"/> type.</param>
        /// <param name = "match4">The function to call if the value matches the <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.Copy"/> type.</param>
        /// <param name = "match5">The function to call if the value matches the <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.Test"/> type.</param>
        /// <param name = "defaultMatch">The fallback match.</param>
        public TOut Match<TIn, TOut>(in TIn context, Matcher<Corvus.Json.Patch.Model.JsonPatchDocument.AddEntity, TIn, TOut> match0, Matcher<Corvus.Json.Patch.Model.JsonPatchDocument.RemoveEntity, TIn, TOut> match1, Matcher<Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceEntity, TIn, TOut> match2, Matcher<Corvus.Json.Patch.Model.JsonPatchDocument.Move, TIn, TOut> match3, Matcher<Corvus.Json.Patch.Model.JsonPatchDocument.Copy, TIn, TOut> match4, Matcher<Corvus.Json.Patch.Model.JsonPatchDocument.Test, TIn, TOut> match5, Matcher<PatchOperation, TIn, TOut> defaultMatch)
        {
            var oneOf0 = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.AddEntity>();
            if (oneOf0.IsValid())
            {
                return match0(oneOf0, context);
            }

            var oneOf1 = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.RemoveEntity>();
            if (oneOf1.IsValid())
            {
                return match1(oneOf1, context);
            }

            var oneOf2 = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceEntity>();
            if (oneOf2.IsValid())
            {
                return match2(oneOf2, context);
            }

            var oneOf3 = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.Move>();
            if (oneOf3.IsValid())
            {
                return match3(oneOf3, context);
            }

            var oneOf4 = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.Copy>();
            if (oneOf4.IsValid())
            {
                return match4(oneOf4, context);
            }

            var oneOf5 = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.Test>();
            if (oneOf5.IsValid())
            {
                return match5(oneOf5, context);
            }

            return defaultMatch(this, context);
        }

        /// <summary>
        /// Matches the value against each of the any of values, and returns the result of calling the provided match function for the first match found.
        /// </summary>
        /// <param name = "match0">The function to call if the value matches the <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.AddEntity"/> type.</param>
        /// <param name = "match1">The function to call if the value matches the <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.RemoveEntity"/> type.</param>
        /// <param name = "match2">The function to call if the value matches the <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceEntity"/> type.</param>
        /// <param name = "match3">The function to call if the value matches the <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.Move"/> type.</param>
        /// <param name = "match4">The function to call if the value matches the <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.Copy"/> type.</param>
        /// <param name = "match5">The function to call if the value matches the <see cref = "Corvus.Json.Patch.Model.JsonPatchDocument.Test"/> type.</param>
        /// <param name = "defaultMatch">The fallback match.</param>
        public TOut Match<TOut>(Matcher<Corvus.Json.Patch.Model.JsonPatchDocument.AddEntity, TOut> match0, Matcher<Corvus.Json.Patch.Model.JsonPatchDocument.RemoveEntity, TOut> match1, Matcher<Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceEntity, TOut> match2, Matcher<Corvus.Json.Patch.Model.JsonPatchDocument.Move, TOut> match3, Matcher<Corvus.Json.Patch.Model.JsonPatchDocument.Copy, TOut> match4, Matcher<Corvus.Json.Patch.Model.JsonPatchDocument.Test, TOut> match5, Matcher<PatchOperation, TOut> defaultMatch)
        {
            var oneOf0 = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.AddEntity>();
            if (oneOf0.IsValid())
            {
                return match0(oneOf0);
            }

            var oneOf1 = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.RemoveEntity>();
            if (oneOf1.IsValid())
            {
                return match1(oneOf1);
            }

            var oneOf2 = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceEntity>();
            if (oneOf2.IsValid())
            {
                return match2(oneOf2);
            }

            var oneOf3 = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.Move>();
            if (oneOf3.IsValid())
            {
                return match3(oneOf3);
            }

            var oneOf4 = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.Copy>();
            if (oneOf4.IsValid())
            {
                return match4(oneOf4);
            }

            var oneOf5 = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.Test>();
            if (oneOf5.IsValid())
            {
                return match5(oneOf5);
            }

            return defaultMatch(this);
        }
    }
}