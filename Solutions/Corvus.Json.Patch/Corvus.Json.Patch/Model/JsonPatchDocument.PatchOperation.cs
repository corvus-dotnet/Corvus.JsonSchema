//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Buffers;
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.Patch.Model;

/// <summary>
/// Generated from JSON Schema.
/// </summary>
public readonly partial struct JsonPatchDocument
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    /// <remarks>
    /// <para>
    /// A single JSON Patch operation
    /// </para>
    /// </remarks>
    [System.Text.Json.Serialization.JsonConverter(typeof(Corvus.Json.Internal.JsonValueConverter<PatchOperation>))]
    public readonly partial struct PatchOperation
        : IJsonValue<Corvus.Json.Patch.Model.JsonPatchDocument.PatchOperation>
    {
        private readonly Backing backing;
        private readonly JsonElement jsonElementBacking;
        private readonly ImmutableList<JsonObjectProperty> objectBacking;

        /// <summary>
        /// Initializes a new instance of the <see cref="PatchOperation"/> struct.
        /// </summary>
        public PatchOperation()
        {
            this.jsonElementBacking = default;
            this.backing = Backing.JsonElement;
            this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PatchOperation"/> struct.
        /// </summary>
        /// <param name="value">The value from which to construct the instance.</param>
        public PatchOperation(in JsonElement value)
        {
            this.jsonElementBacking = value;
            this.backing = Backing.JsonElement;
            this.objectBacking = ImmutableList<JsonObjectProperty>.Empty;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PatchOperation"/> struct.
        /// </summary>
        /// <param name="value">The value from which to construct the instance.</param>
        public PatchOperation(ImmutableList<JsonObjectProperty> value)
        {
            this.backing = Backing.Object;
            this.jsonElementBacking = default;
            this.objectBacking = value;
        }

        /// <summary>
        /// Gets the schema location from which this type was generated.
        /// </summary>
        public static string SchemaLocation { get; } = "#/$defs/PatchOperation";

        /// <summary>
        /// Gets a Null instance.
        /// </summary>
        public static PatchOperation Null { get; } = new(JsonValueHelpers.NullElement);

        /// <summary>
        /// Gets an Undefined instance.
        /// </summary>
        public static PatchOperation Undefined { get; }

        /// <summary>
        /// Gets the default instance.
        /// </summary>
        public static PatchOperation DefaultInstance { get; }

        /// <inheritdoc/>
        public JsonAny AsAny
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    return new(this.objectBacking);
                }

                if ((this.backing & Backing.Null) != 0)
                {
                    return JsonAny.Null;
                }

                return JsonAny.Undefined;
            }
        }

        /// <inheritdoc/>
        public JsonElement AsJsonElement
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return this.jsonElementBacking;
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    return JsonValueHelpers.ObjectToJsonElement(this.objectBacking);
                }

                if ((this.backing & Backing.Null) != 0)
                {
                    return JsonValueHelpers.NullElement;
                }

                return default;
            }
        }

        /// <inheritdoc/>
        JsonString IJsonValue.AsString
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                throw new InvalidOperationException();
            }
        }

        /// <inheritdoc/>
        JsonBoolean IJsonValue.AsBoolean
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                throw new InvalidOperationException();
            }
        }

        /// <inheritdoc/>
        JsonNumber IJsonValue.AsNumber
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                throw new InvalidOperationException();
            }
        }

        /// <inheritdoc/>
        public JsonObject AsObject
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    return new(this.objectBacking);
                }

                throw new InvalidOperationException();
            }
        }

        /// <inheritdoc/>
        JsonArray IJsonValue.AsArray
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                throw new InvalidOperationException();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.AddOperation" />.
        /// </summary>
        public Corvus.Json.Patch.Model.JsonPatchDocument.AddOperation AsAddOperation
        {
            get
            {
                return this.As<Corvus.Json.Patch.Model.JsonPatchDocument.AddOperation>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.AddOperation" />.
        /// </summary>
        public bool IsAddOperation
        {
            get
            {
                return this.As<Corvus.Json.Patch.Model.JsonPatchDocument.AddOperation>().IsValid();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.CopyOperation" />.
        /// </summary>
        public Corvus.Json.Patch.Model.JsonPatchDocument.CopyOperation AsCopyOperation
        {
            get
            {
                return this.As<Corvus.Json.Patch.Model.JsonPatchDocument.CopyOperation>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.CopyOperation" />.
        /// </summary>
        public bool IsCopyOperation
        {
            get
            {
                return this.As<Corvus.Json.Patch.Model.JsonPatchDocument.CopyOperation>().IsValid();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.MoveOperation" />.
        /// </summary>
        public Corvus.Json.Patch.Model.JsonPatchDocument.MoveOperation AsMoveOperation
        {
            get
            {
                return this.As<Corvus.Json.Patch.Model.JsonPatchDocument.MoveOperation>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.MoveOperation" />.
        /// </summary>
        public bool IsMoveOperation
        {
            get
            {
                return this.As<Corvus.Json.Patch.Model.JsonPatchDocument.MoveOperation>().IsValid();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.PatchOperationCommon" />.
        /// </summary>
        public Corvus.Json.Patch.Model.JsonPatchDocument.PatchOperationCommon AsPatchOperationCommon
        {
            get
            {
                return this.As<Corvus.Json.Patch.Model.JsonPatchDocument.PatchOperationCommon>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.PatchOperationCommon" />.
        /// </summary>
        public bool IsPatchOperationCommon
        {
            get
            {
                return this.As<Corvus.Json.Patch.Model.JsonPatchDocument.PatchOperationCommon>().IsValid();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.RemoveOperation" />.
        /// </summary>
        public Corvus.Json.Patch.Model.JsonPatchDocument.RemoveOperation AsRemoveOperation
        {
            get
            {
                return this.As<Corvus.Json.Patch.Model.JsonPatchDocument.RemoveOperation>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.RemoveOperation" />.
        /// </summary>
        public bool IsRemoveOperation
        {
            get
            {
                return this.As<Corvus.Json.Patch.Model.JsonPatchDocument.RemoveOperation>().IsValid();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceOperation" />.
        /// </summary>
        public Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceOperation AsReplaceOperation
        {
            get
            {
                return this.As<Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceOperation>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceOperation" />.
        /// </summary>
        public bool IsReplaceOperation
        {
            get
            {
                return this.As<Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceOperation>().IsValid();
            }
        }

        /// <summary>
        /// Gets the instance as a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.TestOperation" />.
        /// </summary>
        public Corvus.Json.Patch.Model.JsonPatchDocument.TestOperation AsTestOperation
        {
            get
            {
                return this.As<Corvus.Json.Patch.Model.JsonPatchDocument.TestOperation>();
            }
        }

        /// <summary>
        /// Gets a value indicating whether the instance is a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.TestOperation" />.
        /// </summary>
        public bool IsTestOperation
        {
            get
            {
                return this.As<Corvus.Json.Patch.Model.JsonPatchDocument.TestOperation>().IsValid();
            }
        }

        /// <inheritdoc/>
        public bool HasJsonElementBacking
        {
            get
            {
                return (this.backing & Backing.JsonElement) != 0;
            }
        }

        /// <inheritdoc/>
        public bool HasDotnetBacking
        {
            get
            {
                return (this.backing & Backing.Dotnet) != 0;
            }
        }

        /// <inheritdoc/>
        public JsonValueKind ValueKind
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return this.jsonElementBacking.ValueKind;
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    return JsonValueKind.Object;
                }

                return JsonValueKind.Undefined;
            }
        }

        /// <summary>
        /// Conversion from JsonAny.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator PatchOperation(JsonAny value)
        {
            return value.As<PatchOperation>();
        }

        /// <summary>
        /// Conversion to JsonAny.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator JsonAny(PatchOperation value)
        {
            return value.AsAny;
        }

        /// <summary>
        /// Conversion to <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.PatchOperationCommon"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator Corvus.Json.Patch.Model.JsonPatchDocument.PatchOperationCommon(PatchOperation value)
        {
            return value.As<Corvus.Json.Patch.Model.JsonPatchDocument.PatchOperationCommon>();
        }

        /// <summary>
        /// Conversion from <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.PatchOperationCommon"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static explicit operator PatchOperation(Corvus.Json.Patch.Model.JsonPatchDocument.PatchOperationCommon value)
        {
            return value.As<PatchOperation>();
        }

        /// <summary>
        /// Conversion to <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.AddOperation"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static explicit operator Corvus.Json.Patch.Model.JsonPatchDocument.AddOperation(PatchOperation value)
        {
            return value.As<Corvus.Json.Patch.Model.JsonPatchDocument.AddOperation>();
        }

        /// <summary>
        /// Conversion from <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.AddOperation"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator PatchOperation(Corvus.Json.Patch.Model.JsonPatchDocument.AddOperation value)
        {
            return value.As<PatchOperation>();
        }

        /// <summary>
        /// Conversion to <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.RemoveOperation"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static explicit operator Corvus.Json.Patch.Model.JsonPatchDocument.RemoveOperation(PatchOperation value)
        {
            return value.As<Corvus.Json.Patch.Model.JsonPatchDocument.RemoveOperation>();
        }

        /// <summary>
        /// Conversion from <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.RemoveOperation"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator PatchOperation(Corvus.Json.Patch.Model.JsonPatchDocument.RemoveOperation value)
        {
            return value.As<PatchOperation>();
        }

        /// <summary>
        /// Conversion to <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceOperation"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static explicit operator Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceOperation(PatchOperation value)
        {
            return value.As<Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceOperation>();
        }

        /// <summary>
        /// Conversion from <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceOperation"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator PatchOperation(Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceOperation value)
        {
            return value.As<PatchOperation>();
        }

        /// <summary>
        /// Conversion to <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.MoveOperation"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static explicit operator Corvus.Json.Patch.Model.JsonPatchDocument.MoveOperation(PatchOperation value)
        {
            return value.As<Corvus.Json.Patch.Model.JsonPatchDocument.MoveOperation>();
        }

        /// <summary>
        /// Conversion from <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.MoveOperation"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator PatchOperation(Corvus.Json.Patch.Model.JsonPatchDocument.MoveOperation value)
        {
            return value.As<PatchOperation>();
        }

        /// <summary>
        /// Conversion to <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.CopyOperation"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static explicit operator Corvus.Json.Patch.Model.JsonPatchDocument.CopyOperation(PatchOperation value)
        {
            return value.As<Corvus.Json.Patch.Model.JsonPatchDocument.CopyOperation>();
        }

        /// <summary>
        /// Conversion from <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.CopyOperation"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator PatchOperation(Corvus.Json.Patch.Model.JsonPatchDocument.CopyOperation value)
        {
            return value.As<PatchOperation>();
        }

        /// <summary>
        /// Conversion to <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.TestOperation"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static explicit operator Corvus.Json.Patch.Model.JsonPatchDocument.TestOperation(PatchOperation value)
        {
            return value.As<Corvus.Json.Patch.Model.JsonPatchDocument.TestOperation>();
        }

        /// <summary>
        /// Conversion from <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.TestOperation"/>.
        /// </summary>
        /// <param name="value">The value from which to convert.</param>
        public static implicit operator PatchOperation(Corvus.Json.Patch.Model.JsonPatchDocument.TestOperation value)
        {
            return value.As<PatchOperation>();
        }

        /// <summary>
        /// Operator ==.
        /// </summary>
        /// <param name="left">The lhs of the operator.</param>
        /// <param name="right">The rhs of the operator.</param>
        /// <returns>
        /// <c>True</c> if the values are equal.
        /// </returns>
        public static bool operator ==(in PatchOperation left, in PatchOperation right)
        {
            return left.Equals(right);
        }

        /// <summary>
        /// Operator !=.
        /// </summary>
        /// <param name="left">The lhs of the operator.</param>
        /// <param name="right">The rhs of the operator.</param>
        /// <returns>
        /// <c>True</c> if the values are not equal.
        /// </returns>
        public static bool operator !=(in PatchOperation left, in PatchOperation right)
        {
            return !left.Equals(right);
        }

        /// <summary>
        /// Gets an instance of the JSON value from a <see cref="JsonElement"/> value.
        /// </summary>
        /// <param name="value">The <see cref="JsonElement"/> value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the <see cref="JsonElement"/>.</returns>
        /// <remarks>The returned value will have a <see cref = "IJsonValue.ValueKind"/> of <see cref = "JsonValueKind.Undefined"/> if the
        /// value cannot be constructed from the given instance (e.g. because they have an incompatible .NET backing type).
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static PatchOperation FromJson(in JsonElement value)
        {
            return new(value);
        }

        /// <summary>
        /// Gets an instance of the JSON value from a <see cref="JsonAny"/> value.
        /// </summary>
        /// <param name="value">The <see cref="JsonAny"/> value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the <see cref="JsonAny"/> value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static PatchOperation FromAny(in JsonAny value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.Object => new(value.AsObject.AsPropertyBacking()),
                JsonValueKind.Null => Null,
                _ => Undefined,
            };
        }

#if NET8_0_OR_GREATER
        /// <summary>
        /// Gets an instance of the JSON value from the provided value.
        /// </summary>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="value">The value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the provided value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static PatchOperation IJsonValue<PatchOperation>.FromBoolean<TValue>(in TValue value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return Undefined;
        }
#endif

#if NET8_0_OR_GREATER
        /// <summary>
        /// Gets an instance of the JSON value from the provided value.
        /// </summary>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="value">The value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the provided value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static PatchOperation IJsonValue<PatchOperation>.FromString<TValue>(in TValue value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return Undefined;
        }
#endif

#if NET8_0_OR_GREATER
        /// <summary>
        /// Gets an instance of the JSON value from the provided value.
        /// </summary>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="value">The value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the provided value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static PatchOperation IJsonValue<PatchOperation>.FromNumber<TValue>(in TValue value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return Undefined;
        }
#endif

        /// <summary>
        /// Gets an instance of the JSON value from the provided value.
        /// </summary>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="value">The value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the provided value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static PatchOperation FromObject<TValue>(in TValue value)
            where TValue : struct, IJsonObject<TValue>
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return value.ValueKind switch
            {
                JsonValueKind.Object => new(value.AsObject.AsPropertyBacking()),
                JsonValueKind.Null => Null,
                _ => Undefined,
            };
        }

#if NET8_0_OR_GREATER
        /// <summary>
        /// Gets an instance of the JSON value from the provided value.
        /// </summary>
        /// <typeparam name="TValue">The type of the value.</typeparam>
        /// <param name="value">The value from which to instantiate the instance.</param>
        /// <returns>An instance of this type, initialized from the provided value.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        static PatchOperation IJsonValue<PatchOperation>.FromArray<TValue>(in TValue value)
        {
            if (value.HasJsonElementBacking)
            {
                return new(value.AsJsonElement);
            }

            return Undefined;
        }
#endif

        /// <summary>
        /// Parses the PatchOperation.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        /// <param name="options">The (optional) JsonDocumentOptions.</param>
        public static PatchOperation Parse(string source, JsonDocumentOptions options = default)
        {
            using var jsonDocument = JsonDocument.Parse(source, options);
            return new(jsonDocument.RootElement.Clone());
        }

        /// <summary>
        /// Parses the PatchOperation.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        /// <param name="options">The (optional) JsonDocumentOptions.</param>
        public static PatchOperation Parse(Stream source, JsonDocumentOptions options = default)
        {
            using var jsonDocument = JsonDocument.Parse(source, options);
            return new(jsonDocument.RootElement.Clone());
        }

        /// <summary>
        /// Parses the PatchOperation.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        /// <param name="options">The (optional) JsonDocumentOptions.</param>
        public static PatchOperation Parse(ReadOnlyMemory<byte> source, JsonDocumentOptions options = default)
        {
            using var jsonDocument = JsonDocument.Parse(source, options);
            return new(jsonDocument.RootElement.Clone());
        }

        /// <summary>
        /// Parses the PatchOperation.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        /// <param name="options">The (optional) JsonDocumentOptions.</param>
        public static PatchOperation Parse(ReadOnlyMemory<char> source, JsonDocumentOptions options = default)
        {
            using var jsonDocument = JsonDocument.Parse(source, options);
            return new(jsonDocument.RootElement.Clone());
        }

        /// <summary>
        /// Parses the PatchOperation.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        /// <param name="options">The (optional) JsonDocumentOptions.</param>
        public static PatchOperation Parse(ReadOnlySequence<byte> source, JsonDocumentOptions options = default)
        {
            using var jsonDocument = JsonDocument.Parse(source, options);
            return new(jsonDocument.RootElement.Clone());
        }

        /// <summary>
        /// Parses the PatchOperation.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        public static PatchOperation ParseValue(ReadOnlySpan<char> source)
        {
#if NET8_0_OR_GREATER
            return IJsonValue<PatchOperation>.ParseValue(source);
#else
            return JsonValueHelpers.ParseValue<PatchOperation>(source);
#endif
        }

        /// <summary>
        /// Parses the PatchOperation.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        public static PatchOperation ParseValue(ReadOnlySpan<byte> source)
        {
#if NET8_0_OR_GREATER
            return IJsonValue<PatchOperation>.ParseValue(source);
#else
            return JsonValueHelpers.ParseValue<PatchOperation>(source);
#endif
        }

        /// <summary>
        /// Parses the PatchOperation.
        /// </summary>
        /// <param name="source">The source of the JSON string to parse.</param>
        public static PatchOperation ParseValue(ref Utf8JsonReader source)
        {
#if NET8_0_OR_GREATER
            return IJsonValue<PatchOperation>.ParseValue(ref source);
#else
            return JsonValueHelpers.ParseValue<PatchOperation>(ref source);
#endif
        }

        /// <summary>
        /// Gets the value as an instance of the target value.
        /// </summary>
        /// <typeparam name="TTarget">The type of the target.</typeparam>
        /// <returns>An instance of the target type.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TTarget As<TTarget>()
            where TTarget : struct, IJsonValue<TTarget>
        {
#if NET8_0_OR_GREATER
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return TTarget.FromJson(this.jsonElementBacking);
            }

            if ((this.backing & Backing.Object) != 0)
            {
                return TTarget.FromObject(this.AsObject);
            }

            if ((this.backing & Backing.Null) != 0)
            {
                return TTarget.Null;
            }

            return TTarget.Undefined;
#else
            return this.As<PatchOperation, TTarget>();
#endif
        }

        /// <inheritdoc/>
        public override bool Equals(object? obj)
        {
            return
                (obj is IJsonValue jv && this.Equals(jv.AsAny)) ||
                (obj is null && this.IsNull());
        }

        /// <inheritdoc/>
        public bool Equals<T>(in T other)
            where T : struct, IJsonValue<T>
        {
            return JsonValueHelpers.CompareValues(this, other);
        }

        /// <summary>
        /// Equality comparison.
        /// </summary>
        /// <param name="other">The other item with which to compare.</param>
        /// <returns><see langword="true"/> if the values were equal.</returns>
        public bool Equals(in PatchOperation other)
        {
            return JsonValueHelpers.CompareValues(this, other);
        }

        /// <inheritdoc/>
        public void WriteTo(Utf8JsonWriter writer)
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
                {
                    this.jsonElementBacking.WriteTo(writer);
                }

                return;
            }

            if ((this.backing & Backing.Object) != 0)
            {
                JsonValueHelpers.WriteProperties(this.objectBacking, writer);

                return;
            }

            if ((this.backing & Backing.Null) != 0)
            {
                writer.WriteNullValue();

                return;
            }
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            return JsonValueHelpers.GetHashCode(this);
        }

        /// <inheritdoc/>
        public override string ToString()
        {
            return this.Serialize();
        }

        /// <summary>
        /// Matches the value against the composed values, and returns the result of calling the provided match function for the first match found.
        /// </summary>
        /// <typeparam name="TIn">The immutable context to pass in to the match function.</typeparam>
        /// <typeparam name="TOut">The result of calling the match function.</typeparam>
        /// <param name="context">The context to pass to the match function.</param>
        /// <param name="matchCorvusJsonPatchModelJsonPatchDocumentAddOperation">Match a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.AddOperation"/>.</param>
        /// <param name="matchCorvusJsonPatchModelJsonPatchDocumentRemoveOperation">Match a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.RemoveOperation"/>.</param>
        /// <param name="matchCorvusJsonPatchModelJsonPatchDocumentReplaceOperation">Match a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceOperation"/>.</param>
        /// <param name="matchCorvusJsonPatchModelJsonPatchDocumentMoveOperation">Match a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.MoveOperation"/>.</param>
        /// <param name="matchCorvusJsonPatchModelJsonPatchDocumentCopyOperation">Match a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.CopyOperation"/>.</param>
        /// <param name="matchCorvusJsonPatchModelJsonPatchDocumentTestOperation">Match a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.TestOperation"/>.</param>
        /// <param name="defaultMatch">Match any other value.</param>
        /// <returns>An instance of the value returned by the match function.</returns>
        public TOut Match<TIn, TOut>(
            in TIn context,
            Matcher<Corvus.Json.Patch.Model.JsonPatchDocument.AddOperation, TIn, TOut> matchCorvusJsonPatchModelJsonPatchDocumentAddOperation,
            Matcher<Corvus.Json.Patch.Model.JsonPatchDocument.RemoveOperation, TIn, TOut> matchCorvusJsonPatchModelJsonPatchDocumentRemoveOperation,
            Matcher<Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceOperation, TIn, TOut> matchCorvusJsonPatchModelJsonPatchDocumentReplaceOperation,
            Matcher<Corvus.Json.Patch.Model.JsonPatchDocument.MoveOperation, TIn, TOut> matchCorvusJsonPatchModelJsonPatchDocumentMoveOperation,
            Matcher<Corvus.Json.Patch.Model.JsonPatchDocument.CopyOperation, TIn, TOut> matchCorvusJsonPatchModelJsonPatchDocumentCopyOperation,
            Matcher<Corvus.Json.Patch.Model.JsonPatchDocument.TestOperation, TIn, TOut> matchCorvusJsonPatchModelJsonPatchDocumentTestOperation,
            Matcher<PatchOperation, TIn, TOut> defaultMatch)
        {
            Corvus.Json.Patch.Model.JsonPatchDocument.AddOperation matchCorvusJsonPatchModelJsonPatchDocumentAddOperationValue = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.AddOperation>();
            if (matchCorvusJsonPatchModelJsonPatchDocumentAddOperationValue.IsValid())
            {
                return matchCorvusJsonPatchModelJsonPatchDocumentAddOperation(matchCorvusJsonPatchModelJsonPatchDocumentAddOperationValue, context);
            }

            Corvus.Json.Patch.Model.JsonPatchDocument.RemoveOperation matchCorvusJsonPatchModelJsonPatchDocumentRemoveOperationValue = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.RemoveOperation>();
            if (matchCorvusJsonPatchModelJsonPatchDocumentRemoveOperationValue.IsValid())
            {
                return matchCorvusJsonPatchModelJsonPatchDocumentRemoveOperation(matchCorvusJsonPatchModelJsonPatchDocumentRemoveOperationValue, context);
            }

            Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceOperation matchCorvusJsonPatchModelJsonPatchDocumentReplaceOperationValue = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceOperation>();
            if (matchCorvusJsonPatchModelJsonPatchDocumentReplaceOperationValue.IsValid())
            {
                return matchCorvusJsonPatchModelJsonPatchDocumentReplaceOperation(matchCorvusJsonPatchModelJsonPatchDocumentReplaceOperationValue, context);
            }

            Corvus.Json.Patch.Model.JsonPatchDocument.MoveOperation matchCorvusJsonPatchModelJsonPatchDocumentMoveOperationValue = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.MoveOperation>();
            if (matchCorvusJsonPatchModelJsonPatchDocumentMoveOperationValue.IsValid())
            {
                return matchCorvusJsonPatchModelJsonPatchDocumentMoveOperation(matchCorvusJsonPatchModelJsonPatchDocumentMoveOperationValue, context);
            }

            Corvus.Json.Patch.Model.JsonPatchDocument.CopyOperation matchCorvusJsonPatchModelJsonPatchDocumentCopyOperationValue = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.CopyOperation>();
            if (matchCorvusJsonPatchModelJsonPatchDocumentCopyOperationValue.IsValid())
            {
                return matchCorvusJsonPatchModelJsonPatchDocumentCopyOperation(matchCorvusJsonPatchModelJsonPatchDocumentCopyOperationValue, context);
            }

            Corvus.Json.Patch.Model.JsonPatchDocument.TestOperation matchCorvusJsonPatchModelJsonPatchDocumentTestOperationValue = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.TestOperation>();
            if (matchCorvusJsonPatchModelJsonPatchDocumentTestOperationValue.IsValid())
            {
                return matchCorvusJsonPatchModelJsonPatchDocumentTestOperation(matchCorvusJsonPatchModelJsonPatchDocumentTestOperationValue, context);
            }

            return defaultMatch(this, context);
        }

        /// <summary>
        /// Matches the value against the composed values, and returns the result of calling the provided match function for the first match found.
        /// </summary>
        /// <typeparam name="TOut">The result of calling the match function.</typeparam>
        /// <param name="matchCorvusJsonPatchModelJsonPatchDocumentAddOperation">Match a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.AddOperation"/>.</param>
        /// <param name="matchCorvusJsonPatchModelJsonPatchDocumentRemoveOperation">Match a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.RemoveOperation"/>.</param>
        /// <param name="matchCorvusJsonPatchModelJsonPatchDocumentReplaceOperation">Match a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceOperation"/>.</param>
        /// <param name="matchCorvusJsonPatchModelJsonPatchDocumentMoveOperation">Match a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.MoveOperation"/>.</param>
        /// <param name="matchCorvusJsonPatchModelJsonPatchDocumentCopyOperation">Match a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.CopyOperation"/>.</param>
        /// <param name="matchCorvusJsonPatchModelJsonPatchDocumentTestOperation">Match a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.TestOperation"/>.</param>
        /// <param name="defaultMatch">Match any other value.</param>
        /// <returns>An instance of the value returned by the match function.</returns>
        public TOut Match<TOut>(
            Matcher<Corvus.Json.Patch.Model.JsonPatchDocument.AddOperation, TOut> matchCorvusJsonPatchModelJsonPatchDocumentAddOperation,
            Matcher<Corvus.Json.Patch.Model.JsonPatchDocument.RemoveOperation, TOut> matchCorvusJsonPatchModelJsonPatchDocumentRemoveOperation,
            Matcher<Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceOperation, TOut> matchCorvusJsonPatchModelJsonPatchDocumentReplaceOperation,
            Matcher<Corvus.Json.Patch.Model.JsonPatchDocument.MoveOperation, TOut> matchCorvusJsonPatchModelJsonPatchDocumentMoveOperation,
            Matcher<Corvus.Json.Patch.Model.JsonPatchDocument.CopyOperation, TOut> matchCorvusJsonPatchModelJsonPatchDocumentCopyOperation,
            Matcher<Corvus.Json.Patch.Model.JsonPatchDocument.TestOperation, TOut> matchCorvusJsonPatchModelJsonPatchDocumentTestOperation,
            Matcher<PatchOperation, TOut> defaultMatch)
        {
            Corvus.Json.Patch.Model.JsonPatchDocument.AddOperation matchCorvusJsonPatchModelJsonPatchDocumentAddOperationValue = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.AddOperation>();
            if (matchCorvusJsonPatchModelJsonPatchDocumentAddOperationValue.IsValid())
            {
                return matchCorvusJsonPatchModelJsonPatchDocumentAddOperation(matchCorvusJsonPatchModelJsonPatchDocumentAddOperationValue);
            }

            Corvus.Json.Patch.Model.JsonPatchDocument.RemoveOperation matchCorvusJsonPatchModelJsonPatchDocumentRemoveOperationValue = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.RemoveOperation>();
            if (matchCorvusJsonPatchModelJsonPatchDocumentRemoveOperationValue.IsValid())
            {
                return matchCorvusJsonPatchModelJsonPatchDocumentRemoveOperation(matchCorvusJsonPatchModelJsonPatchDocumentRemoveOperationValue);
            }

            Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceOperation matchCorvusJsonPatchModelJsonPatchDocumentReplaceOperationValue = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceOperation>();
            if (matchCorvusJsonPatchModelJsonPatchDocumentReplaceOperationValue.IsValid())
            {
                return matchCorvusJsonPatchModelJsonPatchDocumentReplaceOperation(matchCorvusJsonPatchModelJsonPatchDocumentReplaceOperationValue);
            }

            Corvus.Json.Patch.Model.JsonPatchDocument.MoveOperation matchCorvusJsonPatchModelJsonPatchDocumentMoveOperationValue = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.MoveOperation>();
            if (matchCorvusJsonPatchModelJsonPatchDocumentMoveOperationValue.IsValid())
            {
                return matchCorvusJsonPatchModelJsonPatchDocumentMoveOperation(matchCorvusJsonPatchModelJsonPatchDocumentMoveOperationValue);
            }

            Corvus.Json.Patch.Model.JsonPatchDocument.CopyOperation matchCorvusJsonPatchModelJsonPatchDocumentCopyOperationValue = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.CopyOperation>();
            if (matchCorvusJsonPatchModelJsonPatchDocumentCopyOperationValue.IsValid())
            {
                return matchCorvusJsonPatchModelJsonPatchDocumentCopyOperation(matchCorvusJsonPatchModelJsonPatchDocumentCopyOperationValue);
            }

            Corvus.Json.Patch.Model.JsonPatchDocument.TestOperation matchCorvusJsonPatchModelJsonPatchDocumentTestOperationValue = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.TestOperation>();
            if (matchCorvusJsonPatchModelJsonPatchDocumentTestOperationValue.IsValid())
            {
                return matchCorvusJsonPatchModelJsonPatchDocumentTestOperation(matchCorvusJsonPatchModelJsonPatchDocumentTestOperationValue);
            }

            return defaultMatch(this);
        }

        /// <summary>
        /// Gets the value as a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.AddOperation" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsAddOperation(out Corvus.Json.Patch.Model.JsonPatchDocument.AddOperation result)
        {
            result = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.AddOperation>();
            return result.IsValid();
        }

        /// <summary>
        /// Gets the value as a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.CopyOperation" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsCopyOperation(out Corvus.Json.Patch.Model.JsonPatchDocument.CopyOperation result)
        {
            result = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.CopyOperation>();
            return result.IsValid();
        }

        /// <summary>
        /// Gets the value as a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.MoveOperation" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsMoveOperation(out Corvus.Json.Patch.Model.JsonPatchDocument.MoveOperation result)
        {
            result = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.MoveOperation>();
            return result.IsValid();
        }

        /// <summary>
        /// Gets the value as a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.PatchOperationCommon" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsPatchOperationCommon(out Corvus.Json.Patch.Model.JsonPatchDocument.PatchOperationCommon result)
        {
            result = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.PatchOperationCommon>();
            return result.IsValid();
        }

        /// <summary>
        /// Gets the value as a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.RemoveOperation" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsRemoveOperation(out Corvus.Json.Patch.Model.JsonPatchDocument.RemoveOperation result)
        {
            result = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.RemoveOperation>();
            return result.IsValid();
        }

        /// <summary>
        /// Gets the value as a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceOperation" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsReplaceOperation(out Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceOperation result)
        {
            result = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.ReplaceOperation>();
            return result.IsValid();
        }

        /// <summary>
        /// Gets the value as a <see cref="Corvus.Json.Patch.Model.JsonPatchDocument.TestOperation" />.
        /// </summary>
        /// <param name="result">The result of the conversions.</param>
        /// <returns><see langword="true" /> if the conversion was valid.</returns>
        public bool TryGetAsTestOperation(out Corvus.Json.Patch.Model.JsonPatchDocument.TestOperation result)
        {
            result = this.As<Corvus.Json.Patch.Model.JsonPatchDocument.TestOperation>();
            return result.IsValid();
        }
    }
}
