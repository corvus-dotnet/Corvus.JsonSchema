//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Model.V3;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
public readonly partial struct Basictypes
{
    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonArray"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonArray(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Array) != 0)
        {
            return new(value.arrayBacking);
        }

        if ((value.backing & Backing.String) != 0)
        {
            return new(value.stringBacking);
        }

        return Model.V3.Basictypes.ExtJsonArray.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonArray"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonArray value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Array => new(value.AsImmutableList()),
            JsonValueKind.String => new((string)value),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonObject"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonObject(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Object) != 0)
        {
            return new(value.objectBacking);
        }

        if ((value.backing & Backing.String) != 0)
        {
            return new(value.stringBacking);
        }

        return Model.V3.Basictypes.ExtJsonObject.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonObject"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonObject value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Object => new(value.AsPropertyBacking()),
            JsonValueKind.String => new((string)value),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonString"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonString(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.String) != 0)
        {
            return new(value.stringBacking);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        return Model.V3.Basictypes.ExtJsonString.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonString"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonString value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.String => new((string)value),
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonDateTime"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonDateTime(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.String) != 0)
        {
            return new(value.stringBacking);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        return Model.V3.Basictypes.ExtJsonDateTime.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonDateTime"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonDateTime value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.String => new((string)value),
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonDate"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonDate(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.String) != 0)
        {
            return new(value.stringBacking);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        return Model.V3.Basictypes.ExtJsonDate.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonDate"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonDate value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.String => new((string)value),
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonDuration"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonDuration(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.String) != 0)
        {
            return new(value.stringBacking);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        return Model.V3.Basictypes.ExtJsonDuration.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonDuration"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonDuration value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.String => new((string)value),
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonTime"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonTime(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.String) != 0)
        {
            return new(value.stringBacking);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        return Model.V3.Basictypes.ExtJsonTime.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonTime"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonTime value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.String => new((string)value),
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonEmail"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonEmail(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.String) != 0)
        {
            return new(value.stringBacking);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        return Model.V3.Basictypes.ExtJsonEmail.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonEmail"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonEmail value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.String => new((string)value),
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonHostname"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonHostname(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.String) != 0)
        {
            return new(value.stringBacking);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        return Model.V3.Basictypes.ExtJsonHostname.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonHostname"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonHostname value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.String => new((string)value),
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonIdnEmail"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonIdnEmail(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.String) != 0)
        {
            return new(value.stringBacking);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        return Model.V3.Basictypes.ExtJsonIdnEmail.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonIdnEmail"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonIdnEmail value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.String => new((string)value),
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonIpV4"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonIpV4(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.String) != 0)
        {
            return new(value.stringBacking);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        return Model.V3.Basictypes.ExtJsonIpV4.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonIpV4"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonIpV4 value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.String => new((string)value),
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonIpV6"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonIpV6(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.String) != 0)
        {
            return new(value.stringBacking);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        return Model.V3.Basictypes.ExtJsonIpV6.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonIpV6"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonIpV6 value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.String => new((string)value),
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonIri"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonIri(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.String) != 0)
        {
            return new(value.stringBacking);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        return Model.V3.Basictypes.ExtJsonIri.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonIri"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonIri value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.String => new((string)value),
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonIriReference"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonIriReference(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.String) != 0)
        {
            return new(value.stringBacking);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        return Model.V3.Basictypes.ExtJsonIriReference.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonIriReference"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonIriReference value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.String => new((string)value),
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonPointer"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonPointer(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.String) != 0)
        {
            return new(value.stringBacking);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        return Model.V3.Basictypes.ExtJsonPointer.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonPointer"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonPointer value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.String => new((string)value),
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonRegex"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonRegex(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.String) != 0)
        {
            return new(value.stringBacking);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        return Model.V3.Basictypes.ExtJsonRegex.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonRegex"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonRegex value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.String => new((string)value),
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonRelativePointer"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonRelativePointer(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.String) != 0)
        {
            return new(value.stringBacking);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        return Model.V3.Basictypes.ExtJsonRelativePointer.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonRelativePointer"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonRelativePointer value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.String => new((string)value),
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonUri"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonUri(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.String) != 0)
        {
            return new(value.stringBacking);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        return Model.V3.Basictypes.ExtJsonUri.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonUri"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonUri value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.String => new((string)value),
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonUriReference"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonUriReference(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.String) != 0)
        {
            return new(value.stringBacking);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        return Model.V3.Basictypes.ExtJsonUriReference.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonUriReference"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonUriReference value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.String => new((string)value),
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonUriTemplate"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonUriTemplate(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.String) != 0)
        {
            return new(value.stringBacking);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        return Model.V3.Basictypes.ExtJsonUriTemplate.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonUriTemplate"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonUriTemplate value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.String => new((string)value),
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonUuid"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonUuid(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.String) != 0)
        {
            return new(value.stringBacking);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        return Model.V3.Basictypes.ExtJsonUuid.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonUuid"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonUuid value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.String => new((string)value),
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonNumber"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonNumber(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return new(value.numberBacking);
        }

        return Model.V3.Basictypes.ExtJsonNumber.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonNumber"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonNumber value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            JsonValueKind.Number => new(value.AsBinaryJsonNumber),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonInteger"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonInteger(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return new(value.numberBacking);
        }

        return Model.V3.Basictypes.ExtJsonInteger.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonInteger"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonInteger value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            JsonValueKind.Number => new(value.AsBinaryJsonNumber),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonHalf"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonHalf(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return new(value.numberBacking);
        }

        return Model.V3.Basictypes.ExtJsonHalf.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonHalf"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonHalf value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            JsonValueKind.Number => new(value.AsBinaryJsonNumber),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonSingle"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonSingle(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return new(value.numberBacking);
        }

        return Model.V3.Basictypes.ExtJsonSingle.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonSingle"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonSingle value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            JsonValueKind.Number => new(value.AsBinaryJsonNumber),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonDouble"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonDouble(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return new(value.numberBacking);
        }

        return Model.V3.Basictypes.ExtJsonDouble.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonDouble"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonDouble value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            JsonValueKind.Number => new(value.AsBinaryJsonNumber),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonDecimal"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonDecimal(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return new(value.numberBacking);
        }

        return Model.V3.Basictypes.ExtJsonDecimal.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonDecimal"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonDecimal value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Number => new(value.AsBinaryJsonNumber),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonSByte"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonSByte(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return new(value.numberBacking);
        }

        return Model.V3.Basictypes.ExtJsonSByte.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonSByte"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonSByte value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            JsonValueKind.Number => new(value.AsBinaryJsonNumber),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonInt16"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonInt16(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return new(value.numberBacking);
        }

        return Model.V3.Basictypes.ExtJsonInt16.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonInt16"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonInt16 value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            JsonValueKind.Number => new(value.AsBinaryJsonNumber),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonInt32"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonInt32(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return new(value.numberBacking);
        }

        return Model.V3.Basictypes.ExtJsonInt32.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonInt32"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonInt32 value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            JsonValueKind.Number => new(value.AsBinaryJsonNumber),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonInt64"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonInt64(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return new(value.numberBacking);
        }

        return Model.V3.Basictypes.ExtJsonInt64.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonInt64"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonInt64 value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            JsonValueKind.Number => new(value.AsBinaryJsonNumber),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonInt128"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonInt128(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return new(value.numberBacking);
        }

        return Model.V3.Basictypes.ExtJsonInt128.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonInt128"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonInt128 value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            JsonValueKind.Number => new(value.AsBinaryJsonNumber),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonByte"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonByte(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return new(value.numberBacking);
        }

        return Model.V3.Basictypes.ExtJsonByte.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonByte"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonByte value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            JsonValueKind.Number => new(value.AsBinaryJsonNumber),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonUInt16"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonUInt16(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return new(value.numberBacking);
        }

        return Model.V3.Basictypes.ExtJsonUInt16.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonUInt16"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonUInt16 value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            JsonValueKind.Number => new(value.AsBinaryJsonNumber),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonUInt32"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonUInt32(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return new(value.numberBacking);
        }

        return Model.V3.Basictypes.ExtJsonUInt32.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonUInt32"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonUInt32 value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            JsonValueKind.Number => new(value.AsBinaryJsonNumber),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonUInt64"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonUInt64(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return new(value.numberBacking);
        }

        return Model.V3.Basictypes.ExtJsonUInt64.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonUInt64"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonUInt64 value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            JsonValueKind.Number => new(value.AsBinaryJsonNumber),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "Model.V3.Basictypes.ExtJsonUInt128"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator Model.V3.Basictypes.ExtJsonUInt128(Basictypes value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Bool) != 0)
        {
            return new(value.numberBacking.GetByteAsBool());
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return new(value.numberBacking);
        }

        return Model.V3.Basictypes.ExtJsonUInt128.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "Model.V3.Basictypes.ExtJsonUInt128"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Basictypes(Model.V3.Basictypes.ExtJsonUInt128 value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.True => new(true),
            JsonValueKind.False => new(false),
            JsonValueKind.Number => new(value.AsBinaryJsonNumber),
            _ => Undefined
        };
    }
}