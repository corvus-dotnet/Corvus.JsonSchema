//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Model.V3;
public readonly partial struct Basictypes
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct ExtJsonObject
    {
        /// <summary>
        /// The well-known property names in the JSON object.
        /// </summary>
        public static class JsonPropertyNames
        {
            /// <summary>
            /// JSON property name for <see cref = "Whizz"/>.
            /// </summary>
            public static ReadOnlySpan<byte> WhizzUtf8 => "whizz"u8;

            /// <summary>
            /// JSON property name for <see cref = "Whizz"/>.
            /// </summary>
            public const string Whizz = "whizz";
        }

        /// <summary>
        /// Gets the (optional) <c>whizz</c> property.
        /// </summary>
        public Model.V3.Basictypes.ExtJsonObject.WhizzEntity Whizz
        {
            get
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        return default;
                    }

                    if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.WhizzUtf8, out JsonElement result))
                    {
                        return new Model.V3.Basictypes.ExtJsonObject.WhizzEntity(result);
                    }
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(JsonPropertyNames.Whizz, out JsonAny result))
                    {
                        return result.As<Model.V3.Basictypes.ExtJsonObject.WhizzEntity>();
                    }
                }

                return default;
            }
        }

        /// <summary>
        /// Creates an instance of a <see cref = "ExtJsonObject"/>.
        /// </summary>
        public static ExtJsonObject Create(Model.V3.Basictypes.ExtJsonObject.WhizzEntity? whizz = null)
        {
            var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
            if (whizz is Model.V3.Basictypes.ExtJsonObject.WhizzEntity whizz__)
            {
                builder.Add(JsonPropertyNames.Whizz, whizz__.AsAny);
            }

            return new(builder.ToImmutable());
        }

        private static ValidationContext __CorvusValidateWhizz(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
        {
            return property.ValueAs<Model.V3.Basictypes.ExtJsonObject.WhizzEntity>().Validate(validationContext, level);
        }

        /// <summary>
        /// Tries to get the validator for the given property.
        /// </summary>
        /// <param name = "property">The property for which to get the validator.</param>
        /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
        /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
        /// <returns><c>True</c> if the validator was found.</returns>
        private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
        {
            if (hasJsonElementBacking)
            {
                if (property.NameEquals(JsonPropertyNames.WhizzUtf8))
                {
                    propertyValidator = __CorvusValidateWhizz;
                    return true;
                }
            }
            else
            {
                if (property.NameEquals(JsonPropertyNames.Whizz))
                {
                    propertyValidator = __CorvusValidateWhizz;
                    return true;
                }
            }

            propertyValidator = null;
            return false;
        }
    }
}