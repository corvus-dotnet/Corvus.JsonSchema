//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Model.V3;
public readonly partial struct Basictypes
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct ExtJsonString4
    {
        /// <summary>
        /// Matches the value against each of the enumeration values, and returns the result of calling the provided match function for the first match found.
        /// </summary>
        /// <param name = "context">The context to pass to the match function.</param>
        /// <param name = "matchType1">The function to call if the value matches the JSON value "\"1\"".</param>
        /// <param name = "matchType2">The function to call if the value matches the JSON value "\"2\"".</param>
        /// <param name = "matchType3">The function to call if the value matches the JSON value "\"3\"".</param>
        /// <param name = "defaultMatch">The fallback match.</param>
        public TOut Match<TIn, TOut>(in TIn context, Func<TIn, TOut> matchType1, Func<TIn, TOut> matchType2, Func<TIn, TOut> matchType3, Func<TIn, TOut> defaultMatch)
        {
            if (this.ValueKind == JsonValueKind.String)
            {
                if (this.HasJsonElementBacking)
                {
                    if (this.jsonElementBacking.ValueEquals(EnumValues.Type1Utf8))
                    {
                        return matchType1(context);
                    }

                    if (this.jsonElementBacking.ValueEquals(EnumValues.Type2Utf8))
                    {
                        return matchType2(context);
                    }

                    if (this.jsonElementBacking.ValueEquals(EnumValues.Type3Utf8))
                    {
                        return matchType3(context);
                    }
                }
                else
                {
                    switch (this.stringBacking)
                    {
                        case "1":
                            return matchType1(context);
                        case "2":
                            return matchType2(context);
                        case "3":
                            return matchType3(context);
                        default:
                            break;
                    }
                }
            }

            return defaultMatch(context);
        }

        /// <summary>
        /// Matches the value against each of the enumeration values, and returns the result of calling the provided match function for the first match found.
        /// </summary>
        /// <param name = "matchType1">The function to call if the value matches the JSON value "\"1\"".</param>
        /// <param name = "matchType2">The function to call if the value matches the JSON value "\"2\"".</param>
        /// <param name = "matchType3">The function to call if the value matches the JSON value "\"3\"".</param>
        /// <param name = "defaultMatch">The fallback match.</param>
        public TOut Match<TOut>(Func<TOut> matchType1, Func<TOut> matchType2, Func<TOut> matchType3, Func<TOut> defaultMatch)
        {
            if (this.ValueKind == JsonValueKind.String)
            {
                if (this.HasJsonElementBacking)
                {
                    if (this.jsonElementBacking.ValueEquals(EnumValues.Type1Utf8))
                    {
                        return matchType1();
                    }

                    if (this.jsonElementBacking.ValueEquals(EnumValues.Type2Utf8))
                    {
                        return matchType2();
                    }

                    if (this.jsonElementBacking.ValueEquals(EnumValues.Type3Utf8))
                    {
                        return matchType3();
                    }
                }
                else
                {
                    switch (this.stringBacking)
                    {
                        case "1":
                            return matchType1();
                        case "2":
                            return matchType2();
                        case "3":
                            return matchType3();
                        default:
                            break;
                    }
                }
            }

            return defaultMatch();
        }

        /// <summary>
        /// Permitted values.
        /// </summary>
        public static class EnumValues
        {
            /// <summary>
            /// Gets "1" as a JSON value.
            /// </summary>
            public static readonly ExtJsonString4 Type1 = ExtJsonString4.Parse("\"1\"");
            /// <summary>
            /// Gets "1" as a UTF8 string.
            /// </summary>
            public static ReadOnlySpan<byte> Type1Utf8 => "1"u8;

            /// <summary>
            /// Gets "2" as a JSON value.
            /// </summary>
            public static readonly ExtJsonString4 Type2 = ExtJsonString4.Parse("\"2\"");
            /// <summary>
            /// Gets "2" as a UTF8 string.
            /// </summary>
            public static ReadOnlySpan<byte> Type2Utf8 => "2"u8;

            /// <summary>
            /// Gets "3" as a JSON value.
            /// </summary>
            public static readonly ExtJsonString4 Type3 = ExtJsonString4.Parse("\"3\"");
            /// <summary>
            /// Gets "3" as a UTF8 string.
            /// </summary>
            public static ReadOnlySpan<byte> Type3Utf8 => "3"u8;

            /// <summary>
            /// Gets "1" as a JSON value.
            /// </summary>
            internal static readonly ExtJsonString4 Item0 = ExtJsonString4.Parse("\"1\"");
            /// <summary>
            /// Gets "2" as a JSON value.
            /// </summary>
            internal static readonly ExtJsonString4 Item1 = ExtJsonString4.Parse("\"2\"");
            /// <summary>
            /// Gets "3" as a JSON value.
            /// </summary>
            internal static readonly ExtJsonString4 Item2 = ExtJsonString4.Parse("\"3\"");
        }
    }
}