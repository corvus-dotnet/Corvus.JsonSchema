//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using Corvus.Json;

namespace Model.V3;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
public readonly partial struct Basictypes
{
    private ValidationContext ValidateOneOf(in ValidationContext validationContext, ValidationLevel level)
    {
        ValidationContext result = validationContext;
        if (level > ValidationLevel.Basic)
        {
            result = result.PushValidationLocationProperty("oneOf");
        }

        ValidationContext childContextBase = result;
        int oneOfCount = 0;
        ValidationContext childContext0 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext0 = childContext0.PushValidationLocationArrayIndex(0);
        }

        ValidationContext oneOfResult0 = this.As<Model.V3.Basictypes.ExtJsonArray>().Validate(childContext0.CreateChildContext(), level);
        if (oneOfResult0.IsValid)
        {
            result = result.MergeChildContext(oneOfResult0, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult0);
            }
        }

        ValidationContext childContext1 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext1 = childContext1.PushValidationLocationArrayIndex(1);
        }

        ValidationContext oneOfResult1 = this.As<Model.V3.Basictypes.ExtJsonObject>().Validate(childContext1.CreateChildContext(), level);
        if (oneOfResult1.IsValid)
        {
            result = result.MergeChildContext(oneOfResult1, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult1);
            }
        }

        ValidationContext childContext2 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext2 = childContext2.PushValidationLocationArrayIndex(2);
        }

        ValidationContext oneOfResult2 = this.As<Model.V3.Basictypes.ExtJsonString>().Validate(childContext2.CreateChildContext(), level);
        if (oneOfResult2.IsValid)
        {
            result = result.MergeChildContext(oneOfResult2, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult2);
            }
        }

        ValidationContext childContext3 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext3 = childContext3.PushValidationLocationArrayIndex(3);
        }

        ValidationContext oneOfResult3 = this.As<Model.V3.Basictypes.ExtJsonDateTime>().Validate(childContext3.CreateChildContext(), level);
        if (oneOfResult3.IsValid)
        {
            result = result.MergeChildContext(oneOfResult3, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult3);
            }
        }

        ValidationContext childContext4 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext4 = childContext4.PushValidationLocationArrayIndex(4);
        }

        ValidationContext oneOfResult4 = this.As<Model.V3.Basictypes.ExtJsonDate>().Validate(childContext4.CreateChildContext(), level);
        if (oneOfResult4.IsValid)
        {
            result = result.MergeChildContext(oneOfResult4, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult4);
            }
        }

        ValidationContext childContext5 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext5 = childContext5.PushValidationLocationArrayIndex(5);
        }

        ValidationContext oneOfResult5 = this.As<Model.V3.Basictypes.ExtJsonDuration>().Validate(childContext5.CreateChildContext(), level);
        if (oneOfResult5.IsValid)
        {
            result = result.MergeChildContext(oneOfResult5, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult5);
            }
        }

        ValidationContext childContext6 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext6 = childContext6.PushValidationLocationArrayIndex(6);
        }

        ValidationContext oneOfResult6 = this.As<Model.V3.Basictypes.ExtJsonTime>().Validate(childContext6.CreateChildContext(), level);
        if (oneOfResult6.IsValid)
        {
            result = result.MergeChildContext(oneOfResult6, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult6);
            }
        }

        ValidationContext childContext7 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext7 = childContext7.PushValidationLocationArrayIndex(7);
        }

        ValidationContext oneOfResult7 = this.As<Model.V3.Basictypes.ExtJsonEmail>().Validate(childContext7.CreateChildContext(), level);
        if (oneOfResult7.IsValid)
        {
            result = result.MergeChildContext(oneOfResult7, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult7);
            }
        }

        ValidationContext childContext8 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext8 = childContext8.PushValidationLocationArrayIndex(8);
        }

        ValidationContext oneOfResult8 = this.As<Model.V3.Basictypes.ExtJsonHostname>().Validate(childContext8.CreateChildContext(), level);
        if (oneOfResult8.IsValid)
        {
            result = result.MergeChildContext(oneOfResult8, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult8);
            }
        }

        ValidationContext childContext9 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext9 = childContext9.PushValidationLocationArrayIndex(9);
        }

        ValidationContext oneOfResult9 = this.As<Model.V3.Basictypes.ExtJsonIdnEmail>().Validate(childContext9.CreateChildContext(), level);
        if (oneOfResult9.IsValid)
        {
            result = result.MergeChildContext(oneOfResult9, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult9);
            }
        }

        ValidationContext childContext10 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext10 = childContext10.PushValidationLocationArrayIndex(10);
        }

        ValidationContext oneOfResult10 = this.As<Model.V3.Basictypes.ExtJsonIpV4>().Validate(childContext10.CreateChildContext(), level);
        if (oneOfResult10.IsValid)
        {
            result = result.MergeChildContext(oneOfResult10, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult10);
            }
        }

        ValidationContext childContext11 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext11 = childContext11.PushValidationLocationArrayIndex(11);
        }

        ValidationContext oneOfResult11 = this.As<Model.V3.Basictypes.ExtJsonIpV6>().Validate(childContext11.CreateChildContext(), level);
        if (oneOfResult11.IsValid)
        {
            result = result.MergeChildContext(oneOfResult11, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult11);
            }
        }

        ValidationContext childContext12 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext12 = childContext12.PushValidationLocationArrayIndex(12);
        }

        ValidationContext oneOfResult12 = this.As<Model.V3.Basictypes.ExtJsonIri>().Validate(childContext12.CreateChildContext(), level);
        if (oneOfResult12.IsValid)
        {
            result = result.MergeChildContext(oneOfResult12, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult12);
            }
        }

        ValidationContext childContext13 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext13 = childContext13.PushValidationLocationArrayIndex(13);
        }

        ValidationContext oneOfResult13 = this.As<Model.V3.Basictypes.ExtJsonIriReference>().Validate(childContext13.CreateChildContext(), level);
        if (oneOfResult13.IsValid)
        {
            result = result.MergeChildContext(oneOfResult13, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult13);
            }
        }

        ValidationContext childContext14 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext14 = childContext14.PushValidationLocationArrayIndex(14);
        }

        ValidationContext oneOfResult14 = this.As<Model.V3.Basictypes.ExtJsonPointer>().Validate(childContext14.CreateChildContext(), level);
        if (oneOfResult14.IsValid)
        {
            result = result.MergeChildContext(oneOfResult14, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult14);
            }
        }

        ValidationContext childContext15 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext15 = childContext15.PushValidationLocationArrayIndex(15);
        }

        ValidationContext oneOfResult15 = this.As<Model.V3.Basictypes.ExtJsonRegex>().Validate(childContext15.CreateChildContext(), level);
        if (oneOfResult15.IsValid)
        {
            result = result.MergeChildContext(oneOfResult15, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult15);
            }
        }

        ValidationContext childContext16 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext16 = childContext16.PushValidationLocationArrayIndex(16);
        }

        ValidationContext oneOfResult16 = this.As<Model.V3.Basictypes.ExtJsonRelativePointer>().Validate(childContext16.CreateChildContext(), level);
        if (oneOfResult16.IsValid)
        {
            result = result.MergeChildContext(oneOfResult16, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult16);
            }
        }

        ValidationContext childContext17 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext17 = childContext17.PushValidationLocationArrayIndex(17);
        }

        ValidationContext oneOfResult17 = this.As<Model.V3.Basictypes.ExtJsonUri>().Validate(childContext17.CreateChildContext(), level);
        if (oneOfResult17.IsValid)
        {
            result = result.MergeChildContext(oneOfResult17, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult17);
            }
        }

        ValidationContext childContext18 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext18 = childContext18.PushValidationLocationArrayIndex(18);
        }

        ValidationContext oneOfResult18 = this.As<Model.V3.Basictypes.ExtJsonUriReference>().Validate(childContext18.CreateChildContext(), level);
        if (oneOfResult18.IsValid)
        {
            result = result.MergeChildContext(oneOfResult18, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult18);
            }
        }

        ValidationContext childContext19 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext19 = childContext19.PushValidationLocationArrayIndex(19);
        }

        ValidationContext oneOfResult19 = this.As<Model.V3.Basictypes.ExtJsonUriTemplate>().Validate(childContext19.CreateChildContext(), level);
        if (oneOfResult19.IsValid)
        {
            result = result.MergeChildContext(oneOfResult19, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult19);
            }
        }

        ValidationContext childContext20 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext20 = childContext20.PushValidationLocationArrayIndex(20);
        }

        ValidationContext oneOfResult20 = this.As<Model.V3.Basictypes.ExtJsonUuid>().Validate(childContext20.CreateChildContext(), level);
        if (oneOfResult20.IsValid)
        {
            result = result.MergeChildContext(oneOfResult20, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult20);
            }
        }

        ValidationContext childContext21 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext21 = childContext21.PushValidationLocationArrayIndex(21);
        }

        ValidationContext oneOfResult21 = this.As<Model.V3.Basictypes.ExtJsonNumber>().Validate(childContext21.CreateChildContext(), level);
        if (oneOfResult21.IsValid)
        {
            result = result.MergeChildContext(oneOfResult21, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult21);
            }
        }

        ValidationContext childContext22 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext22 = childContext22.PushValidationLocationArrayIndex(22);
        }

        ValidationContext oneOfResult22 = this.As<Model.V3.Basictypes.ExtJsonInteger>().Validate(childContext22.CreateChildContext(), level);
        if (oneOfResult22.IsValid)
        {
            result = result.MergeChildContext(oneOfResult22, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult22);
            }
        }

        ValidationContext childContext23 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext23 = childContext23.PushValidationLocationArrayIndex(23);
        }

        ValidationContext oneOfResult23 = this.As<Model.V3.Basictypes.ExtJsonHalf>().Validate(childContext23.CreateChildContext(), level);
        if (oneOfResult23.IsValid)
        {
            result = result.MergeChildContext(oneOfResult23, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult23);
            }
        }

        ValidationContext childContext24 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext24 = childContext24.PushValidationLocationArrayIndex(24);
        }

        ValidationContext oneOfResult24 = this.As<Model.V3.Basictypes.ExtJsonSingle>().Validate(childContext24.CreateChildContext(), level);
        if (oneOfResult24.IsValid)
        {
            result = result.MergeChildContext(oneOfResult24, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult24);
            }
        }

        ValidationContext childContext25 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext25 = childContext25.PushValidationLocationArrayIndex(25);
        }

        ValidationContext oneOfResult25 = this.As<Model.V3.Basictypes.ExtJsonDouble>().Validate(childContext25.CreateChildContext(), level);
        if (oneOfResult25.IsValid)
        {
            result = result.MergeChildContext(oneOfResult25, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult25);
            }
        }

        ValidationContext childContext26 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext26 = childContext26.PushValidationLocationArrayIndex(26);
        }

        ValidationContext oneOfResult26 = this.As<Model.V3.Basictypes.ExtJsonDecimal>().Validate(childContext26.CreateChildContext(), level);
        if (oneOfResult26.IsValid)
        {
            result = result.MergeChildContext(oneOfResult26, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult26);
            }
        }

        ValidationContext childContext27 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext27 = childContext27.PushValidationLocationArrayIndex(27);
        }

        ValidationContext oneOfResult27 = this.As<Model.V3.Basictypes.ExtJsonSByte>().Validate(childContext27.CreateChildContext(), level);
        if (oneOfResult27.IsValid)
        {
            result = result.MergeChildContext(oneOfResult27, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult27);
            }
        }

        ValidationContext childContext28 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext28 = childContext28.PushValidationLocationArrayIndex(28);
        }

        ValidationContext oneOfResult28 = this.As<Model.V3.Basictypes.ExtJsonInt16>().Validate(childContext28.CreateChildContext(), level);
        if (oneOfResult28.IsValid)
        {
            result = result.MergeChildContext(oneOfResult28, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult28);
            }
        }

        ValidationContext childContext29 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext29 = childContext29.PushValidationLocationArrayIndex(29);
        }

        ValidationContext oneOfResult29 = this.As<Model.V3.Basictypes.ExtJsonInt32>().Validate(childContext29.CreateChildContext(), level);
        if (oneOfResult29.IsValid)
        {
            result = result.MergeChildContext(oneOfResult29, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult29);
            }
        }

        ValidationContext childContext30 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext30 = childContext30.PushValidationLocationArrayIndex(30);
        }

        ValidationContext oneOfResult30 = this.As<Model.V3.Basictypes.ExtJsonInt64>().Validate(childContext30.CreateChildContext(), level);
        if (oneOfResult30.IsValid)
        {
            result = result.MergeChildContext(oneOfResult30, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult30);
            }
        }

        ValidationContext childContext31 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext31 = childContext31.PushValidationLocationArrayIndex(31);
        }

        ValidationContext oneOfResult31 = this.As<Model.V3.Basictypes.ExtJsonInt128>().Validate(childContext31.CreateChildContext(), level);
        if (oneOfResult31.IsValid)
        {
            result = result.MergeChildContext(oneOfResult31, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult31);
            }
        }

        ValidationContext childContext32 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext32 = childContext32.PushValidationLocationArrayIndex(32);
        }

        ValidationContext oneOfResult32 = this.As<Model.V3.Basictypes.ExtJsonByte>().Validate(childContext32.CreateChildContext(), level);
        if (oneOfResult32.IsValid)
        {
            result = result.MergeChildContext(oneOfResult32, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult32);
            }
        }

        ValidationContext childContext33 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext33 = childContext33.PushValidationLocationArrayIndex(33);
        }

        ValidationContext oneOfResult33 = this.As<Model.V3.Basictypes.ExtJsonUInt16>().Validate(childContext33.CreateChildContext(), level);
        if (oneOfResult33.IsValid)
        {
            result = result.MergeChildContext(oneOfResult33, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult33);
            }
        }

        ValidationContext childContext34 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext34 = childContext34.PushValidationLocationArrayIndex(34);
        }

        ValidationContext oneOfResult34 = this.As<Model.V3.Basictypes.ExtJsonUInt32>().Validate(childContext34.CreateChildContext(), level);
        if (oneOfResult34.IsValid)
        {
            result = result.MergeChildContext(oneOfResult34, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult34);
            }
        }

        ValidationContext childContext35 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext35 = childContext35.PushValidationLocationArrayIndex(35);
        }

        ValidationContext oneOfResult35 = this.As<Model.V3.Basictypes.ExtJsonUInt64>().Validate(childContext35.CreateChildContext(), level);
        if (oneOfResult35.IsValid)
        {
            result = result.MergeChildContext(oneOfResult35, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult35);
            }
        }

        ValidationContext childContext36 = childContextBase;
        if (level > ValidationLevel.Basic)
        {
            childContext36 = childContext36.PushValidationLocationArrayIndex(36);
        }

        ValidationContext oneOfResult36 = this.As<Model.V3.Basictypes.ExtJsonUInt128>().Validate(childContext36.CreateChildContext(), level);
        if (oneOfResult36.IsValid)
        {
            result = result.MergeChildContext(oneOfResult36, level >= ValidationLevel.Verbose);
            oneOfCount += 1;
            if (oneOfCount > 1 && level == ValidationLevel.Flag)
            {
                result = result.WithResult(isValid: false);
                return result;
            }
        }
        else
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.MergeResults(result.IsValid, level, oneOfResult36);
            }
        }

        if (oneOfCount == 1)
        {
            if (level >= ValidationLevel.Verbose)
            {
                result = result.WithResult(isValid: true, "Validation 10.2.1.3. onef - validated against the oneOf schema.");
            }
        }
        else if (oneOfCount == 0)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - failed to validate against any of the oneOf schema.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - failed to validate against any of the oneOf schema.");
            }
            else
            {
                result = result.WithResult(isValid: false);
            }
        }
        else
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - validated against more than one of the oneOf schema.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "Validation 10.2.1.3. oneOf - failed to validate against more than one of the oneOf schema.");
            }
            else
            {
                result = result.WithResult(isValid: false);
            }
        }

        if (level > ValidationLevel.Basic)
        {
            result = result.PopLocation(); // oneOf
        }

        return result;
    }
}