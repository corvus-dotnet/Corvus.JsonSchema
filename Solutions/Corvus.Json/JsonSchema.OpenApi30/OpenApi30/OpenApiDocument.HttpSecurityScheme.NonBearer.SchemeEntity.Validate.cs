//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace Corvus.Json.JsonSchema.OpenApi30;

/// <summary>
/// Generated from JSON Schema.
/// </summary>
/// <remarks>
/// <para>
/// The description of OpenAPI v3.0.x documents, as defined by https://spec.openapis.org/oas/v3.0.3
/// </para>
/// </remarks>
public readonly partial struct OpenApiDocument
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct HttpSecurityScheme
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Non Bearer
        /// </para>
        /// </remarks>
        public readonly partial struct NonBearer
        {
            /// <summary>
            /// Generated from JSON Schema.
            /// </summary>
            public readonly partial struct SchemeEntity
            {
                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext;
                    if (level > ValidationLevel.Flag)
                    {
                        result = result.UsingResults();
                    }

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.UsingStack();
                        result = result.PushSchemaLocation("https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/HTTPSecurityScheme/oneOf/1/properties/scheme");
                    }

                    result = CorvusValidation.CompositionNotValidationHandler(this, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }

                    return result;
                }

                private static partial class CorvusValidation
                {
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    public static ValidationContext CompositionNotValidationHandler(
                        in SchemeEntity value,
                        in ValidationContext validationContext,
                        ValidationLevel level = ValidationLevel.Flag)
                    {
                        return ValidateNot(value, validationContext, level);

                        static ValidationContext ValidateNot(
                            in SchemeEntity value,
                            in ValidationContext validationContext,
                            ValidationLevel level = ValidationLevel.Flag)
                        {
                            ValidationContext result = validationContext;
                            if (level > ValidationLevel.Basic)
                            {
                                result = result.PushValidationLocationReducedPathModifier(new("#/not"));
                            }

                            ValidationContext compositionResult = value.As<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.HttpSecurityScheme.NonBearer.SchemeEntity.NotEntity>().Validate(result.CreateChildContext(), level);
                            if (compositionResult.IsValid)
                            {
                                if (level >= ValidationLevel.Basic)
                                {
                                    result = validationContext.MergeResults(false, level, compositionResult);
                                    result = result.WithResult(isValid: false, "Validation not - incorrectly validated successfully against the schema");
                                }
                                else
                                {
                                    result = validationContext.WithResult(isValid: false);
                                }
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = result.MergeResults(result.IsValid, level, compositionResult);
                            }

                            if (level > ValidationLevel.Basic)
                            {
                                result = result.PopLocation();
                            }

                            return result;
                        }
                    }
                }
            }
        }
    }
}
