//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace Corvus.Json.JsonSchema.OpenApi30;

/// <summary>
/// Generated from JSON Schema.
/// </summary>
/// <remarks>
/// <para>
/// The description of OpenAPI v3.0.x documents, as defined by https://spec.openapis.org/oas/v3.0.3
/// </para>
/// </remarks>
public readonly partial struct OpenApiDocument
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct Operation
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        public readonly partial struct JsonStringArray
        {
            /// <inheritdoc/>
            public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext;
                if (level > ValidationLevel.Flag)
                {
                    result = result.UsingResults();
                }

                if (level > ValidationLevel.Basic)
                {
                    result = result.UsingStack();
                    result = result.PushSchemaLocation("https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/Operation/properties/tags");
                }

                JsonValueKind valueKind = this.ValueKind;
                result = CorvusValidation.TypeValidationHandler(this, valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                result = CorvusValidation.ArrayValidationHandler(this, valueKind, result, level);
                if (level == ValidationLevel.Flag && !result.IsValid)
                {
                    return result;
                }

                if (level > ValidationLevel.Basic)
                {
                    result = result.PopLocation();
                }

                return result;
            }

            private static partial class CorvusValidation
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                public static ValidationContext TypeValidationHandler(
                    in JsonStringArray value,
                    JsonValueKind valueKind,
                    in ValidationContext validationContext,
                    ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext;
                    bool isValid = false;
                    ValidationContext localResultArray = Corvus.Json.Validate.TypeArray(valueKind, result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && localResultArray.IsValid)
                    {
                        return validationContext;
                    }

                    if (localResultArray.IsValid)
                    {
                        isValid = true;
                    }

                    return result.MergeResults(
                        isValid,
                        level,
                        localResultArray);
                }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                public static ValidationContext ArrayValidationHandler(
                    in JsonStringArray value,
                    JsonValueKind valueKind,
                    in ValidationContext validationContext,
                    ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    if (valueKind != JsonValueKind.Array)
                    {
                        if (level == ValidationLevel.Verbose)
                        {
                            ValidationContext ignoredResult = validationContext;
                            ignoredResult = ignoredResult.PushValidationLocationProperty("items");
                            ignoredResult = ignoredResult.WithResult(isValid: true, "Validation items - ignored because the value is not an array");
                            ignoredResult = ignoredResult.PopLocation();
                            return ignoredResult;
                        }

                        return validationContext;
                    }

                    int length = 0;
                    using JsonArrayEnumerator<Corvus.Json.JsonString> arrayEnumerator = value.EnumerateArray();
                    while (arrayEnumerator.MoveNext())
                    {
                        if (level > ValidationLevel.Basic)
                        {
                            result = result.PushDocumentArrayIndex(length);
                        }
                        if (level > ValidationLevel.Basic)
                        {
                            result = result.PushValidationLocationReducedPathModifier(new("#/items"));
                        }

                        result = arrayEnumerator.Current.Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        if (level > ValidationLevel.Basic)
                        {
                            result = result.PopLocation();
                        }

                        result = result.WithLocalItemIndex(length);
                        if (level > ValidationLevel.Basic)
                        {
                            result = result.PopLocation();
                        }

                        length++;
                    }

                    return result;
                }
            }
        }
    }
}
