//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace Corvus.Json.JsonSchema.OpenApi30;

/// <summary>
/// Generated from JSON Schema.
/// </summary>
/// <remarks>
/// <para>
/// The description of OpenAPI v3.0.x documents, as defined by https://spec.openapis.org/oas/v3.0.3
/// </para>
/// </remarks>
public readonly partial struct OpenApiDocument
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Parameter location
    /// </para>
    /// </remarks>
    public readonly partial struct ParameterLocation
    {
        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext;
            if (level > ValidationLevel.Flag)
            {
                result = result.UsingResults();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.UsingStack();
                result = result.PushSchemaLocation("https://spec.openapis.org/oas/3.0/schema/2021-09-28#/definitions/ParameterLocation");
            }

            result = CorvusValidation.CompositionOneOfValidationHandler(this, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            return result;
        }

        private static partial class CorvusValidation
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public static ValidationContext CompositionOneOfValidationHandler(
                in ParameterLocation value,
                in ValidationContext validationContext,
                ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext;
                result = ValidateOneOf(value, result, level);
                if (!result.IsValid && level == ValidationLevel.Flag)
                {
                    return result;
                }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                static ValidationContext ValidateOneOf(in ParameterLocation value, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    int oneOfFoundValid = 0;
                    ValidationContext oneOfChildContext0 = validationContext.CreateChildContext();
                    if (level > ValidationLevel.Basic)
                    {
                        oneOfChildContext0 = oneOfChildContext0.PushValidationLocationReducedPathModifier(new("#/oneOf/0"));
                    }

                    ValidationContext oneOfResult0 = value.As<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.ParameterLocation.ParameterInPath>().Validate(oneOfChildContext0, level);
                    if (oneOfResult0.IsValid)
                    {
                        result = result.MergeChildContext(oneOfResult0, level >= ValidationLevel.Verbose);
                        oneOfFoundValid++;
                    }
                    else
                    {
                        if (level >= ValidationLevel.Verbose)
                        {
                            result = result.MergeResults(result.IsValid, level, oneOfResult0);
                        }
                    }

                    ValidationContext oneOfChildContext1 = validationContext.CreateChildContext();
                    if (level > ValidationLevel.Basic)
                    {
                        oneOfChildContext1 = oneOfChildContext1.PushValidationLocationReducedPathModifier(new("#/oneOf/1"));
                    }

                    ValidationContext oneOfResult1 = value.As<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.ParameterLocation.ParameterInQuery>().Validate(oneOfChildContext1, level);
                    if (oneOfResult1.IsValid)
                    {
                        result = result.MergeChildContext(oneOfResult1, level >= ValidationLevel.Verbose);
                        oneOfFoundValid++;
                    }
                    else
                    {
                        if (level >= ValidationLevel.Verbose)
                        {
                            result = result.MergeResults(result.IsValid, level, oneOfResult1);
                        }
                    }

                    ValidationContext oneOfChildContext2 = validationContext.CreateChildContext();
                    if (level > ValidationLevel.Basic)
                    {
                        oneOfChildContext2 = oneOfChildContext2.PushValidationLocationReducedPathModifier(new("#/oneOf/2"));
                    }

                    ValidationContext oneOfResult2 = value.As<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.ParameterLocation.ParameterInHeader>().Validate(oneOfChildContext2, level);
                    if (oneOfResult2.IsValid)
                    {
                        result = result.MergeChildContext(oneOfResult2, level >= ValidationLevel.Verbose);
                        oneOfFoundValid++;
                    }
                    else
                    {
                        if (level >= ValidationLevel.Verbose)
                        {
                            result = result.MergeResults(result.IsValid, level, oneOfResult2);
                        }
                    }

                    ValidationContext oneOfChildContext3 = validationContext.CreateChildContext();
                    if (level > ValidationLevel.Basic)
                    {
                        oneOfChildContext3 = oneOfChildContext3.PushValidationLocationReducedPathModifier(new("#/oneOf/3"));
                    }

                    ValidationContext oneOfResult3 = value.As<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.ParameterLocation.ParameterInCookie>().Validate(oneOfChildContext3, level);
                    if (oneOfResult3.IsValid)
                    {
                        result = result.MergeChildContext(oneOfResult3, level >= ValidationLevel.Verbose);
                        oneOfFoundValid++;
                    }
                    else
                    {
                        if (level >= ValidationLevel.Verbose)
                        {
                            result = result.MergeResults(result.IsValid, level, oneOfResult3);
                        }
                    }

                    if (level >= ValidationLevel.Basic)
                    {
                        result.PushValidationLocationProperty("oneOf");
                    }

                    if (oneOfFoundValid == 1)
                    {
                        if (level >= ValidationLevel.Verbose)
                        {
                            result = result.WithResult(isValid: true, "Validation oneOf - validated against the schema.");
                        }
                    }
                    else if (oneOfFoundValid > 1)
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "Validation oneOf - validated against more than 1 of the schema.");
                        }
                        else
                        {
                            result = result.WithResult(isValid: false);
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "Validation oneOf - did not validate against any of the schema.");
                        }
                        else
                        {
                            result = result.WithResult(isValid: false);
                        }
                    }

                    if (level >= ValidationLevel.Basic)
                    {
                        result.PopLocation();
                    }

                    return result;
                }

                return result;
            }
        }
    }
}
