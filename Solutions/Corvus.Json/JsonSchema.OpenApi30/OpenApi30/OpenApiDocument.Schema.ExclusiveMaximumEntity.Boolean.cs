//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Diagnostics.CodeAnalysis;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.JsonSchema.OpenApi30;

/// <summary>
/// Generated from JSON Schema.
/// </summary>
/// <remarks>
/// <para>
/// The description of OpenAPI v3.0.x documents, as defined by https://spec.openapis.org/oas/v3.0.3
/// </para>
/// </remarks>
public readonly partial struct OpenApiDocument
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct Schema
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Examples:
        /// <example>
        /// <code>
        /// false
        /// </code>
        /// </example>
        /// </para>
        /// </remarks>
        public readonly partial struct ExclusiveMaximumEntity
            : IJsonBoolean<Corvus.Json.JsonSchema.OpenApi30.OpenApiDocument.Schema.ExclusiveMaximumEntity>
        {
            /// <summary>
            /// Conversion from <see cref="bool"/>.
            /// </summary>
            /// <param name="value">The value from which to convert.</param>
            public static implicit operator ExclusiveMaximumEntity(bool value)
            {
                return new(value);
            }

            /// <summary>
            /// Conversion from JsonBoolean.
            /// </summary>
            /// <param name="value">The value from which to convert.</param>
            public static implicit operator ExclusiveMaximumEntity(JsonBoolean value)
            {
                if (value.HasDotnetBacking && (value.ValueKind == JsonValueKind.False || value.ValueKind == JsonValueKind.True))
                {
                    return new(
                        (bool)value);
                }

                return new(value.AsJsonElement);
            }

            /// <summary>
            /// Conversion to JsonBoolean.
            /// </summary>
            /// <param name="value">The value from which to convert.</param>
            public static implicit operator JsonBoolean(ExclusiveMaximumEntity value)
            {
                return
                    value.AsBoolean;
            }

            /// <summary>
            /// Conversion to <see langword="bool"/>.
            /// </summary>
            /// <param name="value">The value from which to convert.</param>
            /// <exception cref="InvalidOperationException">The value was not a boolean.</exception>
            public static implicit operator bool(ExclusiveMaximumEntity value)
            {
                return value.GetBoolean() ?? throw new InvalidOperationException();
            }

            /// <summary>
            /// Try to retrieve the value as a boolean.
            /// </summary>
            /// <param name="result"><see langword="true"/> if the value was true, otherwise <see langword="false"/>.</param>
            /// <returns><see langword="true"/> if the value was representable as a boolean, otherwise <see langword="false"/>.</returns>
            public bool TryGetBoolean([NotNullWhen(true)] out bool result)
            {
                switch (this.ValueKind)
                {
                    case JsonValueKind.True:
                        result = true;
                        return true;
                    case JsonValueKind.False:
                        result = false;
                        return true;
                    default:
                        result = default;
                        return false;
                }
            }

            /// <summary>
            /// Get the value as a boolean.
            /// </summary>
            /// <returns>The value of the boolean, or <see langword="null"/> if the value was not representable as a boolean.</returns>
            public bool? GetBoolean()
            {
                if (this.TryGetBoolean(out bool result))
                {
                    return result;
                }

                return null;
            }
        }
    }
}
