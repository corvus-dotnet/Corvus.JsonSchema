//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace Feature408;
/// <summary>
/// Document extensions
/// </summary>
public readonly partial struct DocumentExtensionsSchema
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct ExtendedSizeEntity
    {
        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext;
            if (level > ValidationLevel.Flag)
            {
                result = result.UsingResults();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.UsingStack();
                result = result.PushSchemaLocation("DocumentExtensionsSchema.json#/properties/extendedSize");
            }

            JsonValueKind valueKind = this.ValueKind;
            result = CorvusValidation.TypeValidationHandler(this, valueKind, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            result = CorvusValidation.CompositionAnyOfValidationHandler(this, result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            return result;
        }

        /// <summary>
        /// Constant values for the enum keyword.
        /// </summary>
        public static class EnumValues
        {
            /// <summary>
            /// Gets the string ''
            /// as a <see cref="Feature408.DocumentExtensionsSchema.ExtendedSizeEntity"/>.
            /// </summary>
            public static ExtendedSizeEntity Empty { get; } = CorvusValidation.Enum1.As<ExtendedSizeEntity>();

            /// <summary>
            /// Gets the string ''
            /// as a UTF8 byte array.
            /// </summary>
            public static ReadOnlySpan<byte> EmptyUtf8 => CorvusValidation.Enum1Utf8;

            /// <summary>
            /// Gets the number '1'
            /// as a <see cref="Feature408.DocumentExtensionsSchema.ExtendedSizeEntity"/>.
            /// </summary>
            public static ExtendedSizeEntity Item2 { get; } = new(CorvusValidation.Enum2);

            /// <summary>
            /// Gets the number '2'
            /// as a <see cref="Feature408.DocumentExtensionsSchema.ExtendedSizeEntity"/>.
            /// </summary>
            public static ExtendedSizeEntity Item3 { get; } = new(CorvusValidation.Enum3);

            /// <summary>
            /// Gets the number '3'
            /// as a <see cref="Feature408.DocumentExtensionsSchema.ExtendedSizeEntity"/>.
            /// </summary>
            public static ExtendedSizeEntity Item4 { get; } = new(CorvusValidation.Enum4);

            /// <summary>
            /// Gets the string '1'
            /// as a <see cref="Feature408.DocumentExtensionsSchema.ExtendedSizeEntity"/>.
            /// </summary>
            public static ExtendedSizeEntity V1 { get; } = CorvusValidation.Enum5.As<ExtendedSizeEntity>();

            /// <summary>
            /// Gets the string '1'
            /// as a UTF8 byte array.
            /// </summary>
            public static ReadOnlySpan<byte> V1Utf8 => CorvusValidation.Enum5Utf8;

            /// <summary>
            /// Gets the string '2'
            /// as a <see cref="Feature408.DocumentExtensionsSchema.ExtendedSizeEntity"/>.
            /// </summary>
            public static ExtendedSizeEntity V2 { get; } = CorvusValidation.Enum6.As<ExtendedSizeEntity>();

            /// <summary>
            /// Gets the string '2'
            /// as a UTF8 byte array.
            /// </summary>
            public static ReadOnlySpan<byte> V2Utf8 => CorvusValidation.Enum6Utf8;

            /// <summary>
            /// Gets the string '3'
            /// as a <see cref="Feature408.DocumentExtensionsSchema.ExtendedSizeEntity"/>.
            /// </summary>
            public static ExtendedSizeEntity V3 { get; } = CorvusValidation.Enum7.As<ExtendedSizeEntity>();

            /// <summary>
            /// Gets the string '3'
            /// as a UTF8 byte array.
            /// </summary>
            public static ReadOnlySpan<byte> V3Utf8 => CorvusValidation.Enum7Utf8;
        }

        /// <summary>
        /// Validation constants for the type.
        /// </summary>
        public static partial class CorvusValidation
        {
            /// <summary>
            /// A constant for the <c>enum</c> keyword.
            /// </summary>
            public static readonly JsonString Enum1 = JsonString.ParseValue("\"\"");
            /// <summary>
            /// A constant for the <c>enum</c> keyword.
            /// </summary>
            public static readonly BinaryJsonNumber Enum2 = new(1);
            /// <summary>
            /// A constant for the <c>enum</c> keyword.
            /// </summary>
            public static readonly BinaryJsonNumber Enum3 = new(2);
            /// <summary>
            /// A constant for the <c>enum</c> keyword.
            /// </summary>
            public static readonly BinaryJsonNumber Enum4 = new(3);
            /// <summary>
            /// A constant for the <c>enum</c> keyword.
            /// </summary>
            public static readonly JsonString Enum5 = JsonString.ParseValue("\"1\"");
            /// <summary>
            /// A constant for the <c>enum</c> keyword.
            /// </summary>
            public static readonly JsonString Enum6 = JsonString.ParseValue("\"2\"");
            /// <summary>
            /// A constant for the <c>enum</c> keyword.
            /// </summary>
            public static readonly JsonString Enum7 = JsonString.ParseValue("\"3\"");

            /// <summary>
            /// A constant for the <c>enum</c> keyword.
            /// </summary>
            public static ReadOnlySpan<byte> Enum1Utf8 => "\"\""u8;
            /// <summary>
            /// A constant for the <c>enum</c> keyword.
            /// </summary>
            public static ReadOnlySpan<byte> Enum5Utf8 => "\"1\""u8;
            /// <summary>
            /// A constant for the <c>enum</c> keyword.
            /// </summary>
            public static ReadOnlySpan<byte> Enum6Utf8 => "\"2\""u8;
            /// <summary>
            /// A constant for the <c>enum</c> keyword.
            /// </summary>
            public static ReadOnlySpan<byte> Enum7Utf8 => "\"3\""u8;

            /// <summary>
            /// Core type validation.
            /// </summary>
            /// <param name="value">The value to validate.</param>
            /// <param name="valueKind">The <see cref="JsonValueKind" /> of the value to validate.</param>
            /// <param name="validationContext">The current validation context.</param>
            /// <param name="level">The current validation level.</param>
            /// <returns>The resulting validation context after validation.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            internal static ValidationContext TypeValidationHandler(
                in ExtendedSizeEntity value,
                JsonValueKind valueKind,
                in ValidationContext validationContext,
                ValidationLevel level = ValidationLevel.Flag)
            {
                bool isValid = false;
                ValidationContext localResultString = Corvus.Json.ValidateWithoutCoreType.TypeString(valueKind, ValidationContext.ValidContext, level, "type");
                if (level == ValidationLevel.Flag && localResultString.IsValid)
                {
                    return validationContext;
                }

                if (localResultString.IsValid)
                {
                    isValid = true;
                }

                ValidationContext localResultInteger = Corvus.Json.ValidateWithoutCoreType.TypeInteger(value, ValidationContext.ValidContext, level, "type");
                if (level == ValidationLevel.Flag && localResultInteger.IsValid)
                {
                    return validationContext;
                }

                if (localResultInteger.IsValid)
                {
                    isValid = true;
                }

                if (!isValid)
                {
                    if (level >= ValidationLevel.Verbose)
                    {
                        return validationContext.WithResult(isValid: false, $"Validation type - should have been 'string', 'integer' but was {valueKind}", "type");
                    }
                }
                else
                {
                    if (level >= ValidationLevel.Detailed)
                    {
                        return validationContext.WithResult(isValid: false, $"Validation type - should have been 'string', 'integer'.", "type");
                    }
                    else
                    {
                        return validationContext.WithResult(isValid: false);
                    }
                }

                if (level >= ValidationLevel.Verbose)
                {
                    return validationContext.WithResult(isValid: true, $"Validation type - should be 'string', 'integer' but was {valueKind}", "type");
                }
                return validationContext;
            }

            /// <summary>
            /// Composition validation (any-of).
            /// </summary>
            /// <param name="value">The value to validate.</param>
            /// <param name="validationContext">The current validation context.</param>
            /// <param name="level">The current validation level.</param>
            /// <returns>The resulting validation context after validation.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            internal static ValidationContext CompositionAnyOfValidationHandler(
                in ExtendedSizeEntity value,
                in ValidationContext validationContext,
                ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext;
                result = ValidateEnum(value, result, level);
                if (!result.IsValid && level == ValidationLevel.Flag)
                {
                    return result;
                }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                static ValidationContext ValidateEnum(in ExtendedSizeEntity value, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool enumFoundValid = false;
                    enumFoundValid = value.Equals(CorvusValidation.Enum1);
                    if (!enumFoundValid)
                    {
                        enumFoundValid = value.Equals(CorvusValidation.Enum2);
                    }
                    if (!enumFoundValid)
                    {
                        enumFoundValid = value.Equals(CorvusValidation.Enum3);
                    }
                    if (!enumFoundValid)
                    {
                        enumFoundValid = value.Equals(CorvusValidation.Enum4);
                    }
                    if (!enumFoundValid)
                    {
                        enumFoundValid = value.Equals(CorvusValidation.Enum5);
                    }
                    if (!enumFoundValid)
                    {
                        enumFoundValid = value.Equals(CorvusValidation.Enum6);
                    }
                    if (!enumFoundValid)
                    {
                        enumFoundValid = value.Equals(CorvusValidation.Enum7);
                    }

                    if (level >= ValidationLevel.Basic)
                    {
                        result.PushValidationLocationProperty("enum");
                    }

                    if (enumFoundValid)
                    {
                        if (level >= ValidationLevel.Verbose)
                        {
                            result = result.WithResult(isValid: true, "Validation enum - validated against the enumeration.");
                        }
                    }
                    else
                    {
                        if (level >= ValidationLevel.Basic)
                        {
                            result = result.WithResult(isValid: false, "Validation enum - did not validate against the enumeration.");
                        }
                        else
                        {
                            result = result.WithResult(isValid: false);
                        }
                    }

                    if (level >= ValidationLevel.Basic)
                    {
                        result.PopLocation();
                    }

                    return result;
                }

                return result;
            }
        }
    }
}
