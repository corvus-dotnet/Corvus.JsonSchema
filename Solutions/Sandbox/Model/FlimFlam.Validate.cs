//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace JsonSchemaSample.Api;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
public readonly partial struct FlimFlam
{
    /// <inheritdoc/>
    public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
    {
        ValidationContext result = validationContext;
        if (level > ValidationLevel.Flag)
        {
            result = result.UsingResults();
        }

        if (level > ValidationLevel.Basic)
        {
            result = result.UsingStack();
            result = result.PushSchemaLocation("");
        }

        JsonValueKind valueKind = this.ValueKind;
        result = result.UsingEvaluatedItems();
        result = CorvusValidation.TypeValidationHandler(valueKind, result, level);
        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }

        result = CorvusValidation.ArrayValidationHandler(this, valueKind, result, level);
        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }

        if (level > ValidationLevel.Basic)
        {
            result = result.PopLocation();
        }

        return result;
    }

    /// <summary>
    /// Validation constants for the type.
    /// </summary>
    public static partial class CorvusValidation
    {
        /// <summary>
        /// Core type validation.
        /// </summary>
        /// <param name="valueKind">The <see cref="JsonValueKind" /> of the value to validate.</param>
        /// <param name="validationContext">The current validation context.</param>
        /// <param name="level">The current validation level.</param>
        /// <returns>The resulting validation context after validation.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static ValidationContext TypeValidationHandler(
            JsonValueKind valueKind,
            in ValidationContext validationContext,
            ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext;
            return Corvus.Json.ValidateWithoutCoreType.TypeArray(valueKind, result, level);
        }

        /// <summary>
        /// Array validation.
        /// </summary>
        /// <param name="value">The value to validate.</param>
        /// <param name="valueKind">The <see cref="JsonValueKind" /> of the value to validate.</param>
        /// <param name="validationContext">The current validation context.</param>
        /// <param name="level">The current validation level.</param>
        /// <returns>The resulting validation context after validation.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static ValidationContext ArrayValidationHandler(
            in FlimFlam value,
            JsonValueKind valueKind,
            in ValidationContext validationContext,
            ValidationLevel level)
        {
            ValidationContext result = validationContext;
            if (valueKind != JsonValueKind.Array)
            {
                if (level == ValidationLevel.Verbose)
                {
                    ValidationContext ignoredResult = validationContext;
                    ignoredResult = ignoredResult.PushValidationLocationProperty("prefixItems");
                    ignoredResult = ignoredResult.WithResult(isValid: true, "Validation prefixItems - ignored because the value is not an array");
                    ignoredResult = ignoredResult.PopLocation();
                    ignoredResult = ignoredResult.PushValidationLocationProperty("unevaluatedItems");
                    ignoredResult = ignoredResult.WithResult(isValid: true, "Validation unevaluatedItems - ignored because the value is not an array");
                    ignoredResult = ignoredResult.PopLocation();
                    return ignoredResult;
                }

                return validationContext;
            }

            int length = 0;
            using JsonArrayEnumerator<Corvus.Json.JsonNotAny> arrayEnumerator = value.EnumerateArray();
            while (arrayEnumerator.MoveNext())
            {
                if (level > ValidationLevel.Basic)
                {
                    result = result.PushDocumentArrayIndex(length);
                }

                switch (length)
                {
                    case 0:
                        if (level > ValidationLevel.Basic)
                        {
                            result = result.PushValidationLocationReducedPathModifier(new("#/prefixItems/0"));
                        }

                        result = arrayEnumerator.Current.As<JsonSchemaSample.Api.FlimFlam.PositiveInt32>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        if (level > ValidationLevel.Basic)
                        {
                            result = result.PopLocation();
                        }

                        result = result.WithLocalItemIndex(length);
                        break;
                    case 1:
                        if (level > ValidationLevel.Basic)
                        {
                            result = result.PushValidationLocationReducedPathModifier(new("#/prefixItems/1"));
                        }

                        result = arrayEnumerator.Current.As<Corvus.Json.JsonString>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        if (level > ValidationLevel.Basic)
                        {
                            result = result.PopLocation();
                        }

                        result = result.WithLocalItemIndex(length);
                        break;
                    case 2:
                        if (level > ValidationLevel.Basic)
                        {
                            result = result.PushValidationLocationReducedPathModifier(new("#/prefixItems/2"));
                        }

                        result = arrayEnumerator.Current.As<Corvus.Json.JsonDateTime>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        if (level > ValidationLevel.Basic)
                        {
                            result = result.PopLocation();
                        }

                        result = result.WithLocalItemIndex(length);
                        break;
                    default:
                        if (!result.HasEvaluatedLocalOrAppliedItemIndex(length))
                        {
                            if (level > ValidationLevel.Basic)
                            {
                                result = result.PushValidationLocationReducedPathModifier(new("#/unevaluatedItems"));
                            }

                            result = arrayEnumerator.Current.Validate(result, level);
                            if (level == ValidationLevel.Flag && !result.IsValid)
                            {
                                return result;
                            }

                            if (level > ValidationLevel.Basic)
                            {
                                result = result.PopLocation();
                            }

                            result = result.WithLocalItemIndex(length);
                        }
                        break;
                }

                if (level > ValidationLevel.Basic)
                {
                    result = result.PopLocation();
                }

                length++;
            }

            return result;
        }
    }
}
