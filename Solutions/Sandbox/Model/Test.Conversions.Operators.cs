//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace JsonSchemaSample.Api;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
public readonly partial struct Test
{
    /// <summary>
    /// Conversion to <see cref = "JsonSchemaSample.Api.Test.Base"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator JsonSchemaSample.Api.Test.Base(Test value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Number) != 0)
        {
            return new(value.numberBacking);
        }

        return JsonSchemaSample.Api.Test.Base.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "JsonSchemaSample.Api.Test.Base"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator Test(JsonSchemaSample.Api.Test.Base value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Number => new(value.AsBinaryJsonNumber),
            _ => Undefined
        };
    }
}