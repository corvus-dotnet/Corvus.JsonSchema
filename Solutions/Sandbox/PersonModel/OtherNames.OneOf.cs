//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.Benchmarking.Models;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
/// <remarks>
/// <para>
/// A person's other (middle) names.
/// </para>
/// <para>
/// This may be either a single name represented as a string, or an array of strings, representing one or more other names.
/// </para>
/// </remarks>
public readonly partial struct OtherNames
{
    /// <summary>
    /// Matches the value against each of the any of values, and returns the result of calling the provided match function for the first match found.
    /// </summary>
    /// <param name = "context">The context to pass to the match function.</param>
    /// <param name = "match0">The function to call if the value matches the <see cref = "Corvus.Json.Benchmarking.Models.PersonNameElement"/> type.</param>
    /// <param name = "match1">The function to call if the value matches the <see cref = "Corvus.Json.Benchmarking.Models.PersonNameElementArray"/> type.</param>
    /// <param name = "defaultMatch">The fallback match.</param>
    public TOut Match<TIn, TOut>(in TIn context, Matcher<Corvus.Json.Benchmarking.Models.PersonNameElement, TIn, TOut> match0, Matcher<Corvus.Json.Benchmarking.Models.PersonNameElementArray, TIn, TOut> match1, Matcher<OtherNames, TIn, TOut> defaultMatch)
    {
        var oneOf0 = this.As<Corvus.Json.Benchmarking.Models.PersonNameElement>();
        if (oneOf0.IsValid())
        {
            return match0(oneOf0, context);
        }

        var oneOf1 = this.As<Corvus.Json.Benchmarking.Models.PersonNameElementArray>();
        if (oneOf1.IsValid())
        {
            return match1(oneOf1, context);
        }

        return defaultMatch(this, context);
    }

    /// <summary>
    /// Matches the value against each of the any of values, and returns the result of calling the provided match function for the first match found.
    /// </summary>
    /// <param name = "match0">The function to call if the value matches the <see cref = "Corvus.Json.Benchmarking.Models.PersonNameElement"/> type.</param>
    /// <param name = "match1">The function to call if the value matches the <see cref = "Corvus.Json.Benchmarking.Models.PersonNameElementArray"/> type.</param>
    /// <param name = "defaultMatch">The fallback match.</param>
    public TOut Match<TOut>(Matcher<Corvus.Json.Benchmarking.Models.PersonNameElement, TOut> match0, Matcher<Corvus.Json.Benchmarking.Models.PersonNameElementArray, TOut> match1, Matcher<OtherNames, TOut> defaultMatch)
    {
        var oneOf0 = this.As<Corvus.Json.Benchmarking.Models.PersonNameElement>();
        if (oneOf0.IsValid())
        {
            return match0(oneOf0);
        }

        var oneOf1 = this.As<Corvus.Json.Benchmarking.Models.PersonNameElementArray>();
        if (oneOf1.IsValid())
        {
            return match1(oneOf1);
        }

        return defaultMatch(this);
    }
}