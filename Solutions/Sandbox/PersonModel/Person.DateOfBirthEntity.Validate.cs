//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace Sandbox.Models;

/// <summary>
/// Generated from JSON Schema.
/// </summary>
public readonly partial struct Person
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct DateOfBirthEntity
    {
        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext;
            if (level > ValidationLevel.Flag)
            {
                result = result.UsingResults();
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.UsingStack();
                result = result.PushSchemaLocation("#/$defs/Person/properties/dateOfBirth");
            }

            JsonValueKind valueKind = this.ValueKind;

            result = CorvusValidation.TypeValidationHandler(valueKind, result, level);

            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            result = CorvusValidation.FormatValidationHandler(this, valueKind, result, level);

            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            return result;
        }

        /// <summary>
        /// Validation constants for the type.
        /// </summary>
        public static partial class CorvusValidation
        {
            /// <summary>
            /// Core type validation.
            /// </summary>
            /// <param name="valueKind">The <see cref="JsonValueKind" /> of the value to validate.</param>
            /// <param name="validationContext">The current validation context.</param>
            /// <param name="level">The current validation level.</param>
            /// <returns>The resulting validation context after validation.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            internal static ValidationContext TypeValidationHandler(
                JsonValueKind valueKind,
                in ValidationContext validationContext,
                ValidationLevel level = ValidationLevel.Flag)
            {
                bool isValid = false;

                ValidationContext localResultString = Corvus.Json.ValidateWithoutCoreType.TypeString(valueKind, ValidationContext.ValidContext, level, "type");
                if (level == ValidationLevel.Flag && localResultString.IsValid)
                {
                    return validationContext;
                }

                if (localResultString.IsValid)
                {
                    isValid = true;
                }

                ValidationContext localResultNull = Corvus.Json.ValidateWithoutCoreType.TypeNull(valueKind, ValidationContext.ValidContext, level, "type");
                if (level == ValidationLevel.Flag && localResultNull.IsValid)
                {
                    return validationContext;
                }

                if (localResultNull.IsValid)
                {
                    isValid = true;
                }

                if (!isValid)
                {
                    if (level >= ValidationLevel.Verbose)
                    {
                        return validationContext.WithResult(isValid: false, $"Validation type - should have been 'string', 'null' but was '{valueKind}'", "type");
                    }
                    else if (level >= ValidationLevel.Detailed)
                    {
                        return validationContext.WithResult(isValid: false, "Validation type - should have been 'string', 'null'.", "type");
                    }
                    else
                    {
                        return validationContext.WithResult(isValid: false);
                    }
                }

                if (level >= ValidationLevel.Verbose)
                {
                    return validationContext.WithResult(isValid: true, $"Validation type - was 'string', 'null'.", "type");
                }
                return validationContext;
            }

            /// <summary>
            /// Numeric and string format validation.
            /// </summary>
            /// <param name="value">The value to validate.</param>
            /// <param name="valueKind">The <see cref="JsonValueKind" /> of the value to validate.</param>
            /// <param name="validationContext">The current validation context.</param>
            /// <param name="level">The current validation level.</param>
            /// <returns>The resulting validation context after validation.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            internal static ValidationContext FormatValidationHandler(
                in DateOfBirthEntity value,
                JsonValueKind valueKind,
                in ValidationContext validationContext,
                ValidationLevel level = ValidationLevel.Flag)
            {
                if (valueKind != JsonValueKind.String)
                {
                    if (level == ValidationLevel.Verbose)
                    {
                        ValidationContext ignoredResult = validationContext;
                        ignoredResult = ignoredResult.WithResult(isValid: true, $"Validation format - ignored 'date' because the value is of kind '{valueKind}' not 'String'.");

                        return ignoredResult;
                    }

                    return validationContext;
                }

                return Corvus.Json.ValidateWithoutCoreType.TypeDate(value, validationContext, level, "format");
            }
        }
    }
}
