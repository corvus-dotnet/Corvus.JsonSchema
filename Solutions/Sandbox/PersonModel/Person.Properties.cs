//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Corvus.Json.Benchmarking.Models;
/// <summary>
/// Represents a person.
/// </summary>
public readonly partial struct Person
{
    /// <summary>
    /// The well-known property names in the JSON object.
    /// </summary>
    public static class JsonPropertyNames
    {
        /// <summary>
        /// JSON property name for <see cref = "DateOfBirth"/>.
        /// </summary>
        public static ReadOnlySpan<byte> DateOfBirthUtf8 => "dateOfBirth"u8;

        /// <summary>
        /// JSON property name for <see cref = "DateOfBirth"/>.
        /// </summary>
        public const string DateOfBirth = "dateOfBirth";
        /// <summary>
        /// JSON property name for <see cref = "Email"/>.
        /// </summary>
        public static ReadOnlySpan<byte> EmailUtf8 => "email"u8;

        /// <summary>
        /// JSON property name for <see cref = "Email"/>.
        /// </summary>
        public const string Email = "email";
        /// <summary>
        /// JSON property name for <see cref = "Height"/>.
        /// </summary>
        public static ReadOnlySpan<byte> HeightUtf8 => "height"u8;

        /// <summary>
        /// JSON property name for <see cref = "Height"/>.
        /// </summary>
        public const string Height = "height";
        /// <summary>
        /// JSON property name for <see cref = "Name"/>.
        /// </summary>
        public static ReadOnlySpan<byte> NameUtf8 => "name"u8;

        /// <summary>
        /// JSON property name for <see cref = "Name"/>.
        /// </summary>
        public const string Name = "name";
        /// <summary>
        /// JSON property name for <see cref = "NetWorth"/>.
        /// </summary>
        public static ReadOnlySpan<byte> NetWorthUtf8 => "netWorth"u8;

        /// <summary>
        /// JSON property name for <see cref = "NetWorth"/>.
        /// </summary>
        public const string NetWorth = "netWorth";
    }

    /// <summary>
    /// Gets the (optional) <c>dateOfBirth</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// A person's date of birth.
    /// </para>
    /// </remarks>
    public Corvus.Json.JsonDate DateOfBirth
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DateOfBirthUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonDate(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.DateOfBirth, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDate>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>email</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// A person's email address.
    /// </para>
    /// </remarks>
    public Corvus.Json.JsonEmail Email
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.EmailUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonEmail(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Email, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonEmail>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>height</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// A person's height in meters.
    /// </para>
    /// </remarks>
    public Corvus.Json.Benchmarking.Models.HeightRangeDouble Height
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.HeightUtf8, out JsonElement result))
                {
                    return new Corvus.Json.Benchmarking.Models.HeightRangeDouble(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Height, out JsonAny result))
                {
                    return result.As<Corvus.Json.Benchmarking.Models.HeightRangeDouble>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>name</c> property. If the instance is valid, this property will be not be <c>undefined</c>.
    /// </summary>
    /// <remarks>
    /// <para>
    /// A person's name.
    /// </para>
    /// </remarks>
    public Corvus.Json.Benchmarking.Models.PersonName Name
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.NameUtf8, out JsonElement result))
                {
                    return new Corvus.Json.Benchmarking.Models.PersonName(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Name, out JsonAny result))
                {
                    return result.As<Corvus.Json.Benchmarking.Models.PersonName>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the (optional) <c>netWorth</c> property.
    /// </summary>
    /// <remarks>
    /// <para>
    /// A person's net worth, in the local currency.
    /// </para>
    /// </remarks>
    public Corvus.Json.JsonDecimal NetWorth
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.NetWorthUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonDecimal(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.NetWorth, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDecimal>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "Person"/>.
    /// </summary>
    public static Person Create(Corvus.Json.Benchmarking.Models.PersonName name, Corvus.Json.JsonDate? dateOfBirth = null, Corvus.Json.JsonEmail? email = null, Corvus.Json.Benchmarking.Models.HeightRangeDouble? height = null, Corvus.Json.JsonDecimal? netWorth = null)
    {
        var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
        builder.Add(JsonPropertyNames.Name, name.AsAny);
        if (dateOfBirth is Corvus.Json.JsonDate dateOfBirth__)
        {
            builder.Add(JsonPropertyNames.DateOfBirth, dateOfBirth__.AsAny);
        }

        if (email is Corvus.Json.JsonEmail email__)
        {
            builder.Add(JsonPropertyNames.Email, email__.AsAny);
        }

        if (height is Corvus.Json.Benchmarking.Models.HeightRangeDouble height__)
        {
            builder.Add(JsonPropertyNames.Height, height__.AsAny);
        }

        if (netWorth is Corvus.Json.JsonDecimal netWorth__)
        {
            builder.Add(JsonPropertyNames.NetWorth, netWorth__.AsAny);
        }

        return new(builder.ToImmutable());
    }

    /// <summary>
    /// Sets dateOfBirth.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Person WithDateOfBirth(in Corvus.Json.JsonDate value)
    {
        return this.SetProperty(JsonPropertyNames.DateOfBirth, value);
    }

    /// <summary>
    /// Sets email.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Person WithEmail(in Corvus.Json.JsonEmail value)
    {
        return this.SetProperty(JsonPropertyNames.Email, value);
    }

    /// <summary>
    /// Sets height.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Person WithHeight(in Corvus.Json.Benchmarking.Models.HeightRangeDouble value)
    {
        return this.SetProperty(JsonPropertyNames.Height, value);
    }

    /// <summary>
    /// Sets name.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Person WithName(in Corvus.Json.Benchmarking.Models.PersonName value)
    {
        return this.SetProperty(JsonPropertyNames.Name, value);
    }

    /// <summary>
    /// Sets netWorth.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public Person WithNetWorth(in Corvus.Json.JsonDecimal value)
    {
        return this.SetProperty(JsonPropertyNames.NetWorth, value);
    }

    private static ValidationContext __CorvusValidateName(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.Benchmarking.Models.PersonName>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateDateOfBirth(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDate>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateEmail(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonEmail>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateNetWorth(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDecimal>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateHeight(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.Benchmarking.Models.HeightRangeDouble>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(JsonPropertyNames.NameUtf8))
            {
                propertyValidator = __CorvusValidateName;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.DateOfBirthUtf8))
            {
                propertyValidator = __CorvusValidateDateOfBirth;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.EmailUtf8))
            {
                propertyValidator = __CorvusValidateEmail;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.NetWorthUtf8))
            {
                propertyValidator = __CorvusValidateNetWorth;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.HeightUtf8))
            {
                propertyValidator = __CorvusValidateHeight;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(JsonPropertyNames.Name))
            {
                propertyValidator = __CorvusValidateName;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.DateOfBirth))
            {
                propertyValidator = __CorvusValidateDateOfBirth;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.Email))
            {
                propertyValidator = __CorvusValidateEmail;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.NetWorth))
            {
                propertyValidator = __CorvusValidateNetWorth;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.Height))
            {
                propertyValidator = __CorvusValidateHeight;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}