//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Text.Json;
using Corvus.Json;

namespace Corvus.Json.Benchmarking.Models;
/// <summary>
/// A name of a person.
/// </summary>
/// <remarks>
/// <para>
/// This supports the full range of names, including those with multiple parts, prefixes, and suffixes.
/// </para>
/// <para>
/// It is not restricted to a single part, such as a given name or family name.
/// </para>
/// <para>
/// Examples:
/// <example>
/// <code>
/// {"familyName":"Jones","givenName":"Terry"}
/// </code>
/// </example>
/// <example>
/// <code>
/// {"familyName":"Jones","givenName":"Terry","otherNames":["Lee","Gary"]}
/// </code>
/// </example>
/// <example>
/// <code>
/// {"familyName":"Jones","givenName":"Terry","otherNames":"Lee"}
/// </code>
/// </example>
/// </para>
/// </remarks>
public readonly partial struct PersonName
{
    private ValidationContext ValidateType(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
    {
        ValidationContext result = validationContext;
        bool isValid = false;
        ValidationContext localResultObject = Corvus.Json.Validate.TypeObject(valueKind, result.CreateChildContext(), level);
        if (level == ValidationLevel.Flag && localResultObject.IsValid)
        {
            return validationContext;
        }

        if (localResultObject.IsValid)
        {
            isValid = true;
        }

        result = result.MergeResults(isValid, level, localResultObject);
        return result;
    }
}