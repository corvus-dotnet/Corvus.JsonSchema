//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Text.Json;
using Corvus.Json;

namespace Corvus.Json.Benchmarking.Models;
/// <summary>
/// A name of a person.
/// </summary>
/// <remarks>
/// <para>
/// This supports the full range of names, including those with multiple parts, prefixes, and suffixes.
/// </para>
/// <para>
/// It is not restricted to a single part, such as a given name or family name.
/// </para>
/// <para>
/// Examples:
/// <example>
/// <code>
/// {"familyName":"Jones","givenName":"Terry"}
/// </code>
/// </example>
/// <example>
/// <code>
/// {"familyName":"Jones","givenName":"Terry","otherNames":["Lee","Gary"]}
/// </code>
/// </example>
/// <example>
/// <code>
/// {"familyName":"Jones","givenName":"Terry","otherNames":"Lee"}
/// </code>
/// </example>
/// </para>
/// </remarks>
public readonly partial struct PersonName
{
    /// <inheritdoc/>
    public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
    {
        ValidationContext result = validationContext;
        if (level > ValidationLevel.Flag)
        {
            result = result.UsingResults();
        }

        if (level > ValidationLevel.Basic)
        {
            result = result.UsingStack();
            result = result.PushSchemaLocation("person-schema.json#/$defs/PersonName");
        }

        JsonValueKind valueKind = this.ValueKind;
        result = this.ValidateType(valueKind, result, level);
        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }

        result = this.ValidateObject(valueKind, result, level);
        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }

        if (level != ValidationLevel.Flag)
        {
            result = result.PopLocation();
        }

        return result;
    }
}