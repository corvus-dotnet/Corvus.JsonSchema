//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Buffers;
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace JsonSchemaSample.Api;

/// <summary>
/// Generated from JSON Schema.
/// </summary>
[System.Text.Json.Serialization.JsonConverter(typeof(Corvus.Json.Internal.JsonValueConverter<OtherNames>))]
public readonly partial struct OtherNames
    : IJsonValue<JsonSchemaSample.Api.OtherNames>
{
    private readonly Backing backing;
    private readonly JsonElement jsonElementBacking;
    private readonly string stringBacking;
    private readonly ImmutableList<JsonAny> arrayBacking;

    /// <summary>
    /// Initializes a new instance of the <see cref="OtherNames"/> struct.
    /// </summary>
    public OtherNames()
    {
        this.jsonElementBacking = default;
        this.backing = Backing.JsonElement;
        this.stringBacking = string.Empty;
        this.arrayBacking = ImmutableList<JsonAny>.Empty;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="OtherNames"/> struct.
    /// </summary>
    /// <param name="value">The value from which to construct the instance.</param>
    public OtherNames(in JsonElement value)
    {
        this.jsonElementBacking = value;
        this.backing = Backing.JsonElement;
        this.stringBacking = string.Empty;
        this.arrayBacking = ImmutableList<JsonAny>.Empty;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="OtherNames"/> struct.
    /// </summary>
    /// <param name="value">The value from which to construct the instance.</param>
    public OtherNames(ImmutableList<JsonAny> value)
    {
        this.backing = Backing.Array;
        this.jsonElementBacking = default;
        this.stringBacking = string.Empty;
        this.arrayBacking = value;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="OtherNames"/> struct.
    /// </summary>
    /// <param name="value">The value from which to construct the instance.</param>
    public OtherNames(string value)
    {
        this.backing = Backing.String;
        this.jsonElementBacking = default;
        this.stringBacking = value;
        this.arrayBacking = ImmutableList<JsonAny>.Empty;
    }

    /// <summary>
    /// Gets the schema location from which this type was generated.
    /// </summary>
    public static string SchemaLocation { get; } = "#/$defs/OtherNames";

    /// <summary>
    /// Gets a Null instance.
    /// </summary>
    public static OtherNames Null { get; } = new(JsonValueHelpers.NullElement);

    /// <summary>
    /// Gets an Undefined instance.
    /// </summary>
    public static OtherNames Undefined { get; }

    /// <summary>
    /// Gets the default instance.
    /// </summary>
    public static OtherNames DefaultInstance { get; }

    /// <inheritdoc/>
    public JsonAny AsAny
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            if ((this.backing & Backing.String) != 0)
            {
                return new(this.stringBacking);
            }

            if ((this.backing & Backing.Array) != 0)
            {
                return new(this.arrayBacking);
            }

            if ((this.backing & Backing.Null) != 0)
            {
                return JsonAny.Null;
            }

            return JsonAny.Undefined;
        }
    }

    /// <inheritdoc/>
    public JsonElement AsJsonElement
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return this.jsonElementBacking;
            }

            if ((this.backing & Backing.String) != 0)
            {
                return JsonValueHelpers.StringToJsonElement(this.stringBacking);
            }

            if ((this.backing & Backing.Array) != 0)
            {
                return JsonValueHelpers.ArrayToJsonElement(this.arrayBacking);
            }

            if ((this.backing & Backing.Null) != 0)
            {
                return JsonValueHelpers.NullElement;
            }

            return default;
        }
    }

    /// <inheritdoc/>
    public JsonString AsString
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            if ((this.backing & Backing.String) != 0)
            {
                return new(this.stringBacking);
            }

            throw new InvalidOperationException();
        }
    }

    /// <inheritdoc/>
    JsonBoolean IJsonValue.AsBoolean
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            throw new InvalidOperationException();
        }
    }

    /// <inheritdoc/>
    JsonNumber IJsonValue.AsNumber
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            throw new InvalidOperationException();
        }
    }

    /// <inheritdoc/>
    JsonObject IJsonValue.AsObject
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            throw new InvalidOperationException();
        }
    }

    /// <inheritdoc/>
    public JsonArray AsArray
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return new(this.jsonElementBacking);
            }

            if ((this.backing & Backing.Array) != 0)
            {
                return new(this.arrayBacking);
            }

            throw new InvalidOperationException();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="JsonSchemaSample.Api.PersonNameElement" />.
    /// </summary>
    public JsonSchemaSample.Api.PersonNameElement AsPersonNameElement
    {
        get
        {
            return this.As<JsonSchemaSample.Api.PersonNameElement>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="JsonSchemaSample.Api.PersonNameElement" />.
    /// </summary>
    public bool IsPersonNameElement
    {
        get
        {
            return this.As<JsonSchemaSample.Api.PersonNameElement>().IsValid();
        }
    }

    /// <summary>
    /// Gets the instance as a <see cref="JsonSchemaSample.Api.PersonNameElementArray" />.
    /// </summary>
    public JsonSchemaSample.Api.PersonNameElementArray AsPersonNameElementArray
    {
        get
        {
            return this.As<JsonSchemaSample.Api.PersonNameElementArray>();
        }
    }

    /// <summary>
    /// Gets a value indicating whether the instance is a <see cref="JsonSchemaSample.Api.PersonNameElementArray" />.
    /// </summary>
    public bool IsPersonNameElementArray
    {
        get
        {
            return this.As<JsonSchemaSample.Api.PersonNameElementArray>().IsValid();
        }
    }

    /// <inheritdoc/>
    public bool HasJsonElementBacking
    {
        get
        {
            return (this.backing & Backing.JsonElement) != 0;
        }
    }

    /// <inheritdoc/>
    public bool HasDotnetBacking
    {
        get
        {
            return (this.backing & Backing.Dotnet) != 0;
        }
    }

    /// <inheritdoc/>
    public JsonValueKind ValueKind
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                return this.jsonElementBacking.ValueKind;
            }

            if ((this.backing & Backing.String) != 0)
            {
                return JsonValueKind.String;
            }

            if ((this.backing & Backing.Array) != 0)
            {
                return JsonValueKind.Array;
            }

            return JsonValueKind.Undefined;
        }
    }

    /// <summary>
    /// Conversion from JsonAny.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator OtherNames(JsonAny value)
    {
        return value.As<OtherNames>();
    }

    /// <summary>
    /// Conversion to JsonAny.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator JsonAny(OtherNames value)
    {
        return value.AsAny;
    }

    /// <summary>
    /// Conversion to <see cref="JsonSchemaSample.Api.PersonNameElement"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator JsonSchemaSample.Api.PersonNameElement(OtherNames value)
    {
        return value.As<JsonSchemaSample.Api.PersonNameElement>();
    }

    /// <summary>
    /// Conversion from <see cref="JsonSchemaSample.Api.PersonNameElement"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator OtherNames(JsonSchemaSample.Api.PersonNameElement value)
    {
        return value.As<OtherNames>();
    }

    /// <summary>
    /// Conversion to <see cref="JsonSchemaSample.Api.PersonNameElementArray"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static explicit operator JsonSchemaSample.Api.PersonNameElementArray(OtherNames value)
    {
        return value.As<JsonSchemaSample.Api.PersonNameElementArray>();
    }

    /// <summary>
    /// Conversion from <see cref="JsonSchemaSample.Api.PersonNameElementArray"/>.
    /// </summary>
    /// <param name="value">The value from which to convert.</param>
    public static implicit operator OtherNames(JsonSchemaSample.Api.PersonNameElementArray value)
    {
        return value.As<OtherNames>();
    }

    /// <summary>
    /// Operator ==.
    /// </summary>
    /// <param name="left">The lhs of the operator.</param>
    /// <param name="right">The rhs of the operator.</param>
    /// <returns>
    /// <c>True</c> if the values are equal.
    /// </returns>
    public static bool operator ==(in OtherNames left, in OtherNames right)
    {
        return left.Equals(right);
    }

    /// <summary>
    /// Operator !=.
    /// </summary>
    /// <param name="left">The lhs of the operator.</param>
    /// <param name="right">The rhs of the operator.</param>
    /// <returns>
    /// <c>True</c> if the values are not equal.
    /// </returns>
    public static bool operator !=(in OtherNames left, in OtherNames right)
    {
        return !left.Equals(right);
    }

    /// <summary>
    /// Gets an instance of the JSON value from a <see cref="JsonElement"/> value.
    /// </summary>
    /// <param name="value">The <see cref="JsonElement"/> value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the <see cref="JsonElement"/>.</returns>
    /// <remarks>The returned value will have a <see cref = "IJsonValue.ValueKind"/> of <see cref = "JsonValueKind.Undefined"/> if the
    /// value cannot be constructed from the given instance (e.g. because they have an incompatible .NET backing type).
    /// </remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static OtherNames FromJson(in JsonElement value)
    {
        return new(value);
    }

    /// <summary>
    /// Gets an instance of the JSON value from a <see cref="JsonAny"/> value.
    /// </summary>
    /// <param name="value">The <see cref="JsonAny"/> value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the <see cref="JsonAny"/> value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static OtherNames FromAny(in JsonAny value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.String => new((string)value.AsString),
            JsonValueKind.Array => new(value.AsArray.AsImmutableList()),
            JsonValueKind.Null => Null,
            _ => Undefined,
        };
    }

#if NET8_0_OR_GREATER
    /// <summary>
    /// Gets an instance of the JSON value from the provided value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the provided value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static OtherNames IJsonValue<OtherNames>.FromBoolean<TValue>(in TValue value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return Undefined;
    }
#endif

    /// <summary>
    /// Gets an instance of the JSON value from the provided value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the provided value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static OtherNames FromString<TValue>(in TValue value)
        where TValue : struct, IJsonString<TValue>
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.String => new((string)value.AsString),
            JsonValueKind.Null => Null,
            _ => Undefined,
        };
    }

#if NET8_0_OR_GREATER
    /// <summary>
    /// Gets an instance of the JSON value from the provided value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the provided value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static OtherNames IJsonValue<OtherNames>.FromNumber<TValue>(in TValue value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return Undefined;
    }
#endif

#if NET8_0_OR_GREATER
    /// <summary>
    /// Gets an instance of the JSON value from the provided value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the provided value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    static OtherNames IJsonValue<OtherNames>.FromObject<TValue>(in TValue value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return Undefined;
    }
#endif

    /// <summary>
    /// Gets an instance of the JSON value from the provided value.
    /// </summary>
    /// <typeparam name="TValue">The type of the value.</typeparam>
    /// <param name="value">The value from which to instantiate the instance.</param>
    /// <returns>An instance of this type, initialized from the provided value.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static OtherNames FromArray<TValue>(in TValue value)
        where TValue : struct, IJsonArray<TValue>
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Array => new(value.AsArray.AsImmutableList()),
            JsonValueKind.Null => Null,
            _ => Undefined,
        };
    }

    /// <summary>
    /// Parses the OtherNames.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    public static OtherNames Parse(string source, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(source, options);
        return new(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses the OtherNames.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    public static OtherNames Parse(Stream source, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(source, options);
        return new(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses the OtherNames.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    public static OtherNames Parse(ReadOnlyMemory<byte> source, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(source, options);
        return new(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses the OtherNames.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    public static OtherNames Parse(ReadOnlyMemory<char> source, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(source, options);
        return new(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses the OtherNames.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    /// <param name="options">The (optional) JsonDocumentOptions.</param>
    public static OtherNames Parse(ReadOnlySequence<byte> source, JsonDocumentOptions options = default)
    {
        using var jsonDocument = JsonDocument.Parse(source, options);
        return new(jsonDocument.RootElement.Clone());
    }

    /// <summary>
    /// Parses the OtherNames.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    public static OtherNames ParseValue(ReadOnlySpan<char> source)
    {
#if NET8_0_OR_GREATER
        return IJsonValue<OtherNames>.ParseValue(source);
#else
        return JsonValueHelpers.ParseValue<OtherNames>(source);
#endif
    }

    /// <summary>
    /// Parses the OtherNames.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    public static OtherNames ParseValue(ReadOnlySpan<byte> source)
    {
#if NET8_0_OR_GREATER
        return IJsonValue<OtherNames>.ParseValue(source);
#else
        return JsonValueHelpers.ParseValue<OtherNames>(source);
#endif
    }

    /// <summary>
    /// Parses the OtherNames.
    /// </summary>
    /// <param name="source">The source of the JSON string to parse.</param>
    public static OtherNames ParseValue(ref Utf8JsonReader source)
    {
#if NET8_0_OR_GREATER
        return IJsonValue<OtherNames>.ParseValue(ref source);
#else
        return JsonValueHelpers.ParseValue<OtherNames>(ref source);
#endif
    }

    /// <summary>
    /// Gets the value as an instance of the target value.
    /// </summary>
    /// <typeparam name="TTarget">The type of the target.</typeparam>
    /// <returns>An instance of the target type.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public TTarget As<TTarget>()
        where TTarget : struct, IJsonValue<TTarget>
    {
#if NET8_0_OR_GREATER
        if ((this.backing & Backing.JsonElement) != 0)
        {
            return TTarget.FromJson(this.jsonElementBacking);
        }

        if ((this.backing & Backing.String) != 0)
        {
            return TTarget.FromString(this.AsString);
        }

        if ((this.backing & Backing.Array) != 0)
        {
            return TTarget.FromArray(this.AsArray);
        }

        if ((this.backing & Backing.Null) != 0)
        {
            return TTarget.Null;
        }

        return TTarget.Undefined;
#else
        return this.As<OtherNames, TTarget>();
#endif
    }

    /// <inheritdoc/>
    public override bool Equals(object? obj)
    {
        return
            (obj is IJsonValue jv && this.Equals(jv.AsAny)) ||
            (obj is null && this.IsNull());
    }

    /// <inheritdoc/>
    public bool Equals<T>(in T other)
        where T : struct, IJsonValue<T>
    {
        return JsonValueHelpers.CompareValues(this, other);
    }

    /// <summary>
    /// Equality comparison.
    /// </summary>
    /// <param name="other">The other item with which to compare.</param>
    /// <returns><see langword="true"/> if the values were equal.</returns>
    public bool Equals(in OtherNames other)
    {
        return JsonValueHelpers.CompareValues(this, other);
    }

    /// <inheritdoc/>
    public void WriteTo(Utf8JsonWriter writer)
    {
        if ((this.backing & Backing.JsonElement) != 0)
        {
            if (this.jsonElementBacking.ValueKind != JsonValueKind.Undefined)
            {
                this.jsonElementBacking.WriteTo(writer);
            }

            return;
        }

        if ((this.backing & Backing.Array) != 0)
        {
            JsonValueHelpers.WriteItems(this.arrayBacking, writer);

            return;
        }

        if ((this.backing & Backing.String) != 0)
        {
            writer.WriteStringValue(this.stringBacking);

            return;
        }

        if ((this.backing & Backing.Null) != 0)
        {
            writer.WriteNullValue();

            return;
        }
    }

    /// <inheritdoc/>
    public override int GetHashCode()
    {
        return JsonValueHelpers.GetHashCode(this);
    }

    /// <inheritdoc/>
    public override string ToString()
    {
        return this.Serialize();
    }

    /// <summary>
    /// Matches the value against the composed values, and returns the result of calling the provided match function for the first match found.
    /// </summary>
    /// <typeparam name="TIn">The immutable context to pass in to the match function.</typeparam>
    /// <typeparam name="TOut">The result of calling the match function.</typeparam>
    /// <param name="context">The context to pass to the match function.</param>
    /// <param name="matchPersonNameElement">Match a <see cref="JsonSchemaSample.Api.PersonNameElement"/>.</param>
    /// <param name="matchPersonNameElementArray">Match a <see cref="JsonSchemaSample.Api.PersonNameElementArray"/>.</param>
    /// <param name="defaultMatch">Match any other value.</param>
    /// <returns>An instance of the value returned by the match function.</returns>
    public TOut Match<TIn, TOut>(
        in TIn context,
        Matcher<JsonSchemaSample.Api.PersonNameElement, TIn, TOut> matchPersonNameElement,
        Matcher<JsonSchemaSample.Api.PersonNameElementArray, TIn, TOut> matchPersonNameElementArray,
        Matcher<JsonSchemaSample.Api.OtherNames, TIn, TOut> defaultMatch)
    {
        JsonSchemaSample.Api.PersonNameElement matchPersonNameElementValue = this.As<JsonSchemaSample.Api.PersonNameElement>();
        if (matchPersonNameElementValue.IsValid())
        {
            return matchPersonNameElement(matchPersonNameElementValue, context);
        }

        JsonSchemaSample.Api.PersonNameElementArray matchPersonNameElementArrayValue = this.As<JsonSchemaSample.Api.PersonNameElementArray>();
        if (matchPersonNameElementArrayValue.IsValid())
        {
            return matchPersonNameElementArray(matchPersonNameElementArrayValue, context);
        }

        return defaultMatch(this, context);
    }

    /// <summary>
    /// Matches the value against the composed values, and returns the result of calling the provided match function for the first match found.
    /// </summary>
    /// <typeparam name="TOut">The result of calling the match function.</typeparam>
    /// <param name="matchPersonNameElement">Match a <see cref="JsonSchemaSample.Api.PersonNameElement"/>.</param>
    /// <param name="matchPersonNameElementArray">Match a <see cref="JsonSchemaSample.Api.PersonNameElementArray"/>.</param>
    /// <param name="defaultMatch">Match any other value.</param>
    /// <returns>An instance of the value returned by the match function.</returns>
    public TOut Match<TOut>(
        Matcher<JsonSchemaSample.Api.PersonNameElement, TOut> matchPersonNameElement,
        Matcher<JsonSchemaSample.Api.PersonNameElementArray, TOut> matchPersonNameElementArray,
        Matcher<JsonSchemaSample.Api.OtherNames, TOut> defaultMatch)
    {
        JsonSchemaSample.Api.PersonNameElement matchPersonNameElementValue = this.As<JsonSchemaSample.Api.PersonNameElement>();
        if (matchPersonNameElementValue.IsValid())
        {
            return matchPersonNameElement(matchPersonNameElementValue);
        }

        JsonSchemaSample.Api.PersonNameElementArray matchPersonNameElementArrayValue = this.As<JsonSchemaSample.Api.PersonNameElementArray>();
        if (matchPersonNameElementArrayValue.IsValid())
        {
            return matchPersonNameElementArray(matchPersonNameElementArrayValue);
        }

        return defaultMatch(this);
    }

    /// <summary>
    /// Gets the value as a <see cref="JsonSchemaSample.Api.PersonNameElement" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsPersonNameElement(out JsonSchemaSample.Api.PersonNameElement result)
    {
        result = this.As<JsonSchemaSample.Api.PersonNameElement>();
        return result.IsValid();
    }

    /// <summary>
    /// Gets the value as a <see cref="JsonSchemaSample.Api.PersonNameElementArray" />.
    /// </summary>
    /// <param name="result">The result of the conversions.</param>
    /// <returns><see langword="true" /> if the conversion was valid.</returns>
    public bool TryGetAsPersonNameElementArray(out JsonSchemaSample.Api.PersonNameElementArray result)
    {
        result = this.As<JsonSchemaSample.Api.PersonNameElementArray>();
        return result.IsValid();
    }
}
