//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Text.Json;
using Corvus.Json;

namespace JsonSchemaSample.Api;
/// <summary>
/// A 1-dimensional array of Person instances
/// </summary>
public readonly partial struct Person1dArray
{
    private ValidationContext ValidateArray(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
    {
        ValidationContext result = validationContext;
        if (valueKind != JsonValueKind.Array)
        {
            return result;
        }

        int arrayLength = 0;
        using JsonArrayEnumerator<JsonSchemaSample.Api.PersonClosed> arrayEnumerator = this.EnumerateArray();
        while (arrayEnumerator.MoveNext())
        {
            if (level > ValidationLevel.Basic)
            {
                result = result.PushDocumentArrayIndex(arrayLength);
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PushValidationLocationProperty("items");
            }

            result = arrayEnumerator.Current.Validate(result, level);
            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation(); // items
            }

            result = result.WithLocalItemIndex(arrayLength);
            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation(); // array index
            }

            arrayLength++;
        }

        if (arrayLength > 30)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, $"6.4.1. maxItems - {arrayLength} exceeds maximum number of items 30.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "6.4.1. maxItems - item count exceeds maximum number of items 30.");
            }
            else
            {
                return result.WithResult(isValid: false);
            }
        }

        if (arrayLength < 30)
        {
            if (level >= ValidationLevel.Detailed)
            {
                result = result.WithResult(isValid: false, $"6.4.2. minItems - {arrayLength} is less than the minimum number of items 30.");
            }
            else if (level >= ValidationLevel.Basic)
            {
                result = result.WithResult(isValid: false, "6.4.2. minItems - item count is less than the minimum number of items 30.");
            }
            else
            {
                return result.WithResult(isValid: false);
            }
        }

        return result;
    }
}