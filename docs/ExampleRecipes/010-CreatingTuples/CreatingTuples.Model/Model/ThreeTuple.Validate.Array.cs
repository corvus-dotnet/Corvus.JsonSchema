//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Text.Json;
using Corvus.Json;

namespace JsonSchemaSample.Api;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
public readonly partial struct ThreeTuple
{
    private ValidationContext ValidateArray(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level)
    {
        ValidationContext result = validationContext;
        if (valueKind != JsonValueKind.Array)
        {
            return result;
        }

        int arrayLength = 0;
        using JsonArrayEnumerator<Corvus.Json.JsonNotAny> arrayEnumerator = this.EnumerateArray();
        while (arrayEnumerator.MoveNext())
        {
            if (level > ValidationLevel.Basic)
            {
                result = result.PushDocumentArrayIndex(arrayLength);
            }

            switch (arrayLength)
            {
                case 0:
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationProperty("prefixItems");
                    }

                    result = arrayEnumerator.Current.As<Corvus.Json.JsonInt32>().Validate(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation(); // prefixItems
                    }

                    result = result.WithLocalItemIndex(arrayLength);
                    break;
                case 1:
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationProperty("prefixItems");
                    }

                    result = arrayEnumerator.Current.As<Corvus.Json.JsonString>().Validate(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation(); // prefixItems
                    }

                    result = result.WithLocalItemIndex(arrayLength);
                    break;
                case 2:
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationProperty("prefixItems");
                    }

                    result = arrayEnumerator.Current.As<Corvus.Json.JsonBoolean>().Validate(result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation(); // prefixItems
                    }

                    result = result.WithLocalItemIndex(arrayLength);
                    break;
                default:
                    if (!result.HasEvaluatedLocalOrAppliedItemIndex(arrayLength))
                    {
                        if (level > ValidationLevel.Basic)
                        {
                            result = result.PushValidationLocationProperty("unevaluatedItems");
                        }

                        result = arrayEnumerator.Current.As<Corvus.Json.JsonNotAny>().Validate(result, level);
                        if (level == ValidationLevel.Flag && !result.IsValid)
                        {
                            return result;
                        }

                        if (level > ValidationLevel.Basic)
                        {
                            result = result.PopLocation(); // unevaluatedItems
                        }

                        result = result.WithLocalItemIndex(arrayLength);
                    }

                    break;
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation(); // array index
            }

            arrayLength++;
        }

        return result;
    }
}