//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace JsonSchemaSample.Api;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
/// <remarks>
/// <para>
/// A single JSON Patch operation
/// </para>
/// </remarks>
public readonly partial struct PatchOperation
{
    /// <summary>
    /// Conversion to <see cref = "JsonSchemaSample.Api.PatchOperation.AddOperation"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator JsonSchemaSample.Api.PatchOperation.AddOperation(PatchOperation value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Object) != 0)
        {
            return new(value.objectBacking);
        }

        return JsonSchemaSample.Api.PatchOperation.AddOperation.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "JsonSchemaSample.Api.PatchOperation.AddOperation"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator PatchOperation(JsonSchemaSample.Api.PatchOperation.AddOperation value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Object => new(value.AsPropertyBacking()),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "JsonSchemaSample.Api.PatchOperation.PatchOperationCommon"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator JsonSchemaSample.Api.PatchOperation.PatchOperationCommon(PatchOperation value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Object) != 0)
        {
            return new(value.objectBacking);
        }

        return JsonSchemaSample.Api.PatchOperation.PatchOperationCommon.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "JsonSchemaSample.Api.PatchOperation.PatchOperationCommon"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator PatchOperation(JsonSchemaSample.Api.PatchOperation.PatchOperationCommon value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Object => new(value.AsPropertyBacking()),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "JsonSchemaSample.Api.PatchOperation.RemoveOperation"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator JsonSchemaSample.Api.PatchOperation.RemoveOperation(PatchOperation value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Object) != 0)
        {
            return new(value.objectBacking);
        }

        return JsonSchemaSample.Api.PatchOperation.RemoveOperation.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "JsonSchemaSample.Api.PatchOperation.RemoveOperation"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator PatchOperation(JsonSchemaSample.Api.PatchOperation.RemoveOperation value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Object => new(value.AsPropertyBacking()),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "JsonSchemaSample.Api.PatchOperation.ReplaceOperation"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator JsonSchemaSample.Api.PatchOperation.ReplaceOperation(PatchOperation value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Object) != 0)
        {
            return new(value.objectBacking);
        }

        return JsonSchemaSample.Api.PatchOperation.ReplaceOperation.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "JsonSchemaSample.Api.PatchOperation.ReplaceOperation"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator PatchOperation(JsonSchemaSample.Api.PatchOperation.ReplaceOperation value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Object => new(value.AsPropertyBacking()),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "JsonSchemaSample.Api.PatchOperation.MoveOperation"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator JsonSchemaSample.Api.PatchOperation.MoveOperation(PatchOperation value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Object) != 0)
        {
            return new(value.objectBacking);
        }

        return JsonSchemaSample.Api.PatchOperation.MoveOperation.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "JsonSchemaSample.Api.PatchOperation.MoveOperation"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator PatchOperation(JsonSchemaSample.Api.PatchOperation.MoveOperation value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Object => new(value.AsPropertyBacking()),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "JsonSchemaSample.Api.PatchOperation.CopyOperation"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator JsonSchemaSample.Api.PatchOperation.CopyOperation(PatchOperation value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Object) != 0)
        {
            return new(value.objectBacking);
        }

        return JsonSchemaSample.Api.PatchOperation.CopyOperation.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "JsonSchemaSample.Api.PatchOperation.CopyOperation"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator PatchOperation(JsonSchemaSample.Api.PatchOperation.CopyOperation value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Object => new(value.AsPropertyBacking()),
            _ => Undefined
        };
    }

    /// <summary>
    /// Conversion to <see cref = "JsonSchemaSample.Api.PatchOperation.TestOperation"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static explicit operator JsonSchemaSample.Api.PatchOperation.TestOperation(PatchOperation value)
    {
        if ((value.backing & Backing.JsonElement) != 0)
        {
            return new(value.AsJsonElement);
        }

        if ((value.backing & Backing.Object) != 0)
        {
            return new(value.objectBacking);
        }

        return JsonSchemaSample.Api.PatchOperation.TestOperation.Undefined;
    }

    /// <summary>
    /// Conversion from <see cref = "JsonSchemaSample.Api.PatchOperation.TestOperation"/>.
    /// </summary>
    /// <param name = "value">The value from which to convert.</param>
    public static implicit operator PatchOperation(JsonSchemaSample.Api.PatchOperation.TestOperation value)
    {
        if (value.HasJsonElementBacking)
        {
            return new(value.AsJsonElement);
        }

        return value.ValueKind switch
        {
            JsonValueKind.Object => new(value.AsPropertyBacking()),
            _ => Undefined
        };
    }
}