//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace JsonSchemaSample.Api;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
public readonly partial struct Currencies
{
    /// <summary>
    /// Matches the value against each of the enumeration values, and returns the result of calling the provided match function for the first match found.
    /// </summary>
    /// <param name = "context">The context to pass to the match function.</param>
    /// <param name = "matchGbp">The function to call if the value matches the JSON value "\"gbp\"".</param>
    /// <param name = "matchUsd">The function to call if the value matches the JSON value "\"usd\"".</param>
    /// <param name = "matchEur">The function to call if the value matches the JSON value "\"eur\"".</param>
    /// <param name = "defaultMatch">The fallback match.</param>
    public TOut Match<TIn, TOut>(in TIn context, Func<TIn, TOut> matchGbp, Func<TIn, TOut> matchUsd, Func<TIn, TOut> matchEur, Func<TIn, TOut> defaultMatch)
    {
        if (this.ValueKind == JsonValueKind.String)
        {
            if (this.HasJsonElementBacking)
            {
                if (this.jsonElementBacking.ValueEquals(EnumValues.GbpUtf8))
                {
                    return matchGbp(context);
                }

                if (this.jsonElementBacking.ValueEquals(EnumValues.UsdUtf8))
                {
                    return matchUsd(context);
                }

                if (this.jsonElementBacking.ValueEquals(EnumValues.EurUtf8))
                {
                    return matchEur(context);
                }
            }
            else
            {
                switch (this.stringBacking)
                {
                    case "gbp":
                        return matchGbp(context);
                    case "usd":
                        return matchUsd(context);
                    case "eur":
                        return matchEur(context);
                    default:
                        break;
                }
            }
        }

        return defaultMatch(context);
    }

    /// <summary>
    /// Matches the value against each of the enumeration values, and returns the result of calling the provided match function for the first match found.
    /// </summary>
    /// <param name = "matchGbp">The function to call if the value matches the JSON value "\"gbp\"".</param>
    /// <param name = "matchUsd">The function to call if the value matches the JSON value "\"usd\"".</param>
    /// <param name = "matchEur">The function to call if the value matches the JSON value "\"eur\"".</param>
    /// <param name = "defaultMatch">The fallback match.</param>
    public TOut Match<TOut>(Func<TOut> matchGbp, Func<TOut> matchUsd, Func<TOut> matchEur, Func<TOut> defaultMatch)
    {
        if (this.ValueKind == JsonValueKind.String)
        {
            if (this.HasJsonElementBacking)
            {
                if (this.jsonElementBacking.ValueEquals(EnumValues.GbpUtf8))
                {
                    return matchGbp();
                }

                if (this.jsonElementBacking.ValueEquals(EnumValues.UsdUtf8))
                {
                    return matchUsd();
                }

                if (this.jsonElementBacking.ValueEquals(EnumValues.EurUtf8))
                {
                    return matchEur();
                }
            }
            else
            {
                switch (this.stringBacking)
                {
                    case "gbp":
                        return matchGbp();
                    case "usd":
                        return matchUsd();
                    case "eur":
                        return matchEur();
                    default:
                        break;
                }
            }
        }

        return defaultMatch();
    }

    /// <summary>
    /// Permitted values.
    /// </summary>
    public static class EnumValues
    {
        /// <summary>
        /// Gets "gbp" as a JSON value.
        /// </summary>
        public static readonly Currencies Gbp = Currencies.Parse("\"gbp\"");
        /// <summary>
        /// Gets "gbp" as a UTF8 string.
        /// </summary>
        public static ReadOnlySpan<byte> GbpUtf8 => "gbp"u8;

        /// <summary>
        /// Gets "usd" as a JSON value.
        /// </summary>
        public static readonly Currencies Usd = Currencies.Parse("\"usd\"");
        /// <summary>
        /// Gets "usd" as a UTF8 string.
        /// </summary>
        public static ReadOnlySpan<byte> UsdUtf8 => "usd"u8;

        /// <summary>
        /// Gets "eur" as a JSON value.
        /// </summary>
        public static readonly Currencies Eur = Currencies.Parse("\"eur\"");
        /// <summary>
        /// Gets "eur" as a UTF8 string.
        /// </summary>
        public static ReadOnlySpan<byte> EurUtf8 => "eur"u8;

        /// <summary>
        /// Gets "gbp" as a JSON value.
        /// </summary>
        internal static readonly Currencies Item0 = Currencies.Parse("\"gbp\"");
        /// <summary>
        /// Gets "usd" as a JSON value.
        /// </summary>
        internal static readonly Currencies Item1 = Currencies.Parse("\"usd\"");
        /// <summary>
        /// Gets "eur" as a JSON value.
        /// </summary>
        internal static readonly Currencies Item2 = Currencies.Parse("\"eur\"");
    }
}