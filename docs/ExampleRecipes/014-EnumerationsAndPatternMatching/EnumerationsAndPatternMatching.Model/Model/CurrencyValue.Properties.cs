//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace JsonSchemaSample.Api;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
/// <remarks>
/// <para>
/// A value in a specific currency
/// </para>
/// </remarks>
public readonly partial struct CurrencyValue
{
    /// <summary>
    /// The well-known property names in the JSON object.
    /// </summary>
    public static class JsonPropertyNames
    {
        /// <summary>
        /// JSON property name for <see cref = "Currency"/>.
        /// </summary>
        public static ReadOnlySpan<byte> CurrencyUtf8 => "currency"u8;

        /// <summary>
        /// JSON property name for <see cref = "Currency"/>.
        /// </summary>
        public const string Currency = "currency";
        /// <summary>
        /// JSON property name for <see cref = "Value"/>.
        /// </summary>
        public static ReadOnlySpan<byte> ValueUtf8 => "value"u8;

        /// <summary>
        /// JSON property name for <see cref = "Value"/>.
        /// </summary>
        public const string Value = "value";
    }

    /// <summary>
    /// Gets the <c>currency</c> property. If the instance is valid, this property will be not be <c>undefined</c>.
    /// </summary>
    public JsonSchemaSample.Api.Currencies Currency
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.CurrencyUtf8, out JsonElement result))
                {
                    return new JsonSchemaSample.Api.Currencies(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Currency, out JsonAny result))
                {
                    return result.As<JsonSchemaSample.Api.Currencies>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets the <c>value</c> property. If the instance is valid, this property will be not be <c>undefined</c>.
    /// </summary>
    public Corvus.Json.JsonDecimal Value
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ValueUtf8, out JsonElement result))
                {
                    return new Corvus.Json.JsonDecimal(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(JsonPropertyNames.Value, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonDecimal>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "CurrencyValue"/>.
    /// </summary>
    public static CurrencyValue Create(JsonSchemaSample.Api.Currencies currency, Corvus.Json.JsonDecimal value)
    {
        var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
        builder.Add(JsonPropertyNames.Currency, currency.AsAny);
        builder.Add(JsonPropertyNames.Value, value.AsAny);
        return new(builder.ToImmutable());
    }

    /// <summary>
    /// Sets currency.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public CurrencyValue WithCurrency(in JsonSchemaSample.Api.Currencies value)
    {
        return this.SetProperty(JsonPropertyNames.Currency, value);
    }

    /// <summary>
    /// Sets value.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public CurrencyValue WithValue(in Corvus.Json.JsonDecimal value)
    {
        return this.SetProperty(JsonPropertyNames.Value, value);
    }

    private static ValidationContext __CorvusValidateCurrency(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<JsonSchemaSample.Api.Currencies>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateValue(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonDecimal>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(JsonPropertyNames.CurrencyUtf8))
            {
                propertyValidator = __CorvusValidateCurrency;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.ValueUtf8))
            {
                propertyValidator = __CorvusValidateValue;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(JsonPropertyNames.Currency))
            {
                propertyValidator = __CorvusValidateCurrency;
                return true;
            }
            else if (property.NameEquals(JsonPropertyNames.Value))
            {
                propertyValidator = __CorvusValidateValue;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}